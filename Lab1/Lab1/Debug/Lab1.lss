
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b5e  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000964  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000549  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a2  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <main>:
#include "Part1.h"
#include "Part2.h"

int main(void)
{
	CLKPR = 0x80;
  74:	e1 e6       	ldi	r30, 0x61	; 97
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e8       	ldi	r24, 0x80	; 128
  7a:	80 83       	st	Z, r24
	CLKPR = 0x00;
  7c:	10 82       	st	Z, r1
	
	initLCD();
  7e:	0e 94 46 00 	call	0x8c	; 0x8c <initLCD>

	blink();
  82:	0e 94 53 00 	call	0xa6	; 0xa6 <blink>
	writeChar('5', 4);
	writeChar('9', 5);
	*/
	//writeLong(9876543210);
	
}
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <initLCD>:
#include <stdbool.h>
#include <limits.h>

void initLCD(void){

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  8c:	80 ec       	ldi	r24, 0xC0	; 192
  8e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	// Vi hade missat LCDPM0-2
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  92:	87 e3       	ldi	r24, 0x37	; 55
  94:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
  a4:	08 95       	ret

000000a6 <blink>:
#include <avr/io.h>
#include <stdbool.h>

void blink(void){

	TCCR1B = (1 << CS12);
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	// 1 Hz, ganska def inte korrekt gjort tho  
	
	//unsigned int l = 0xFFFF/8;
	
	unsigned int i = 0;
	unsigned int nextVal = 0;
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0

	// 1 Hz, ganska def inte korrekt gjort tho  
	
	//unsigned int l = 0xFFFF/8;
	
	unsigned int i = 0;
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	50 e0       	ldi	r21, 0x00	; 0
	//TCCR1B = (1 << WGM12);
	//TCCR1A = (1 << WGM10) | (1 << WGM11);
	
	
	
	bool b = false;
  b4:	60 e0       	ldi	r22, 0x00	; 0
	while(1){

		
	if (TCNT1 == nextVal)
	{
		nextVal = (++i % 8)*(0xFFFF/8);
  b6:	ef ef       	ldi	r30, 0xFF	; 255
  b8:	ff e1       	ldi	r31, 0x1F	; 31
		
		if(b){
			LCDDR0 = (1 << 2);
  ba:	74 e0       	ldi	r23, 0x04	; 4
	unsigned int i = 0;
	unsigned int nextVal = 0;
	while(1){

		
	if (TCNT1 == nextVal)
  bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	c9 f7       	brne	.-14     	; 0xbc <blink+0x16>
	{
		nextVal = (++i % 8)*(0xFFFF/8);
  ca:	4f 5f       	subi	r20, 0xFF	; 255
  cc:	5f 4f       	sbci	r21, 0xFF	; 255
  ce:	ca 01       	movw	r24, r20
  d0:	87 70       	andi	r24, 0x07	; 7
  d2:	99 27       	eor	r25, r25
  d4:	8e 9f       	mul	r24, r30
  d6:	90 01       	movw	r18, r0
  d8:	8f 9f       	mul	r24, r31
  da:	30 0d       	add	r19, r0
  dc:	9e 9f       	mul	r25, r30
  de:	30 0d       	add	r19, r0
  e0:	11 24       	eor	r1, r1
		
		if(b){
  e2:	66 23       	and	r22, r22
  e4:	21 f0       	breq	.+8      	; 0xee <blink+0x48>
			LCDDR0 = (1 << 2);
  e6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
			b = false;
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	e7 cf       	rjmp	.-50     	; 0xbc <blink+0x16>
		}else{
			LCDDR0 = 0;
  ee:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
			b = true;
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	e3 cf       	rjmp	.-58     	; 0xbc <blink+0x16>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
