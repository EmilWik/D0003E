
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3d  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000948  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e7  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000662  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000275a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  6c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <main>:

int main(void)
{

	
	initLCD();
  74:	0e 94 41 00 	call	0x82	; 0x82 <initLCD>


	button();
  78:	0e 94 53 00 	call	0xa6	; 0xa6 <button>
	writeChar('5', 4);
	writeChar('9', 5);
	*/
	//writeLong(9876543210);
	
}
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	08 95       	ret

00000082 <initLCD>:
#include <stdbool.h>
#include <limits.h>

void initLCD(void){

	CLKPR = 0x80;
  82:	e1 e6       	ldi	r30, 0x61	; 97
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	80 83       	st	Z, r24
	CLKPR = 0x00;
  8a:	10 82       	st	Z, r1

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  8c:	80 ec       	ldi	r24, 0xC0	; 192
  8e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	// Vi hade missat LCDPM0-2
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  92:	87 e3       	ldi	r24, 0x37	; 55
  94:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
  a4:	08 95       	ret

000000a6 <button>:
	
	/*
	Define pull-ups and set outputs high
	Define directions for port pins
	*/
	PORTB += (1<<PB7);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 58       	subi	r24, 0x80	; 128
  aa:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	84 b9       	out	0x04, r24	; 4
	
	
	//Insert nop for synchronization
	asm("nop");
  b0:	00 00       	nop

	
	bool risingEdge = false;
	bool currentVar = false;
	
	LCDDR1 = (1 << currentVar);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	//Insert nop for synchronization
	asm("nop");

	
	bool risingEdge = false;
	bool currentVar = false;
  b8:	20 e0       	ldi	r18, 0x00	; 0
	
	LCDDR1 = (1 << currentVar);
	while (1){
		
		if(PINB){
			risingEdge = true;
  ba:	31 e0       	ldi	r19, 0x01	; 1
		}
		else{
			if(risingEdge){
				risingEdge = false;
				currentVar = !currentVar;
				LCDDR1 = (1 << currentVar);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	50 e0       	ldi	r21, 0x00	; 0
	//Insert nop for synchronization
	asm("nop");

	
	bool risingEdge = false;
	bool currentVar = false;
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <button+0x20>
	
	LCDDR1 = (1 << currentVar);
	while (1){
		
		if(PINB){
			risingEdge = true;
  c4:	91 e0       	ldi	r25, 0x01	; 1
	bool currentVar = false;
	
	LCDDR1 = (1 << currentVar);
	while (1){
		
		if(PINB){
  c6:	83 b1       	in	r24, 0x03	; 3
  c8:	81 11       	cpse	r24, r1
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <button+0x1e>
			risingEdge = true;
		}
		else{
			if(risingEdge){
  cc:	99 23       	and	r25, r25
  ce:	c1 f3       	breq	.-16     	; 0xc0 <button+0x1a>
				risingEdge = false;
				currentVar = !currentVar;
  d0:	23 27       	eor	r18, r19
				LCDDR1 = (1 << currentVar);
  d2:	ca 01       	movw	r24, r20
  d4:	02 2e       	mov	r0, r18
  d6:	01 c0       	rjmp	.+2      	; 0xda <button+0x34>
  d8:	88 0f       	add	r24, r24
  da:	0a 94       	dec	r0
  dc:	ea f7       	brpl	.-6      	; 0xd8 <button+0x32>
  de:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
  e2:	ee cf       	rjmp	.-36     	; 0xc0 <button+0x1a>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
