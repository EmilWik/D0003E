
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6a  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094f  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000428  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e2  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002ad5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	19 01       	movw	r2, r18
  5e:	39 01       	movw	r6, r18
  60:	48 01       	movw	r8, r16
  62:	75 01       	movw	r14, r10
  64:	9a 01       	movw	r18, r20
  66:	bc 01       	movw	r22, r24
  68:	e3 01       	movw	r28, r6
  6a:	19 02       	muls	r17, r25
  6c:	de 00       	.word	0x00de	; ????
  6e:	9d 00       	.word	0x009d	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 ed       	ldi	r30, 0xD2	; 210
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e0       	ldi	r26, 0x02	; 2
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 30       	cpi	r26, 0x08	; 8
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "Part4.h"

int main(void)
{

	run(25000);
  ae:	88 ea       	ldi	r24, 0xA8	; 168
  b0:	91 e6       	ldi	r25, 0x61	; 97
  b2:	0e 94 2c 02 	call	0x458	; 0x458 <run>
	writeChar('5', 4);
	writeChar('9', 5);
	*/
	//writeLong(9876543210);
	
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <writeChar>:





static void writeChar(char c, int pos){
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
  ca:	db 01       	movw	r26, r22
  cc:	77 fd       	sbrc	r23, 7
  ce:	74 c0       	rjmp	.+232    	; 0x1b8 <writeChar+0xfc>
  d0:	b5 95       	asr	r27
  d2:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
  d4:	61 70       	andi	r22, 0x01	; 1
  d6:	70 78       	andi	r23, 0x80	; 128
  d8:	77 fd       	sbrc	r23, 7
  da:	67 c0       	rjmp	.+206    	; 0x1aa <writeChar+0xee>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	66 0f       	add	r22, r22
  e2:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
  e4:	ad 01       	movw	r20, r26
  e6:	44 51       	subi	r20, 0x14	; 20
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	ea 01       	movw	r28, r20
  ec:	88 81       	ld	r24, Y
  ee:	20 ef       	ldi	r18, 0xF0	; 240
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	06 2e       	mov	r0, r22
  f4:	02 c0       	rjmp	.+4      	; 0xfa <writeChar+0x3e>
  f6:	35 95       	asr	r19
  f8:	27 95       	ror	r18
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <writeChar+0x3a>
  fe:	82 23       	and	r24, r18
 100:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
 102:	7d 01       	movw	r14, r26
 104:	d1 ef       	ldi	r29, 0xF1	; 241
 106:	ed 0e       	add	r14, r29
 108:	f1 1c       	adc	r15, r1
 10a:	e7 01       	movw	r28, r14
 10c:	88 81       	ld	r24, Y
 10e:	82 23       	and	r24, r18
 110:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
 112:	25 96       	adiw	r28, 0x05	; 5
 114:	88 81       	ld	r24, Y
 116:	82 23       	and	r24, r18
 118:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
 11a:	a5 50       	subi	r26, 0x05	; 5
 11c:	bf 4f       	sbci	r27, 0xFF	; 255
 11e:	8c 91       	ld	r24, X
 120:	28 23       	and	r18, r24
 122:	2c 93       	st	X, r18
	
	switch (c){
 124:	0e 2f       	mov	r16, r30
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	f8 01       	movw	r30, r16
 12a:	f0 97       	sbiw	r30, 0x30	; 48
 12c:	ea 30       	cpi	r30, 0x0A	; 10
 12e:	f1 05       	cpc	r31, r1
 130:	a8 f5       	brcc	.+106    	; 0x19c <writeChar+0xe0>
 132:	e2 5d       	subi	r30, 0xD2	; 210
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__tablejump2__>
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
		FEET  += (1 << (0 + offset));
		break;
		case '9':
		HEAD  += (1 << (0 + offset));
 13a:	da 01       	movw	r26, r20
 13c:	ec 91       	ld	r30, X
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	9c 01       	movw	r18, r24
 144:	06 2e       	mov	r0, r22
 146:	01 c0       	rjmp	.+2      	; 0x14a <writeChar+0x8e>
 148:	22 0f       	add	r18, r18
 14a:	0a 94       	dec	r0
 14c:	ea f7       	brpl	.-6      	; 0x148 <writeChar+0x8c>
 14e:	3e 2f       	mov	r19, r30
 150:	32 0f       	add	r19, r18
 152:	3c 93       	st	X, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 154:	f7 01       	movw	r30, r14
 156:	40 81       	ld	r20, Z
 158:	fb 01       	movw	r30, r22
 15a:	32 96       	adiw	r30, 0x02	; 2
 15c:	8c 01       	movw	r16, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <writeChar+0xa8>
 160:	00 0f       	add	r16, r16
 162:	11 1f       	adc	r17, r17
 164:	ea 95       	dec	r30
 166:	e2 f7       	brpl	.-8      	; 0x160 <writeChar+0xa4>
 168:	32 2f       	mov	r19, r18
 16a:	30 2b       	or	r19, r16
 16c:	34 0f       	add	r19, r20
 16e:	d7 01       	movw	r26, r14
 170:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 172:	38 81       	ld	r19, Y
 174:	ab 01       	movw	r20, r22
 176:	4f 5f       	subi	r20, 0xFF	; 255
 178:	5f 4f       	sbci	r21, 0xFF	; 255
 17a:	fc 01       	movw	r30, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <writeChar+0xc6>
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	4a 95       	dec	r20
 184:	e2 f7       	brpl	.-8      	; 0x17e <writeChar+0xc2>
 186:	af 01       	movw	r20, r30
 188:	6d 5f       	subi	r22, 0xFD	; 253
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	01 c0       	rjmp	.+2      	; 0x190 <writeChar+0xd4>
 18e:	88 0f       	add	r24, r24
 190:	6a 95       	dec	r22
 192:	ea f7       	brpl	.-6      	; 0x18e <writeChar+0xd2>
 194:	84 2b       	or	r24, r20
 196:	82 2b       	or	r24, r18
 198:	83 0f       	add	r24, r19
 19a:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	08 95       	ret



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
 1aa:	61 50       	subi	r22, 0x01	; 1
 1ac:	71 09       	sbc	r23, r1
 1ae:	6e 6f       	ori	r22, 0xFE	; 254
 1b0:	7f 6f       	ori	r23, 0xFF	; 255
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	92 cf       	rjmp	.-220    	; 0xdc <writeChar+0x20>




static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
 1b8:	11 96       	adiw	r26, 0x01	; 1
 1ba:	8a cf       	rjmp	.-236    	; 0xd0 <writeChar+0x14>
		HEAD  += (1 << (0 + offset));
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset));
		break;
		case '8':
		HEAD  += (1 << (0 + offset));
 1bc:	fa 01       	movw	r30, r20
 1be:	10 81       	ld	r17, Z
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	9c 01       	movw	r18, r24
 1c6:	06 2e       	mov	r0, r22
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <writeChar+0x110>
 1ca:	22 0f       	add	r18, r18
 1cc:	0a 94       	dec	r0
 1ce:	ea f7       	brpl	.-6      	; 0x1ca <writeChar+0x10e>
 1d0:	31 2f       	mov	r19, r17
 1d2:	32 0f       	add	r19, r18
 1d4:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 1d6:	f7 01       	movw	r30, r14
 1d8:	30 81       	ld	r19, Z
 1da:	ab 01       	movw	r20, r22
 1dc:	4e 5f       	subi	r20, 0xFE	; 254
 1de:	5f 4f       	sbci	r21, 0xFF	; 255
 1e0:	8c 01       	movw	r16, r24
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <writeChar+0x12a>
 1e4:	00 0f       	add	r16, r16
 1e6:	4a 95       	dec	r20
 1e8:	ea f7       	brpl	.-6      	; 0x1e4 <writeChar+0x128>
 1ea:	40 2f       	mov	r20, r16
 1ec:	42 2b       	or	r20, r18
 1ee:	34 0f       	add	r19, r20
 1f0:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 1f2:	38 81       	ld	r19, Y
 1f4:	ab 01       	movw	r20, r22
 1f6:	4f 5f       	subi	r20, 0xFF	; 255
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	fc 01       	movw	r30, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <writeChar+0x146>
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	4a 95       	dec	r20
 204:	e2 f7       	brpl	.-8      	; 0x1fe <writeChar+0x142>
 206:	af 01       	movw	r20, r30
 208:	40 2b       	or	r20, r16
 20a:	42 2b       	or	r20, r18
 20c:	6d 5f       	subi	r22, 0xFD	; 253
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	01 c0       	rjmp	.+2      	; 0x214 <writeChar+0x158>
 212:	88 0f       	add	r24, r24
 214:	6a 95       	dec	r22
 216:	ea f7       	brpl	.-6      	; 0x212 <writeChar+0x156>
 218:	84 2b       	or	r24, r20
		FEET  += (1 << (0 + offset));
		break;
		case '3':
		HEAD  += (1 << (0 + offset));
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 21a:	83 0f       	add	r24, r19
 21c:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 21e:	8c 91       	ld	r24, X
 220:	28 0f       	add	r18, r24
 222:	2c 93       	st	X, r18
		break;
		
		default:
		break;
	}
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	08 95       	ret
	LEGS  &= (0x0F0 >> offset);
	FEET  &= (0x0F0 >> offset);
	
	switch (c){
		case '0':
		HEAD  += (1 << (0 + offset));
 232:	fa 01       	movw	r30, r20
 234:	10 81       	ld	r17, Z
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	9c 01       	movw	r18, r24
 23c:	06 2e       	mov	r0, r22
 23e:	01 c0       	rjmp	.+2      	; 0x242 <writeChar+0x186>
 240:	22 0f       	add	r18, r18
 242:	0a 94       	dec	r0
 244:	ea f7       	brpl	.-6      	; 0x240 <writeChar+0x184>
 246:	31 2f       	mov	r19, r17
 248:	32 0f       	add	r19, r18
 24a:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 24c:	f7 01       	movw	r30, r14
 24e:	30 81       	ld	r19, Z
 250:	6e 5f       	subi	r22, 0xFE	; 254
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	01 c0       	rjmp	.+2      	; 0x258 <writeChar+0x19c>
 256:	88 0f       	add	r24, r24
 258:	6a 95       	dec	r22
 25a:	ea f7       	brpl	.-6      	; 0x256 <writeChar+0x19a>
 25c:	82 2b       	or	r24, r18
 25e:	93 2f       	mov	r25, r19
 260:	98 0f       	add	r25, r24
 262:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset)) | (1 << (2 + offset));
 264:	98 81       	ld	r25, Y
 266:	89 0f       	add	r24, r25
 268:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 26a:	8c 91       	ld	r24, X
 26c:	28 0f       	add	r18, r24
 26e:	2c 93       	st	X, r18
		break;
 270:	95 cf       	rjmp	.-214    	; 0x19c <writeChar+0xe0>
		case '1':
		CHEST += (1 << (0 + offset));
 272:	d7 01       	movw	r26, r14
 274:	2c 91       	ld	r18, X
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	01 c0       	rjmp	.+2      	; 0x27e <writeChar+0x1c2>
 27c:	88 0f       	add	r24, r24
 27e:	6a 95       	dec	r22
 280:	ea f7       	brpl	.-6      	; 0x27c <writeChar+0x1c0>
 282:	92 2f       	mov	r25, r18
 284:	98 0f       	add	r25, r24
 286:	9c 93       	st	X, r25
		LEGS  += (1 << (0 + offset));
 288:	98 81       	ld	r25, Y
 28a:	89 0f       	add	r24, r25
 28c:	88 83       	st	Y, r24
		break;
 28e:	86 cf       	rjmp	.-244    	; 0x19c <writeChar+0xe0>
		case '2':
		HEAD  += (1 << (0 + offset));
 290:	fa 01       	movw	r30, r20
 292:	10 81       	ld	r17, Z
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	9c 01       	movw	r18, r24
 29a:	06 2e       	mov	r0, r22
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <writeChar+0x1e4>
 29e:	22 0f       	add	r18, r18
 2a0:	0a 94       	dec	r0
 2a2:	ea f7       	brpl	.-6      	; 0x29e <writeChar+0x1e2>
 2a4:	31 2f       	mov	r19, r17
 2a6:	32 0f       	add	r19, r18
 2a8:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
 2aa:	f7 01       	movw	r30, r14
 2ac:	30 81       	ld	r19, Z
 2ae:	32 0f       	add	r19, r18
 2b0:	30 83       	st	Z, r19
		LEGS  += (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 2b2:	38 81       	ld	r19, Y
 2b4:	ab 01       	movw	r20, r22
 2b6:	4f 5f       	subi	r20, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	fc 01       	movw	r30, r24
 2bc:	04 2e       	mov	r0, r20
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <writeChar+0x206>
 2c0:	ee 0f       	add	r30, r30
 2c2:	0a 94       	dec	r0
 2c4:	ea f7       	brpl	.-6      	; 0x2c0 <writeChar+0x204>
 2c6:	4f 5f       	subi	r20, 0xFF	; 255
 2c8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ca:	8c 01       	movw	r16, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <writeChar+0x216>
 2ce:	00 0f       	add	r16, r16
 2d0:	11 1f       	adc	r17, r17
 2d2:	4a 95       	dec	r20
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <writeChar+0x212>
 2d6:	a8 01       	movw	r20, r16
 2d8:	4e 2b       	or	r20, r30
 2da:	6d 5f       	subi	r22, 0xFD	; 253
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <writeChar+0x226>
 2e0:	88 0f       	add	r24, r24
 2e2:	6a 95       	dec	r22
 2e4:	ea f7       	brpl	.-6      	; 0x2e0 <writeChar+0x224>
 2e6:	84 2b       	or	r24, r20
 2e8:	98 cf       	rjmp	.-208    	; 0x21a <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		case '3':
		HEAD  += (1 << (0 + offset));
 2ea:	fa 01       	movw	r30, r20
 2ec:	10 81       	ld	r17, Z
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	9c 01       	movw	r18, r24
 2f4:	06 2e       	mov	r0, r22
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <writeChar+0x23e>
 2f8:	22 0f       	add	r18, r18
 2fa:	0a 94       	dec	r0
 2fc:	ea f7       	brpl	.-6      	; 0x2f8 <writeChar+0x23c>
 2fe:	31 2f       	mov	r19, r17
 300:	32 0f       	add	r19, r18
 302:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
 304:	f7 01       	movw	r30, r14
 306:	30 81       	ld	r19, Z
 308:	32 0f       	add	r19, r18
 30a:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 30c:	38 81       	ld	r19, Y
 30e:	ab 01       	movw	r20, r22
 310:	4f 5f       	subi	r20, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	8c 01       	movw	r16, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <writeChar+0x260>
 318:	00 0f       	add	r16, r16
 31a:	11 1f       	adc	r17, r17
 31c:	4a 95       	dec	r20
 31e:	e2 f7       	brpl	.-8      	; 0x318 <writeChar+0x25c>
 320:	a8 01       	movw	r20, r16
 322:	6d 5f       	subi	r22, 0xFD	; 253
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	01 c0       	rjmp	.+2      	; 0x32a <writeChar+0x26e>
 328:	88 0f       	add	r24, r24
 32a:	6a 95       	dec	r22
 32c:	ea f7       	brpl	.-6      	; 0x328 <writeChar+0x26c>
 32e:	84 2b       	or	r24, r20
 330:	82 2b       	or	r24, r18
 332:	73 cf       	rjmp	.-282    	; 0x21a <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		case '4':
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 334:	d7 01       	movw	r26, r14
 336:	4c 91       	ld	r20, X
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	9c 01       	movw	r18, r24
 33e:	06 2e       	mov	r0, r22
 340:	01 c0       	rjmp	.+2      	; 0x344 <writeChar+0x288>
 342:	22 0f       	add	r18, r18
 344:	0a 94       	dec	r0
 346:	ea f7       	brpl	.-6      	; 0x342 <writeChar+0x286>
 348:	fb 01       	movw	r30, r22
 34a:	32 96       	adiw	r30, 0x02	; 2
 34c:	8c 01       	movw	r16, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <writeChar+0x298>
 350:	00 0f       	add	r16, r16
 352:	11 1f       	adc	r17, r17
 354:	ea 95       	dec	r30
 356:	e2 f7       	brpl	.-8      	; 0x350 <writeChar+0x294>
 358:	32 2f       	mov	r19, r18
 35a:	30 2b       	or	r19, r16
 35c:	34 0f       	add	r19, r20
 35e:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 360:	38 81       	ld	r19, Y
 362:	ab 01       	movw	r20, r22
 364:	4f 5f       	subi	r20, 0xFF	; 255
 366:	5f 4f       	sbci	r21, 0xFF	; 255
 368:	dc 01       	movw	r26, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <writeChar+0x2b4>
 36c:	aa 0f       	add	r26, r26
 36e:	bb 1f       	adc	r27, r27
 370:	4a 95       	dec	r20
 372:	e2 f7       	brpl	.-8      	; 0x36c <writeChar+0x2b0>
 374:	ad 01       	movw	r20, r26
 376:	08 cf       	rjmp	.-496    	; 0x188 <writeChar+0xcc>
		break;
		case '5':
		HEAD  += (1 << (0 + offset));
 378:	fa 01       	movw	r30, r20
 37a:	10 81       	ld	r17, Z
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9c 01       	movw	r18, r24
 382:	06 2e       	mov	r0, r22
 384:	01 c0       	rjmp	.+2      	; 0x388 <writeChar+0x2cc>
 386:	22 0f       	add	r18, r18
 388:	0a 94       	dec	r0
 38a:	ea f7       	brpl	.-6      	; 0x386 <writeChar+0x2ca>
 38c:	31 2f       	mov	r19, r17
 38e:	32 0f       	add	r19, r18
 390:	30 83       	st	Z, r19
		CHEST += (1 << (2 + offset));
 392:	f7 01       	movw	r30, r14
 394:	30 81       	ld	r19, Z
 396:	ab 01       	movw	r20, r22
 398:	4e 5f       	subi	r20, 0xFE	; 254
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	8c 01       	movw	r16, r24
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <writeChar+0x2e8>
 3a0:	00 0f       	add	r16, r16
 3a2:	11 1f       	adc	r17, r17
 3a4:	4a 95       	dec	r20
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <writeChar+0x2e4>
 3a8:	a8 01       	movw	r20, r16
 3aa:	43 0f       	add	r20, r19
 3ac:	40 83       	st	Z, r20
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 3ae:	38 81       	ld	r19, Y
 3b0:	ab 01       	movw	r20, r22
 3b2:	4f 5f       	subi	r20, 0xFF	; 255
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255
 3b6:	fc 01       	movw	r30, r24
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <writeChar+0x302>
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	4a 95       	dec	r20
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <writeChar+0x2fe>
 3c2:	af 01       	movw	r20, r30
 3c4:	ae cf       	rjmp	.-164    	; 0x322 <writeChar+0x266>
		FEET  += (1 << (0 + offset));
		break;
		case '6':
		HEAD  += (1 << (0 + offset));
 3c6:	fa 01       	movw	r30, r20
 3c8:	20 81       	ld	r18, Z
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	8c 01       	movw	r16, r24
 3d0:	06 2e       	mov	r0, r22
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <writeChar+0x31a>
 3d4:	00 0f       	add	r16, r16
 3d6:	0a 94       	dec	r0
 3d8:	ea f7       	brpl	.-6      	; 0x3d4 <writeChar+0x318>
 3da:	20 0f       	add	r18, r16
 3dc:	20 83       	st	Z, r18
		CHEST += (1 << (2 + offset));
 3de:	f7 01       	movw	r30, r14
 3e0:	40 81       	ld	r20, Z
 3e2:	9b 01       	movw	r18, r22
 3e4:	2e 5f       	subi	r18, 0xFE	; 254
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255
 3e8:	fc 01       	movw	r30, r24
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <writeChar+0x334>
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	2a 95       	dec	r18
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <writeChar+0x330>
 3f4:	9f 01       	movw	r18, r30
 3f6:	34 2f       	mov	r19, r20
 3f8:	32 0f       	add	r19, r18
 3fa:	f7 01       	movw	r30, r14
 3fc:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 3fe:	38 81       	ld	r19, Y
 400:	ab 01       	movw	r20, r22
 402:	4f 5f       	subi	r20, 0xFF	; 255
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	fc 01       	movw	r30, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	4a 95       	dec	r20
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	2e 2b       	or	r18, r30
 414:	20 2b       	or	r18, r16
 416:	6d 5f       	subi	r22, 0xFD	; 253
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	01 c0       	rjmp	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	88 0f       	add	r24, r24
 41e:	6a 95       	dec	r22
 420:	ea f7       	brpl	.-6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 422:	82 2b       	or	r24, r18
 424:	83 0f       	add	r24, r19
 426:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 428:	8c 91       	ld	r24, X
 42a:	e0 2f       	mov	r30, r16
 42c:	e8 0f       	add	r30, r24
 42e:	ec 93       	st	X, r30
		break;
 430:	b5 ce       	rjmp	.-662    	; 0x19c <writeChar+0xe0>
		case '7':
		HEAD  += (1 << (0 + offset));
 432:	da 01       	movw	r26, r20
 434:	2c 91       	ld	r18, X
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	01 c0       	rjmp	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	88 0f       	add	r24, r24
 43e:	6a 95       	dec	r22
 440:	ea f7       	brpl	.-6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 442:	92 2f       	mov	r25, r18
 444:	98 0f       	add	r25, r24
 446:	9c 93       	st	X, r25
		CHEST += (1 << (0 + offset));
 448:	f7 01       	movw	r30, r14
 44a:	90 81       	ld	r25, Z
 44c:	98 0f       	add	r25, r24
 44e:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset));
 450:	98 81       	ld	r25, Y
 452:	89 0f       	add	r24, r25
 454:	88 83       	st	Y, r24
		break;
 456:	a2 ce       	rjmp	.-700    	; 0x19c <writeChar+0xe0>

00000458 <run>:





void run(int startValue){
 458:	2c 01       	movw	r4, r24


static void init(void){
	
	/* LCD */
	CLKPR = 0x80;
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	CLKPR = 0x00;
 460:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 46a:	87 e3       	ldi	r24, 0x37	; 55
 46c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 470:	87 e0       	ldi	r24, 0x07	; 7
 472:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 476:	2f e0       	ldi	r18, 0x0F	; 15
 478:	20 93 e7 00 	sts	0x00E7, r18	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	/*Blink*/
	TCCR1B = (1 << CS12);
 47c:	84 e0       	ldi	r24, 0x04	; 4
 47e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	/*Button*/
	PORTB += (1<<PB7);
 482:	95 b1       	in	r25, 0x05	; 5
 484:	90 58       	subi	r25, 0x80	; 128
 486:	95 b9       	out	0x05, r25	; 5
	DDRB = (1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
 488:	24 b9       	out	0x04, r18	; 4
	asm("nop");
 48a:	00 00       	nop


void run(int startValue){
	init();
	
	long nextStartValue = startValue;
 48c:	05 2c       	mov	r0, r5
 48e:	00 0c       	add	r0, r0
 490:	66 08       	sbc	r6, r6
 492:	77 08       	sbc	r7, r7



static long primes(int startValue){
	
	for (long i = startValue; i <= LONG_MAX; i++){
 494:	05 2c       	mov	r0, r5
 496:	00 0c       	add	r0, r0
 498:	66 08       	sbc	r6, r6
 49a:	77 08       	sbc	r7, r7
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <run+0x50>
 49e:	5f ef       	ldi	r21, 0xFF	; 255
 4a0:	45 1a       	sub	r4, r21
 4a2:	55 0a       	sbc	r5, r21
 4a4:	65 0a       	sbc	r6, r21
 4a6:	75 0a       	sbc	r7, r21

}

static bool is_prime(long i){
	
	if(i < 2){
 4a8:	42 e0       	ldi	r20, 0x02	; 2
 4aa:	44 16       	cp	r4, r20
 4ac:	51 04       	cpc	r5, r1
 4ae:	61 04       	cpc	r6, r1
 4b0:	71 04       	cpc	r7, r1
 4b2:	ac f3       	brlt	.-22     	; 0x49e <run+0x46>
		return false;
	}

	for (int n = 2; n < i; n++){
 4b4:	52 e0       	ldi	r21, 0x02	; 2
 4b6:	45 16       	cp	r4, r21
 4b8:	51 04       	cpc	r5, r1
 4ba:	61 04       	cpc	r6, r1
 4bc:	71 04       	cpc	r7, r1
 4be:	e1 f0       	breq	.+56     	; 0x4f8 <run+0xa0>
		if ( i % n == 0){
 4c0:	40 fe       	sbrs	r4, 0
 4c2:	ed cf       	rjmp	.-38     	; 0x49e <run+0x46>
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	c8 2e       	mov	r12, r24
 4c8:	d1 2c       	mov	r13, r1
 4ca:	e1 2c       	mov	r14, r1
 4cc:	f1 2c       	mov	r15, r1
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <run+0x92>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	c8 1a       	sub	r12, r24
 4d4:	d8 0a       	sbc	r13, r24
 4d6:	e8 0a       	sbc	r14, r24
 4d8:	f8 0a       	sbc	r15, r24
 4da:	c3 01       	movw	r24, r6
 4dc:	b2 01       	movw	r22, r4
 4de:	0e 94 20 03 	call	0x640	; 0x640 <__divmodsi4>
 4e2:	67 2b       	or	r22, r23
 4e4:	68 2b       	or	r22, r24
 4e6:	69 2b       	or	r22, r25
 4e8:	d1 f2       	breq	.-76     	; 0x49e <run+0x46>
	
	if(i < 2){
		return false;
	}

	for (int n = 2; n < i; n++){
 4ea:	96 01       	movw	r18, r12
 4ec:	a7 01       	movw	r20, r14
 4ee:	4c 14       	cp	r4, r12
 4f0:	5d 04       	cpc	r5, r13
 4f2:	6e 04       	cpc	r6, r14
 4f4:	7f 04       	cpc	r7, r15
 4f6:	61 f7       	brne	.-40     	; 0x4d0 <run+0x78>
		if ( i % n == 0){
 4f8:	73 01       	movw	r14, r6
 4fa:	62 01       	movw	r12, r4
 4fc:	c4 e0       	ldi	r28, 0x04	; 4
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
 500:	09 c0       	rjmp	.+18     	; 0x514 <__stack+0x15>

	while(pos >= 0){
		rest = div % 10;
		
		if(div == 0){
			writeChar(' ', pos--);
 502:	8e 01       	movw	r16, r28
 504:	b5 01       	movw	r22, r10
 506:	80 e2       	ldi	r24, 0x20	; 32
 508:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
 50c:	21 97       	sbiw	r28, 0x01	; 1
	
	if (i == 0){
		writeChar('0', pos--);
	}

	while(pos >= 0){
 50e:	0f 3f       	cpi	r16, 0xFF	; 255
 510:	1f 4f       	sbci	r17, 0xFF	; 255
 512:	19 f1       	breq	.+70     	; 0x55a <__stack+0x5b>
 514:	5e 01       	movw	r10, r28
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	a9 1a       	sub	r10, r25
 51a:	b9 0a       	sbc	r11, r25
		rest = div % 10;
		
		if(div == 0){
 51c:	c1 14       	cp	r12, r1
 51e:	d1 04       	cpc	r13, r1
 520:	e1 04       	cpc	r14, r1
 522:	f1 04       	cpc	r15, r1
 524:	71 f3       	breq	.-36     	; 0x502 <__stack+0x3>
			writeChar(' ', pos--);
		}
		else{
			div /= 10;
 526:	c7 01       	movw	r24, r14
 528:	b6 01       	movw	r22, r12
 52a:	2a e0       	ldi	r18, 0x0A	; 10
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	0e 94 20 03 	call	0x640	; 0x640 <__divmodsi4>
 536:	92 2e       	mov	r9, r18
 538:	83 2e       	mov	r8, r19
 53a:	34 2e       	mov	r3, r20
 53c:	25 2e       	mov	r2, r21
 53e:	86 2f       	mov	r24, r22
			writeChar(48+rest, pos--);
 540:	8e 01       	movw	r16, r28
 542:	b5 01       	movw	r22, r10
 544:	80 5d       	subi	r24, 0xD0	; 208
 546:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
		
		if(div == 0){
			writeChar(' ', pos--);
		}
		else{
			div /= 10;
 54a:	c9 2c       	mov	r12, r9
 54c:	d8 2c       	mov	r13, r8
 54e:	e3 2c       	mov	r14, r3
 550:	f2 2c       	mov	r15, r2
 552:	21 97       	sbiw	r28, 0x01	; 1
	
	if (i == 0){
		writeChar('0', pos--);
	}

	while(pos >= 0){
 554:	0f 3f       	cpi	r16, 0xFF	; 255
 556:	1f 4f       	sbci	r17, 0xFF	; 255
 558:	e9 f6       	brne	.-70     	; 0x514 <__stack+0x15>
	
	long nextStartValue = startValue;
	
	while(1){
		
		nextStartValue = primes(nextStartValue) + 1;
 55a:	5f ef       	ldi	r21, 0xFF	; 255
 55c:	45 1a       	sub	r4, r21
 55e:	55 0a       	sbc	r5, r21
 560:	65 0a       	sbc	r6, r21
 562:	75 0a       	sbc	r7, r21
}


static void blink(void){
	
	LCDDR0 |= state << 2;
 564:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 568:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 56c:	88 0f       	add	r24, r24
 56e:	88 0f       	add	r24, r24
 570:	89 2b       	or	r24, r25
 572:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	
	if (TCNT1 == nextVal)			// if (TCNT1 >= nextVal)
 576:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 57a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 57e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <nextVal>
 582:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <nextVal+0x1>
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	39 f5       	brne	.+78     	; 0x5da <__stack+0xdb>
	{
		nextVal = (++i % 8)*(0xFFFF/8);
 58c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
 590:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i+0x1>
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i+0x1>
 59a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
 59e:	87 70       	andi	r24, 0x07	; 7
 5a0:	99 27       	eor	r25, r25
 5a2:	4f ef       	ldi	r20, 0xFF	; 255
 5a4:	5f e1       	ldi	r21, 0x1F	; 31
 5a6:	84 9f       	mul	r24, r20
 5a8:	90 01       	movw	r18, r0
 5aa:	85 9f       	mul	r24, r21
 5ac:	30 0d       	add	r19, r0
 5ae:	94 9f       	mul	r25, r20
 5b0:	30 0d       	add	r19, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <nextVal+0x1>
 5b8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <nextVal>
		
		LCDDR0 |= state << 2;
 5bc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 5c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5c4:	88 0f       	add	r24, r24
 5c6:	88 0f       	add	r24, r24
 5c8:	89 2b       	or	r24, r25
 5ca:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		state = !state;
 5ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5d2:	51 e0       	ldi	r21, 0x01	; 1
 5d4:	85 27       	eor	r24, r21
 5d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}

static void button(void){
	
	
	LCDDR1 |= (1 << (currentVar+1));
 5da:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 5de:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 5e2:	9f 5f       	subi	r25, 0xFF	; 255
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__stack+0xef>
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	9a 95       	dec	r25
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <__stack+0xeb>
 5f2:	ca 01       	movw	r24, r20
 5f4:	82 2b       	or	r24, r18
 5f6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

		
	if(PINB){
 5fa:	83 b1       	in	r24, 0x03	; 3
 5fc:	81 11       	cpse	r24, r1
 5fe:	1c c0       	rjmp	.+56     	; 0x638 <__stack+0x139>
		risingEdge = true;
	}
	else{
		if(risingEdge){
 600:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <risingEdge>
 604:	88 23       	and	r24, r24
 606:	09 f4       	brne	.+2      	; 0x60a <__stack+0x10b>
 608:	45 cf       	rjmp	.-374    	; 0x494 <run+0x3c>
			risingEdge = false;
 60a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <risingEdge>
			currentVar = !currentVar;
 60e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	89 27       	eor	r24, r25
 616:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			LCDDR1 |= (1 <<( currentVar+1));
 61a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 61e:	8f 5f       	subi	r24, 0xFF	; 255
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <__stack+0x12b>
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	8a 95       	dec	r24
 62c:	e2 f7       	brpl	.-8      	; 0x626 <__stack+0x127>
 62e:	ca 01       	movw	r24, r20
 630:	82 2b       	or	r24, r18
 632:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 636:	2e cf       	rjmp	.-420    	; 0x494 <run+0x3c>
	
	LCDDR1 |= (1 << (currentVar+1));

		
	if(PINB){
		risingEdge = true;
 638:	51 e0       	ldi	r21, 0x01	; 1
 63a:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <risingEdge>
 63e:	2a cf       	rjmp	.-428    	; 0x494 <run+0x3c>

00000640 <__divmodsi4>:
 640:	05 2e       	mov	r0, r21
 642:	97 fb       	bst	r25, 7
 644:	1e f4       	brtc	.+6      	; 0x64c <__divmodsi4+0xc>
 646:	00 94       	com	r0
 648:	0e 94 37 03 	call	0x66e	; 0x66e <__negsi2>
 64c:	57 fd       	sbrc	r21, 7
 64e:	07 d0       	rcall	.+14     	; 0x65e <__divmodsi4_neg2>
 650:	0e 94 45 03 	call	0x68a	; 0x68a <__udivmodsi4>
 654:	07 fc       	sbrc	r0, 7
 656:	03 d0       	rcall	.+6      	; 0x65e <__divmodsi4_neg2>
 658:	4e f4       	brtc	.+18     	; 0x66c <__divmodsi4_exit>
 65a:	0c 94 37 03 	jmp	0x66e	; 0x66e <__negsi2>

0000065e <__divmodsi4_neg2>:
 65e:	50 95       	com	r21
 660:	40 95       	com	r20
 662:	30 95       	com	r19
 664:	21 95       	neg	r18
 666:	3f 4f       	sbci	r19, 0xFF	; 255
 668:	4f 4f       	sbci	r20, 0xFF	; 255
 66a:	5f 4f       	sbci	r21, 0xFF	; 255

0000066c <__divmodsi4_exit>:
 66c:	08 95       	ret

0000066e <__negsi2>:
 66e:	90 95       	com	r25
 670:	80 95       	com	r24
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	08 95       	ret

0000067e <__tablejump2__>:
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	05 90       	lpm	r0, Z+
 684:	f4 91       	lpm	r31, Z
 686:	e0 2d       	mov	r30, r0
 688:	09 94       	ijmp

0000068a <__udivmodsi4>:
 68a:	a1 e2       	ldi	r26, 0x21	; 33
 68c:	1a 2e       	mov	r1, r26
 68e:	aa 1b       	sub	r26, r26
 690:	bb 1b       	sub	r27, r27
 692:	fd 01       	movw	r30, r26
 694:	0d c0       	rjmp	.+26     	; 0x6b0 <__udivmodsi4_ep>

00000696 <__udivmodsi4_loop>:
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	ee 1f       	adc	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	a2 17       	cp	r26, r18
 6a0:	b3 07       	cpc	r27, r19
 6a2:	e4 07       	cpc	r30, r20
 6a4:	f5 07       	cpc	r31, r21
 6a6:	20 f0       	brcs	.+8      	; 0x6b0 <__udivmodsi4_ep>
 6a8:	a2 1b       	sub	r26, r18
 6aa:	b3 0b       	sbc	r27, r19
 6ac:	e4 0b       	sbc	r30, r20
 6ae:	f5 0b       	sbc	r31, r21

000006b0 <__udivmodsi4_ep>:
 6b0:	66 1f       	adc	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	1a 94       	dec	r1
 6ba:	69 f7       	brne	.-38     	; 0x696 <__udivmodsi4_loop>
 6bc:	60 95       	com	r22
 6be:	70 95       	com	r23
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	9b 01       	movw	r18, r22
 6c6:	ac 01       	movw	r20, r24
 6c8:	bd 01       	movw	r22, r26
 6ca:	cf 01       	movw	r24, r30
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
