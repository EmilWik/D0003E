
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006b4  00000748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  0000074a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b65  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041d  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000020e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000541  00000000  00000000  000025d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	14 01       	movw	r2, r8
  5e:	34 01       	movw	r6, r8
  60:	43 01       	movw	r8, r6
  62:	6b 01       	movw	r12, r22
  64:	8a 01       	movw	r16, r20
  66:	b7 01       	movw	r22, r14
  68:	de 01       	movw	r26, r28
  6a:	14 02       	muls	r17, r20
  6c:	9f 00       	.word	0x009f	; ????
  6e:	e2 00       	.word	0x00e2	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 eb       	ldi	r30, 0xB4	; 180
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e0       	ldi	r26, 0x02	; 2
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 30       	cpi	r26, 0x08	; 8
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "Part4.h"

int main(void)
{

	run(5000);
  ae:	68 e8       	ldi	r22, 0x88	; 136
  b0:	73 e1       	ldi	r23, 0x13	; 19
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 27 02 	call	0x44e	; 0x44e <run>
	writeChar('5', 4);
	writeChar('9', 5);
	*/
	//writeLong(9876543210);
	
}
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret

000000c0 <writeChar>:





static void writeChar(char c, int pos){
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
  ce:	db 01       	movw	r26, r22
  d0:	77 fd       	sbrc	r23, 7
  d2:	76 c0       	rjmp	.+236    	; 0x1c0 <writeChar+0x100>
  d4:	b5 95       	asr	r27
  d6:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
  d8:	61 70       	andi	r22, 0x01	; 1
  da:	70 78       	andi	r23, 0x80	; 128
  dc:	77 fd       	sbrc	r23, 7
  de:	69 c0       	rjmp	.+210    	; 0x1b2 <writeChar+0xf2>
  e0:	66 0f       	add	r22, r22
  e2:	77 1f       	adc	r23, r23
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
  e8:	ad 01       	movw	r20, r26
  ea:	44 51       	subi	r20, 0x14	; 20
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
  ee:	ea 01       	movw	r28, r20
  f0:	88 81       	ld	r24, Y
  f2:	20 ef       	ldi	r18, 0xF0	; 240
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	06 2e       	mov	r0, r22
  f8:	02 c0       	rjmp	.+4      	; 0xfe <writeChar+0x3e>
  fa:	35 95       	asr	r19
  fc:	27 95       	ror	r18
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <writeChar+0x3a>
 102:	82 23       	and	r24, r18
 104:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
 106:	7d 01       	movw	r14, r26
 108:	d1 ef       	ldi	r29, 0xF1	; 241
 10a:	ed 0e       	add	r14, r29
 10c:	f1 1c       	adc	r15, r1
 10e:	e7 01       	movw	r28, r14
 110:	88 81       	ld	r24, Y
 112:	82 23       	and	r24, r18
 114:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
 116:	25 96       	adiw	r28, 0x05	; 5
 118:	88 81       	ld	r24, Y
 11a:	82 23       	and	r24, r18
 11c:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
 11e:	a5 50       	subi	r26, 0x05	; 5
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	8c 91       	ld	r24, X
 124:	28 23       	and	r18, r24
 126:	2c 93       	st	X, r18
	
	
	switch (c){
 128:	0e 2f       	mov	r16, r30
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	f8 01       	movw	r30, r16
 12e:	f0 97       	sbiw	r30, 0x30	; 48
 130:	ea 30       	cpi	r30, 0x0A	; 10
 132:	f1 05       	cpc	r31, r1
 134:	b8 f5       	brcc	.+110    	; 0x1a4 <writeChar+0xe4>
 136:	e2 5d       	subi	r30, 0xD2	; 210
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	0c 94 30 03 	jmp	0x660	; 0x660 <__tablejump2__>
		HEAD  |= (1 << (0 + offset));
		CHEST |= (1 << (0 + offset));
		LEGS  |= (1 << (0 + offset));
		break;
		case '8':
		HEAD  |= (1 << (0 + offset));
 13e:	fa 01       	movw	r30, r20
 140:	10 81       	ld	r17, Z
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9c 01       	movw	r18, r24
 148:	06 2e       	mov	r0, r22
 14a:	01 c0       	rjmp	.+2      	; 0x14e <writeChar+0x8e>
 14c:	22 0f       	add	r18, r18
 14e:	0a 94       	dec	r0
 150:	ea f7       	brpl	.-6      	; 0x14c <writeChar+0x8c>
 152:	31 2f       	mov	r19, r17
 154:	32 2b       	or	r19, r18
 156:	30 83       	st	Z, r19
		CHEST |= (1 << (0 + offset)) | (1 << (2 + offset));
 158:	f7 01       	movw	r30, r14
 15a:	30 81       	ld	r19, Z
 15c:	ab 01       	movw	r20, r22
 15e:	4e 5f       	subi	r20, 0xFE	; 254
 160:	5f 4f       	sbci	r21, 0xFF	; 255
 162:	8c 01       	movw	r16, r24
 164:	02 c0       	rjmp	.+4      	; 0x16a <writeChar+0xaa>
 166:	00 0f       	add	r16, r16
 168:	11 1f       	adc	r17, r17
 16a:	4a 95       	dec	r20
 16c:	e2 f7       	brpl	.-8      	; 0x166 <writeChar+0xa6>
 16e:	a8 01       	movw	r20, r16
 170:	30 2b       	or	r19, r16
 172:	32 2b       	or	r19, r18
 174:	30 83       	st	Z, r19
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 176:	38 81       	ld	r19, Y
 178:	fb 01       	movw	r30, r22
 17a:	31 96       	adiw	r30, 0x01	; 1
 17c:	8c 01       	movw	r16, r24
 17e:	02 c0       	rjmp	.+4      	; 0x184 <writeChar+0xc4>
 180:	00 0f       	add	r16, r16
 182:	11 1f       	adc	r17, r17
 184:	ea 95       	dec	r30
 186:	e2 f7       	brpl	.-8      	; 0x180 <writeChar+0xc0>
 188:	43 2b       	or	r20, r19
 18a:	42 2b       	or	r20, r18
 18c:	40 2b       	or	r20, r16
		FEET  |= (1 << (0 + offset));
		break;
		case '3':
		HEAD  |= (1 << (0 + offset));
		CHEST |= (1 << (0 + offset));
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 18e:	6d 5f       	subi	r22, 0xFD	; 253
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	01 c0       	rjmp	.+2      	; 0x196 <writeChar+0xd6>
 194:	88 0f       	add	r24, r24
 196:	6a 95       	dec	r22
 198:	ea f7       	brpl	.-6      	; 0x194 <writeChar+0xd4>
 19a:	84 2b       	or	r24, r20
 19c:	88 83       	st	Y, r24
		FEET  |= (1 << (0 + offset));
 19e:	8c 91       	ld	r24, X
 1a0:	28 2b       	or	r18, r24
 1a2:	2c 93       	st	X, r18
		break;
		
		default:
		break;
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	08 95       	ret



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
 1b2:	61 50       	subi	r22, 0x01	; 1
 1b4:	71 09       	sbc	r23, r1
 1b6:	6e 6f       	ori	r22, 0xFE	; 254
 1b8:	7f 6f       	ori	r23, 0xFF	; 255
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	90 cf       	rjmp	.-224    	; 0xe0 <writeChar+0x20>




static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
 1c0:	11 96       	adiw	r26, 0x01	; 1
 1c2:	88 cf       	rjmp	.-240    	; 0xd4 <writeChar+0x14>
		CHEST |= (1 << (0 + offset)) | (1 << (2 + offset));
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
		FEET  |= (1 << (0 + offset));
		break;
		case '9':
		HEAD  |= (1 << (0 + offset));
 1c4:	da 01       	movw	r26, r20
 1c6:	ec 91       	ld	r30, X
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	9c 01       	movw	r18, r24
 1ce:	06 2e       	mov	r0, r22
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <writeChar+0x114>
 1d2:	22 0f       	add	r18, r18
 1d4:	0a 94       	dec	r0
 1d6:	ea f7       	brpl	.-6      	; 0x1d2 <writeChar+0x112>
 1d8:	3e 2f       	mov	r19, r30
 1da:	32 2b       	or	r19, r18
 1dc:	3c 93       	st	X, r19
		CHEST |= (1 << (0 + offset)) | (1 << (2 + offset));
 1de:	f7 01       	movw	r30, r14
 1e0:	30 81       	ld	r19, Z
 1e2:	ab 01       	movw	r20, r22
 1e4:	4e 5f       	subi	r20, 0xFE	; 254
 1e6:	5f 4f       	sbci	r21, 0xFF	; 255
 1e8:	8c 01       	movw	r16, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <writeChar+0x130>
 1ec:	00 0f       	add	r16, r16
 1ee:	11 1f       	adc	r17, r17
 1f0:	4a 95       	dec	r20
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <writeChar+0x12c>
 1f4:	a8 01       	movw	r20, r16
 1f6:	43 2b       	or	r20, r19
 1f8:	42 2b       	or	r20, r18
 1fa:	40 83       	st	Z, r20
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 1fc:	38 81       	ld	r19, Y
 1fe:	ab 01       	movw	r20, r22
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	dc 01       	movw	r26, r24
 206:	02 c0       	rjmp	.+4      	; 0x20c <writeChar+0x14c>
 208:	aa 0f       	add	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	4a 95       	dec	r20
 20e:	e2 f7       	brpl	.-8      	; 0x208 <writeChar+0x148>
 210:	ad 01       	movw	r20, r26
 212:	43 2b       	or	r20, r19
 214:	24 2b       	or	r18, r20
 216:	6d 5f       	subi	r22, 0xFD	; 253
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	01 c0       	rjmp	.+2      	; 0x21e <writeChar+0x15e>
 21c:	88 0f       	add	r24, r24
 21e:	6a 95       	dec	r22
 220:	ea f7       	brpl	.-6      	; 0x21c <writeChar+0x15c>
 222:	82 2b       	or	r24, r18
 224:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
 226:	be cf       	rjmp	.-132    	; 0x1a4 <writeChar+0xe4>
	FEET  &= (0x0F0 >> offset);
	
	
	switch (c){
		case '0':
		HEAD  |= (1 << (0 + offset));
 228:	fa 01       	movw	r30, r20
 22a:	10 81       	ld	r17, Z
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9c 01       	movw	r18, r24
 232:	06 2e       	mov	r0, r22
 234:	01 c0       	rjmp	.+2      	; 0x238 <writeChar+0x178>
 236:	22 0f       	add	r18, r18
 238:	0a 94       	dec	r0
 23a:	ea f7       	brpl	.-6      	; 0x236 <writeChar+0x176>
 23c:	31 2f       	mov	r19, r17
 23e:	32 2b       	or	r19, r18
 240:	30 83       	st	Z, r19
		CHEST |= (1 << (0 + offset)) | (1 << (2 + offset));
 242:	f7 01       	movw	r30, r14
 244:	30 81       	ld	r19, Z
 246:	6e 5f       	subi	r22, 0xFE	; 254
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	01 c0       	rjmp	.+2      	; 0x24e <writeChar+0x18e>
 24c:	88 0f       	add	r24, r24
 24e:	6a 95       	dec	r22
 250:	ea f7       	brpl	.-6      	; 0x24c <writeChar+0x18c>
 252:	82 2b       	or	r24, r18
 254:	93 2f       	mov	r25, r19
 256:	98 2b       	or	r25, r24
 258:	90 83       	st	Z, r25
		LEGS  |= (1 << (0 + offset)) | (1 << (2 + offset));
 25a:	98 81       	ld	r25, Y
 25c:	89 2b       	or	r24, r25
 25e:	88 83       	st	Y, r24
		FEET  |= (1 << (0 + offset));
 260:	8c 91       	ld	r24, X
 262:	28 2b       	or	r18, r24
 264:	2c 93       	st	X, r18
		break;
 266:	9e cf       	rjmp	.-196    	; 0x1a4 <writeChar+0xe4>
		case '1':
		CHEST |= (1 << (0 + offset));
 268:	d7 01       	movw	r26, r14
 26a:	2c 91       	ld	r18, X
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 c0       	rjmp	.+2      	; 0x274 <writeChar+0x1b4>
 272:	88 0f       	add	r24, r24
 274:	6a 95       	dec	r22
 276:	ea f7       	brpl	.-6      	; 0x272 <writeChar+0x1b2>
 278:	92 2f       	mov	r25, r18
 27a:	98 2b       	or	r25, r24
 27c:	9c 93       	st	X, r25
		LEGS  |= (1 << (0 + offset));
 27e:	98 81       	ld	r25, Y
 280:	89 2b       	or	r24, r25
 282:	88 83       	st	Y, r24
		break;
 284:	8f cf       	rjmp	.-226    	; 0x1a4 <writeChar+0xe4>
		case '2':
		HEAD  |= (1 << (0 + offset));
 286:	fa 01       	movw	r30, r20
 288:	10 81       	ld	r17, Z
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	9c 01       	movw	r18, r24
 290:	06 2e       	mov	r0, r22
 292:	01 c0       	rjmp	.+2      	; 0x296 <writeChar+0x1d6>
 294:	22 0f       	add	r18, r18
 296:	0a 94       	dec	r0
 298:	ea f7       	brpl	.-6      	; 0x294 <writeChar+0x1d4>
 29a:	31 2f       	mov	r19, r17
 29c:	32 2b       	or	r19, r18
 29e:	30 83       	st	Z, r19
		CHEST |= (1 << (0 + offset));
 2a0:	f7 01       	movw	r30, r14
 2a2:	30 81       	ld	r19, Z
 2a4:	32 2b       	or	r19, r18
 2a6:	30 83       	st	Z, r19
		LEGS  |= (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 2a8:	38 81       	ld	r19, Y
 2aa:	ab 01       	movw	r20, r22
 2ac:	4f 5f       	subi	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	8c 01       	movw	r16, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <writeChar+0x1f8>
 2b4:	00 0f       	add	r16, r16
 2b6:	11 1f       	adc	r17, r17
 2b8:	4a 95       	dec	r20
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <writeChar+0x1f4>
 2bc:	30 2b       	or	r19, r16
 2be:	ab 01       	movw	r20, r22
 2c0:	4e 5f       	subi	r20, 0xFE	; 254
 2c2:	5f 4f       	sbci	r21, 0xFF	; 255
 2c4:	fc 01       	movw	r30, r24
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <writeChar+0x20c>
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	4a 95       	dec	r20
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <writeChar+0x208>
 2d0:	af 01       	movw	r20, r30
 2d2:	43 2b       	or	r20, r19
 2d4:	5c cf       	rjmp	.-328    	; 0x18e <writeChar+0xce>
		FEET  |= (1 << (0 + offset));
		break;
		case '3':
		HEAD  |= (1 << (0 + offset));
 2d6:	fa 01       	movw	r30, r20
 2d8:	10 81       	ld	r17, Z
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	9c 01       	movw	r18, r24
 2e0:	06 2e       	mov	r0, r22
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <writeChar+0x226>
 2e4:	22 0f       	add	r18, r18
 2e6:	0a 94       	dec	r0
 2e8:	ea f7       	brpl	.-6      	; 0x2e4 <writeChar+0x224>
 2ea:	31 2f       	mov	r19, r17
 2ec:	32 2b       	or	r19, r18
 2ee:	30 83       	st	Z, r19
		CHEST |= (1 << (0 + offset));
 2f0:	f7 01       	movw	r30, r14
 2f2:	30 81       	ld	r19, Z
 2f4:	32 2b       	or	r19, r18
 2f6:	30 83       	st	Z, r19
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 2f8:	38 81       	ld	r19, Y
 2fa:	ab 01       	movw	r20, r22
 2fc:	4f 5f       	subi	r20, 0xFF	; 255
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
 300:	8c 01       	movw	r16, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <writeChar+0x248>
 304:	00 0f       	add	r16, r16
 306:	11 1f       	adc	r17, r17
 308:	4a 95       	dec	r20
 30a:	e2 f7       	brpl	.-8      	; 0x304 <writeChar+0x244>
 30c:	a8 01       	movw	r20, r16
 30e:	43 2b       	or	r20, r19
 310:	42 2b       	or	r20, r18
 312:	3d cf       	rjmp	.-390    	; 0x18e <writeChar+0xce>
		FEET  |= (1 << (0 + offset));
		break;
		case '4':
		CHEST |= (1 << (0 + offset)) | (1 << (2 + offset));
 314:	d7 01       	movw	r26, r14
 316:	ec 91       	ld	r30, X
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ac 01       	movw	r20, r24
 31e:	06 2e       	mov	r0, r22
 320:	01 c0       	rjmp	.+2      	; 0x324 <writeChar+0x264>
 322:	44 0f       	add	r20, r20
 324:	0a 94       	dec	r0
 326:	ea f7       	brpl	.-6      	; 0x322 <writeChar+0x262>
 328:	9b 01       	movw	r18, r22
 32a:	2e 5f       	subi	r18, 0xFE	; 254
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	8c 01       	movw	r16, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <writeChar+0x276>
 332:	00 0f       	add	r16, r16
 334:	11 1f       	adc	r17, r17
 336:	2a 95       	dec	r18
 338:	e2 f7       	brpl	.-8      	; 0x332 <writeChar+0x272>
 33a:	98 01       	movw	r18, r16
 33c:	2e 2b       	or	r18, r30
 33e:	24 2b       	or	r18, r20
 340:	2c 93       	st	X, r18
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 342:	58 81       	ld	r21, Y
 344:	9b 01       	movw	r18, r22
 346:	2f 5f       	subi	r18, 0xFF	; 255
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	dc 01       	movw	r26, r24
 34c:	02 c0       	rjmp	.+4      	; 0x352 <writeChar+0x292>
 34e:	aa 0f       	add	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	2a 95       	dec	r18
 354:	e2 f7       	brpl	.-8      	; 0x34e <writeChar+0x28e>
 356:	9d 01       	movw	r18, r26
 358:	25 2b       	or	r18, r21
 35a:	42 2b       	or	r20, r18
 35c:	6d 5f       	subi	r22, 0xFD	; 253
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	01 c0       	rjmp	.+2      	; 0x364 <writeChar+0x2a4>
 362:	88 0f       	add	r24, r24
 364:	6a 95       	dec	r22
 366:	ea f7       	brpl	.-6      	; 0x362 <writeChar+0x2a2>
 368:	84 2b       	or	r24, r20
 36a:	88 83       	st	Y, r24
		break;
 36c:	1b cf       	rjmp	.-458    	; 0x1a4 <writeChar+0xe4>
		case '5':
		HEAD  |= (1 << (0 + offset));
 36e:	fa 01       	movw	r30, r20
 370:	10 81       	ld	r17, Z
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	9c 01       	movw	r18, r24
 378:	06 2e       	mov	r0, r22
 37a:	01 c0       	rjmp	.+2      	; 0x37e <writeChar+0x2be>
 37c:	22 0f       	add	r18, r18
 37e:	0a 94       	dec	r0
 380:	ea f7       	brpl	.-6      	; 0x37c <writeChar+0x2bc>
 382:	31 2f       	mov	r19, r17
 384:	32 2b       	or	r19, r18
 386:	30 83       	st	Z, r19
		CHEST |= (1 << (2 + offset));
 388:	f7 01       	movw	r30, r14
 38a:	30 81       	ld	r19, Z
 38c:	ab 01       	movw	r20, r22
 38e:	4e 5f       	subi	r20, 0xFE	; 254
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	8c 01       	movw	r16, r24
 394:	02 c0       	rjmp	.+4      	; 0x39a <writeChar+0x2da>
 396:	00 0f       	add	r16, r16
 398:	11 1f       	adc	r17, r17
 39a:	4a 95       	dec	r20
 39c:	e2 f7       	brpl	.-8      	; 0x396 <writeChar+0x2d6>
 39e:	a8 01       	movw	r20, r16
 3a0:	43 2b       	or	r20, r19
 3a2:	40 83       	st	Z, r20
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 3a4:	38 81       	ld	r19, Y
 3a6:	ab 01       	movw	r20, r22
 3a8:	4f 5f       	subi	r20, 0xFF	; 255
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255
 3ac:	fc 01       	movw	r30, r24
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <writeChar+0x2f4>
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	4a 95       	dec	r20
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <writeChar+0x2f0>
 3b8:	af 01       	movw	r20, r30
 3ba:	a9 cf       	rjmp	.-174    	; 0x30e <writeChar+0x24e>
		FEET  |= (1 << (0 + offset));
		break;
		case '6':
		HEAD  |= (1 << (0 + offset));
 3bc:	fa 01       	movw	r30, r20
 3be:	20 81       	ld	r18, Z
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	8c 01       	movw	r16, r24
 3c6:	06 2e       	mov	r0, r22
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <writeChar+0x30c>
 3ca:	00 0f       	add	r16, r16
 3cc:	0a 94       	dec	r0
 3ce:	ea f7       	brpl	.-6      	; 0x3ca <writeChar+0x30a>
 3d0:	20 2b       	or	r18, r16
 3d2:	20 83       	st	Z, r18
		CHEST |= (1 << (2 + offset));
 3d4:	f7 01       	movw	r30, r14
 3d6:	40 81       	ld	r20, Z
 3d8:	9b 01       	movw	r18, r22
 3da:	2e 5f       	subi	r18, 0xFE	; 254
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
 3de:	fc 01       	movw	r30, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <writeChar+0x326>
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	2a 95       	dec	r18
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <writeChar+0x322>
 3ea:	9f 01       	movw	r18, r30
 3ec:	34 2f       	mov	r19, r20
 3ee:	32 2b       	or	r19, r18
 3f0:	f7 01       	movw	r30, r14
 3f2:	30 83       	st	Z, r19
		LEGS  |= (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 3f4:	38 81       	ld	r19, Y
 3f6:	ab 01       	movw	r20, r22
 3f8:	4f 5f       	subi	r20, 0xFF	; 255
 3fa:	5f 4f       	sbci	r21, 0xFF	; 255
 3fc:	fc 01       	movw	r30, r24
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	4a 95       	dec	r20
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	23 2b       	or	r18, r19
 40a:	20 2b       	or	r18, r16
 40c:	2e 2b       	or	r18, r30
 40e:	6d 5f       	subi	r22, 0xFD	; 253
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	88 0f       	add	r24, r24
 416:	6a 95       	dec	r22
 418:	ea f7       	brpl	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41a:	82 2b       	or	r24, r18
 41c:	88 83       	st	Y, r24
		FEET  |= (1 << (0 + offset));
 41e:	8c 91       	ld	r24, X
 420:	e0 2f       	mov	r30, r16
 422:	e8 2b       	or	r30, r24
 424:	ec 93       	st	X, r30
		break;
 426:	be ce       	rjmp	.-644    	; 0x1a4 <writeChar+0xe4>
		case '7':
		HEAD  |= (1 << (0 + offset));
 428:	da 01       	movw	r26, r20
 42a:	2c 91       	ld	r18, X
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	01 c0       	rjmp	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	88 0f       	add	r24, r24
 434:	6a 95       	dec	r22
 436:	ea f7       	brpl	.-6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 438:	92 2f       	mov	r25, r18
 43a:	98 2b       	or	r25, r24
 43c:	9c 93       	st	X, r25
		CHEST |= (1 << (0 + offset));
 43e:	f7 01       	movw	r30, r14
 440:	90 81       	ld	r25, Z
 442:	98 2b       	or	r25, r24
 444:	90 83       	st	Z, r25
		LEGS  |= (1 << (0 + offset));
 446:	98 81       	ld	r25, Y
 448:	89 2b       	or	r24, r25
 44a:	88 83       	st	Y, r24
		break;
 44c:	ab ce       	rjmp	.-682    	; 0x1a4 <writeChar+0xe4>

0000044e <run>:





void run(long startValue){
 44e:	2b 01       	movw	r4, r22
 450:	3c 01       	movw	r6, r24


static void init(void){
	
	/* LCD */
	CLKPR = 0x80;
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	CLKPR = 0x00;
 458:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 45c:	80 ec       	ldi	r24, 0xC0	; 192
 45e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 462:	87 e3       	ldi	r24, 0x37	; 55
 464:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 468:	87 e0       	ldi	r24, 0x07	; 7
 46a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 46e:	8f e0       	ldi	r24, 0x0F	; 15
 470:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	/*Blink*/
	TCCR1B = (1 << CS12);
 474:	94 e0       	ldi	r25, 0x04	; 4
 476:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	/*Button*/
	PORTB |= (1<<PB7);
 47a:	2f 9a       	sbi	0x05, 7	; 5
	DDRB = (1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
 47c:	84 b9       	out	0x04, r24	; 4
	asm("nop");
 47e:	00 00       	nop
 480:	05 c0       	rjmp	.+10     	; 0x48c <run+0x3e>

static long primes(long startValue){
	long i = startValue;
	
	while(!is_prime(i)){
		++i;
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	48 1a       	sub	r4, r24
 486:	58 0a       	sbc	r5, r24
 488:	68 0a       	sbc	r6, r24
 48a:	78 0a       	sbc	r7, r24

}

static bool is_prime(long i){
	
	if(i < 2){
 48c:	42 e0       	ldi	r20, 0x02	; 2
 48e:	44 16       	cp	r4, r20
 490:	51 04       	cpc	r5, r1
 492:	61 04       	cpc	r6, r1
 494:	71 04       	cpc	r7, r1
 496:	ac f3       	brlt	.-22     	; 0x482 <run+0x34>
		return false;
	}

	for (int n = 2; n < i; n++){
 498:	52 e0       	ldi	r21, 0x02	; 2
 49a:	45 16       	cp	r4, r21
 49c:	51 04       	cpc	r5, r1
 49e:	61 04       	cpc	r6, r1
 4a0:	71 04       	cpc	r7, r1
 4a2:	e1 f0       	breq	.+56     	; 0x4dc <run+0x8e>
		if ( i % n == 0){
 4a4:	40 fe       	sbrs	r4, 0
 4a6:	ed cf       	rjmp	.-38     	; 0x482 <run+0x34>
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	c8 2e       	mov	r12, r24
 4ac:	d1 2c       	mov	r13, r1
 4ae:	e1 2c       	mov	r14, r1
 4b0:	f1 2c       	mov	r15, r1
 4b2:	0d c0       	rjmp	.+26     	; 0x4ce <run+0x80>
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	c8 1a       	sub	r12, r24
 4b8:	d8 0a       	sbc	r13, r24
 4ba:	e8 0a       	sbc	r14, r24
 4bc:	f8 0a       	sbc	r15, r24
 4be:	c3 01       	movw	r24, r6
 4c0:	b2 01       	movw	r22, r4
 4c2:	0e 94 11 03 	call	0x622	; 0x622 <__divmodsi4>
 4c6:	67 2b       	or	r22, r23
 4c8:	68 2b       	or	r22, r24
 4ca:	69 2b       	or	r22, r25
 4cc:	d1 f2       	breq	.-76     	; 0x482 <run+0x34>
	
	if(i < 2){
		return false;
	}

	for (int n = 2; n < i; n++){
 4ce:	96 01       	movw	r18, r12
 4d0:	a7 01       	movw	r20, r14
 4d2:	c4 14       	cp	r12, r4
 4d4:	d5 04       	cpc	r13, r5
 4d6:	e6 04       	cpc	r14, r6
 4d8:	f7 04       	cpc	r15, r7
 4da:	61 f7       	brne	.-40     	; 0x4b4 <run+0x66>
		if ( i % n == 0){
 4dc:	73 01       	movw	r14, r6
 4de:	62 01       	movw	r12, r4
 4e0:	c4 e0       	ldi	r28, 0x04	; 4
 4e2:	d0 e0       	ldi	r29, 0x00	; 0
 4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <run+0xaa>

	while(pos >= 0){
		rest = div % 10;
		
		if(div == 0){
			writeChar(' ', pos--);
 4e6:	8e 01       	movw	r16, r28
 4e8:	b5 01       	movw	r22, r10
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	0e 94 60 00 	call	0xc0	; 0xc0 <writeChar>
 4f0:	21 97       	sbiw	r28, 0x01	; 1
	
	if (i == 0){
		writeChar('0', pos--);
	}

	while(pos >= 0){
 4f2:	0f 3f       	cpi	r16, 0xFF	; 255
 4f4:	1f 4f       	sbci	r17, 0xFF	; 255
 4f6:	19 f1       	breq	.+70     	; 0x53e <__stack+0x3f>
 4f8:	5e 01       	movw	r10, r28
 4fa:	9f ef       	ldi	r25, 0xFF	; 255
 4fc:	a9 1a       	sub	r10, r25
 4fe:	b9 0a       	sbc	r11, r25
		rest = div % 10;
		
		if(div == 0){
 500:	c1 14       	cp	r12, r1
 502:	d1 04       	cpc	r13, r1
 504:	e1 04       	cpc	r14, r1
 506:	f1 04       	cpc	r15, r1
 508:	71 f3       	breq	.-36     	; 0x4e6 <run+0x98>
			writeChar(' ', pos--);
		}
		else{
			div /= 10;
 50a:	c7 01       	movw	r24, r14
 50c:	b6 01       	movw	r22, r12
 50e:	2a e0       	ldi	r18, 0x0A	; 10
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	0e 94 11 03 	call	0x622	; 0x622 <__divmodsi4>
 51a:	92 2e       	mov	r9, r18
 51c:	83 2e       	mov	r8, r19
 51e:	34 2e       	mov	r3, r20
 520:	25 2e       	mov	r2, r21
 522:	86 2f       	mov	r24, r22
			writeChar(48+rest, pos--);
 524:	8e 01       	movw	r16, r28
 526:	b5 01       	movw	r22, r10
 528:	80 5d       	subi	r24, 0xD0	; 208
 52a:	0e 94 60 00 	call	0xc0	; 0xc0 <writeChar>
		
		if(div == 0){
			writeChar(' ', pos--);
		}
		else{
			div /= 10;
 52e:	c9 2c       	mov	r12, r9
 530:	d8 2c       	mov	r13, r8
 532:	e3 2c       	mov	r14, r3
 534:	f2 2c       	mov	r15, r2
 536:	21 97       	sbiw	r28, 0x01	; 1
	
	if (i == 0){
		writeChar('0', pos--);
	}

	while(pos >= 0){
 538:	0f 3f       	cpi	r16, 0xFF	; 255
 53a:	1f 4f       	sbci	r17, 0xFF	; 255
 53c:	e9 f6       	brne	.-70     	; 0x4f8 <run+0xaa>
	
	long nextStartValue = startValue;
	
	while(1){

		nextStartValue = primes(nextStartValue) + 1;
 53e:	5f ef       	ldi	r21, 0xFF	; 255
 540:	45 1a       	sub	r4, r21
 542:	55 0a       	sbc	r5, r21
 544:	65 0a       	sbc	r6, r21
 546:	75 0a       	sbc	r7, r21
	}
}

static void button(void){
	
	LCDDR1 |= (1 << (currentVar+1));
 548:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 54c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 550:	9f 5f       	subi	r25, 0xFF	; 255
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <__stack+0x5d>
 558:	44 0f       	add	r20, r20
 55a:	55 1f       	adc	r21, r21
 55c:	9a 95       	dec	r25
 55e:	e2 f7       	brpl	.-8      	; 0x558 <__stack+0x59>
 560:	ca 01       	movw	r24, r20
 562:	82 2b       	or	r24, r18
 564:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	
	if(PINB){
 568:	83 b1       	in	r24, 0x03	; 3
 56a:	81 11       	cpse	r24, r1
 56c:	56 c0       	rjmp	.+172    	; 0x61a <__stack+0x11b>
		risingEdge = true;
	}
	else{
		if(risingEdge){
 56e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <risingEdge>
 572:	88 23       	and	r24, r24
 574:	b1 f0       	breq	.+44     	; 0x5a2 <__stack+0xa3>
			risingEdge = false;
 576:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <risingEdge>
			currentVar = !currentVar;
 57a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	89 27       	eor	r24, r25
 582:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			LCDDR1 |= (1 <<( currentVar+1));
 586:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x97>
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <__stack+0x93>
 59a:	ca 01       	movw	r24, r20
 59c:	82 2b       	or	r24, r18
 59e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
}


static void blink(void){
	
	LCDDR0 |= state << 2;
 5a2:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 5a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5aa:	88 0f       	add	r24, r24
 5ac:	88 0f       	add	r24, r24
 5ae:	89 2b       	or	r24, r25
 5b0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 5b4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <nextVal>
 5b8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <nextVal+0x1>
	
	while(1){
		
	if (TCNT1 == nextVal)			// if (TCNT1 >= nextVal)
 5bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 5c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 5c4:	82 17       	cp	r24, r18
 5c6:	93 07       	cpc	r25, r19
 5c8:	c9 f7       	brne	.-14     	; 0x5bc <__stack+0xbd>
	{
		nextVal = (++i % 4)*(0xFFFF/4);
 5ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
 5ce:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i+0x1>
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i+0x1>
 5d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
 5dc:	83 70       	andi	r24, 0x03	; 3
 5de:	99 27       	eor	r25, r25
 5e0:	4f ef       	ldi	r20, 0xFF	; 255
 5e2:	5f e3       	ldi	r21, 0x3F	; 63
 5e4:	84 9f       	mul	r24, r20
 5e6:	90 01       	movw	r18, r0
 5e8:	85 9f       	mul	r24, r21
 5ea:	30 0d       	add	r19, r0
 5ec:	94 9f       	mul	r25, r20
 5ee:	30 0d       	add	r19, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <nextVal+0x1>
 5f6:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <nextVal>
		
		LCDDR0 |= state << 2;
 5fa:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 5fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 602:	88 0f       	add	r24, r24
 604:	88 0f       	add	r24, r24
 606:	89 2b       	or	r24, r25
 608:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		state = !state;
 60c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 610:	51 e0       	ldi	r21, 0x01	; 1
 612:	85 27       	eor	r24, r21
 614:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 618:	39 cf       	rjmp	.-398    	; 0x48c <run+0x3e>
static void button(void){
	
	LCDDR1 |= (1 << (currentVar+1));
	
	if(PINB){
		risingEdge = true;
 61a:	51 e0       	ldi	r21, 0x01	; 1
 61c:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <risingEdge>
 620:	c0 cf       	rjmp	.-128    	; 0x5a2 <__stack+0xa3>

00000622 <__divmodsi4>:
 622:	05 2e       	mov	r0, r21
 624:	97 fb       	bst	r25, 7
 626:	1e f4       	brtc	.+6      	; 0x62e <__divmodsi4+0xc>
 628:	00 94       	com	r0
 62a:	0e 94 28 03 	call	0x650	; 0x650 <__negsi2>
 62e:	57 fd       	sbrc	r21, 7
 630:	07 d0       	rcall	.+14     	; 0x640 <__divmodsi4_neg2>
 632:	0e 94 36 03 	call	0x66c	; 0x66c <__udivmodsi4>
 636:	07 fc       	sbrc	r0, 7
 638:	03 d0       	rcall	.+6      	; 0x640 <__divmodsi4_neg2>
 63a:	4e f4       	brtc	.+18     	; 0x64e <__divmodsi4_exit>
 63c:	0c 94 28 03 	jmp	0x650	; 0x650 <__negsi2>

00000640 <__divmodsi4_neg2>:
 640:	50 95       	com	r21
 642:	40 95       	com	r20
 644:	30 95       	com	r19
 646:	21 95       	neg	r18
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	4f 4f       	sbci	r20, 0xFF	; 255
 64c:	5f 4f       	sbci	r21, 0xFF	; 255

0000064e <__divmodsi4_exit>:
 64e:	08 95       	ret

00000650 <__negsi2>:
 650:	90 95       	com	r25
 652:	80 95       	com	r24
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__tablejump2__>:
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	05 90       	lpm	r0, Z+
 666:	f4 91       	lpm	r31, Z
 668:	e0 2d       	mov	r30, r0
 66a:	09 94       	ijmp

0000066c <__udivmodsi4>:
 66c:	a1 e2       	ldi	r26, 0x21	; 33
 66e:	1a 2e       	mov	r1, r26
 670:	aa 1b       	sub	r26, r26
 672:	bb 1b       	sub	r27, r27
 674:	fd 01       	movw	r30, r26
 676:	0d c0       	rjmp	.+26     	; 0x692 <__udivmodsi4_ep>

00000678 <__udivmodsi4_loop>:
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	ee 1f       	adc	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	a2 17       	cp	r26, r18
 682:	b3 07       	cpc	r27, r19
 684:	e4 07       	cpc	r30, r20
 686:	f5 07       	cpc	r31, r21
 688:	20 f0       	brcs	.+8      	; 0x692 <__udivmodsi4_ep>
 68a:	a2 1b       	sub	r26, r18
 68c:	b3 0b       	sbc	r27, r19
 68e:	e4 0b       	sbc	r30, r20
 690:	f5 0b       	sbc	r31, r21

00000692 <__udivmodsi4_ep>:
 692:	66 1f       	adc	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	1a 94       	dec	r1
 69c:	69 f7       	brne	.-38     	; 0x678 <__udivmodsi4_loop>
 69e:	60 95       	com	r22
 6a0:	70 95       	com	r23
 6a2:	80 95       	com	r24
 6a4:	90 95       	com	r25
 6a6:	9b 01       	movw	r18, r22
 6a8:	ac 01       	movw	r20, r24
 6aa:	bd 01       	movw	r22, r26
 6ac:	cf 01       	movw	r24, r30
 6ae:	08 95       	ret

000006b0 <_exit>:
 6b0:	f8 94       	cli

000006b2 <__stop_program>:
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__stop_program>
