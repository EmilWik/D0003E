
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b69  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000967  00000000  00000000  00000db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058f  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072b  00000000  00000000  00002245  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  6c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <main>:
#include "Part1.h"
#include "Part2.h"

int main(void)
{
	CLKPR = 0x80;
  74:	e1 e6       	ldi	r30, 0x61	; 97
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e8       	ldi	r24, 0x80	; 128
  7a:	80 83       	st	Z, r24
	CLKPR = 0x00;
  7c:	10 82       	st	Z, r1
	
	initLCD();
  7e:	0e 94 46 00 	call	0x8c	; 0x8c <initLCD>

	blink();
  82:	0e 94 53 00 	call	0xa6	; 0xa6 <blink>
	writeChar('9', 5);

	
	writeLong(123456789);
	*/
}
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <initLCD>:
#include <stdbool.h>
#include <limits.h>

void initLCD(void){
	
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  8c:	80 ec       	ldi	r24, 0xC0	; 192
  8e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	// Vi hade missat LCDPM0-2
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  92:	87 e3       	ldi	r24, 0x37	; 55
  94:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
  a4:	08 95       	ret

000000a6 <blink>:
#include <avr/io.h>

void blink(void){

	TCCR1B = (1 << CS12);
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	// 1 Hz, probs inte korrekt gjort tho  
	unsigned long l = 0xFFFF/4;
	while(1){
	if ((TCNT1 >= l && TCNT1 < 2*l) || (TCNT1 >= 3*l && TCNT1 < 4*l))
	{
			LCDDR0 = (1 << 2);
  ac:	24 e0       	ldi	r18, 0x04	; 4
	//bool i = false;

	// 1 Hz, probs inte korrekt gjort tho  
	unsigned long l = 0xFFFF/4;
	while(1){
	if ((TCNT1 >= l && TCNT1 < 2*l) || (TCNT1 >= 3*l && TCNT1 < 4*l))
  ae:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  b2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	9f 43       	sbci	r25, 0x3F	; 63
  ba:	80 f0       	brcs	.+32     	; 0xdc <blink+0x36>
  bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  c4:	8e 3f       	cpi	r24, 0xFE	; 254
  c6:	9f 47       	sbci	r25, 0x7F	; 127
  c8:	48 f4       	brcc	.+18     	; 0xdc <blink+0x36>
	{
			LCDDR0 = (1 << 2);
  ca:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	//bool i = false;

	// 1 Hz, probs inte korrekt gjort tho  
	unsigned long l = 0xFFFF/4;
	while(1){
	if ((TCNT1 >= l && TCNT1 < 2*l) || (TCNT1 >= 3*l && TCNT1 < 4*l))
  ce:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  d2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  d6:	8f 3f       	cpi	r24, 0xFF	; 255
  d8:	9f 43       	sbci	r25, 0x3F	; 63
  da:	80 f7       	brcc	.-32     	; 0xbc <blink+0x16>
  dc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  e0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  e4:	8d 3f       	cpi	r24, 0xFD	; 253
  e6:	9f 4b       	sbci	r25, 0xBF	; 191
  e8:	38 f0       	brcs	.+14     	; 0xf8 <blink+0x52>
  ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  f2:	8c 3f       	cpi	r24, 0xFC	; 252
  f4:	9f 4f       	sbci	r25, 0xFF	; 255
  f6:	48 f3       	brcs	.-46     	; 0xca <blink+0x24>
	{
			LCDDR0 = (1 << 2);
	}else{
			LCDDR0 = 0;
  f8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  fc:	d8 cf       	rjmp	.-80     	; 0xae <blink+0x8>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
