
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000958  000009ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800104  00800104  000009f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f60  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa4  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065a  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000883  00000000  00000000  00003249  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003acc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	b0 00       	.word	0x00b0	; ????
  5e:	d2 00       	.word	0x00d2	; ????
  60:	e2 00       	.word	0x00e2	; ????
  62:	17 01       	movw	r2, r14
  64:	42 01       	movw	r8, r4
  66:	6f 01       	movw	r12, r30
  68:	a4 01       	movw	r20, r8
  6a:	dc 01       	movw	r26, r24
  6c:	f0 01       	movw	r30, r0
  6e:	28 02       	muls	r18, r24

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e5       	ldi	r30, 0x58	; 88
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a9 32       	cpi	r26, 0x29	; 41
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 01 03 	call	0x602	; 0x602 <main>
  a6:	0c 94 aa 04 	jmp	0x954	; 0x954 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <initLCD>:



void initLCD(void){

	CLKPR = 0x80;
  ae:	e1 e6       	ldi	r30, 0x61	; 97
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
  b6:	10 82       	st	Z, r1

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  b8:	80 ec       	ldi	r24, 0xC0	; 192
  ba:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  be:	87 e3       	ldi	r24, 0x37	; 55
  c0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  d0:	08 95       	ret

000000d2 <writeChar>:

}


void writeChar(char c, int pos){
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
  e0:	db 01       	movw	r26, r22
  e2:	77 23       	and	r23, r23
  e4:	0c f4       	brge	.+2      	; 0xe8 <writeChar+0x16>
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	b5 95       	asr	r27
  ea:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
  ec:	61 70       	andi	r22, 0x01	; 1
  ee:	70 78       	andi	r23, 0x80	; 128
  f0:	77 23       	and	r23, r23
  f2:	34 f4       	brge	.+12     	; 0x100 <writeChar+0x2e>
  f4:	61 50       	subi	r22, 0x01	; 1
  f6:	71 09       	sbc	r23, r1
  f8:	6e 6f       	ori	r22, 0xFE	; 254
  fa:	7f 6f       	ori	r23, 0xFF	; 255
  fc:	6f 5f       	subi	r22, 0xFF	; 255
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	66 0f       	add	r22, r22
 106:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
 108:	ad 01       	movw	r20, r26
 10a:	44 51       	subi	r20, 0x14	; 20
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	ea 01       	movw	r28, r20
 110:	88 81       	ld	r24, Y
 112:	20 ef       	ldi	r18, 0xF0	; 240
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	06 2e       	mov	r0, r22
 118:	02 c0       	rjmp	.+4      	; 0x11e <writeChar+0x4c>
 11a:	35 95       	asr	r19
 11c:	27 95       	ror	r18
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <writeChar+0x48>
 122:	82 23       	and	r24, r18
 124:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
 126:	7d 01       	movw	r14, r26
 128:	d1 ef       	ldi	r29, 0xF1	; 241
 12a:	ed 0e       	add	r14, r29
 12c:	f1 1c       	adc	r15, r1
 12e:	e7 01       	movw	r28, r14
 130:	88 81       	ld	r24, Y
 132:	82 23       	and	r24, r18
 134:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
 136:	25 96       	adiw	r28, 0x05	; 5
 138:	88 81       	ld	r24, Y
 13a:	82 23       	and	r24, r18
 13c:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
 13e:	a5 50       	subi	r26, 0x05	; 5
 140:	bf 4f       	sbci	r27, 0xFF	; 255
 142:	8c 91       	ld	r24, X
 144:	28 23       	and	r18, r24
 146:	2c 93       	st	X, r18
	
	switch (c){
 148:	0e 2f       	mov	r16, r30
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	f8 01       	movw	r30, r16
 14e:	f0 97       	sbiw	r30, 0x30	; 48
 150:	ea 30       	cpi	r30, 0x0A	; 10
 152:	f1 05       	cpc	r31, r1
 154:	08 f0       	brcs	.+2      	; 0x158 <writeChar+0x86>
 156:	ae c1       	rjmp	.+860    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 158:	e2 5d       	subi	r30, 0xD2	; 210
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	0c 94 41 04 	jmp	0x882	; 0x882 <__tablejump2__>
		case '0':
		HEAD  += (1 << (0 + offset));
 160:	fa 01       	movw	r30, r20
 162:	10 81       	ld	r17, Z
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	9c 01       	movw	r18, r24
 16a:	06 2e       	mov	r0, r22
 16c:	02 c0       	rjmp	.+4      	; 0x172 <writeChar+0xa0>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <writeChar+0x9c>
 176:	31 2f       	mov	r19, r17
 178:	32 0f       	add	r19, r18
 17a:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 17c:	f7 01       	movw	r30, r14
 17e:	30 81       	ld	r19, Z
 180:	6e 5f       	subi	r22, 0xFE	; 254
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	02 c0       	rjmp	.+4      	; 0x18a <writeChar+0xb8>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <writeChar+0xb4>
 18e:	82 2b       	or	r24, r18
 190:	93 2f       	mov	r25, r19
 192:	98 0f       	add	r25, r24
 194:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset)) | (1 << (2 + offset));
 196:	98 81       	ld	r25, Y
 198:	89 0f       	add	r24, r25
 19a:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 19c:	8c 91       	ld	r24, X
 19e:	28 0f       	add	r18, r24
 1a0:	2c 93       	st	X, r18
		break;
 1a2:	88 c1       	rjmp	.+784    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '1':
		CHEST += (1 << (0 + offset));
 1a4:	d7 01       	movw	r26, r14
 1a6:	2c 91       	ld	r18, X
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <writeChar+0xe0>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <writeChar+0xdc>
 1b6:	92 2f       	mov	r25, r18
 1b8:	98 0f       	add	r25, r24
 1ba:	9c 93       	st	X, r25
		LEGS  += (1 << (0 + offset));
 1bc:	98 81       	ld	r25, Y
 1be:	89 0f       	add	r24, r25
 1c0:	88 83       	st	Y, r24
		break;
 1c2:	78 c1       	rjmp	.+752    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '2':
		HEAD  += (1 << (0 + offset));
 1c4:	fa 01       	movw	r30, r20
 1c6:	10 81       	ld	r17, Z
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	9c 01       	movw	r18, r24
 1ce:	06 2e       	mov	r0, r22
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <writeChar+0x104>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <writeChar+0x100>
 1da:	31 2f       	mov	r19, r17
 1dc:	32 0f       	add	r19, r18
 1de:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
 1e0:	f7 01       	movw	r30, r14
 1e2:	30 81       	ld	r19, Z
 1e4:	32 0f       	add	r19, r18
 1e6:	30 83       	st	Z, r19
		LEGS  += (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 1e8:	38 81       	ld	r19, Y
 1ea:	ab 01       	movw	r20, r22
 1ec:	4f 5f       	subi	r20, 0xFF	; 255
 1ee:	5f 4f       	sbci	r21, 0xFF	; 255
 1f0:	fc 01       	movw	r30, r24
 1f2:	04 2e       	mov	r0, r20
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <writeChar+0x128>
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <writeChar+0x124>
 1fe:	4f 5f       	subi	r20, 0xFF	; 255
 200:	5f 4f       	sbci	r21, 0xFF	; 255
 202:	8c 01       	movw	r16, r24
 204:	02 c0       	rjmp	.+4      	; 0x20a <writeChar+0x138>
 206:	00 0f       	add	r16, r16
 208:	11 1f       	adc	r17, r17
 20a:	4a 95       	dec	r20
 20c:	e2 f7       	brpl	.-8      	; 0x206 <writeChar+0x134>
 20e:	a8 01       	movw	r20, r16
 210:	4e 2b       	or	r20, r30
 212:	6d 5f       	subi	r22, 0xFD	; 253
 214:	7f 4f       	sbci	r23, 0xFF	; 255
 216:	02 c0       	rjmp	.+4      	; 0x21c <writeChar+0x14a>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <writeChar+0x146>
 220:	84 2b       	or	r24, r20
 222:	83 0f       	add	r24, r19
 224:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 226:	8c 91       	ld	r24, X
 228:	28 0f       	add	r18, r24
 22a:	2c 93       	st	X, r18
		break;
 22c:	43 c1       	rjmp	.+646    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '3':
		HEAD  += (1 << (0 + offset));
 22e:	fa 01       	movw	r30, r20
 230:	10 81       	ld	r17, Z
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	9c 01       	movw	r18, r24
 238:	06 2e       	mov	r0, r22
 23a:	02 c0       	rjmp	.+4      	; 0x240 <writeChar+0x16e>
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <writeChar+0x16a>
 244:	31 2f       	mov	r19, r17
 246:	32 0f       	add	r19, r18
 248:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
 24a:	f7 01       	movw	r30, r14
 24c:	30 81       	ld	r19, Z
 24e:	32 0f       	add	r19, r18
 250:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 252:	38 81       	ld	r19, Y
 254:	ab 01       	movw	r20, r22
 256:	4f 5f       	subi	r20, 0xFF	; 255
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	8c 01       	movw	r16, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <writeChar+0x190>
 25e:	00 0f       	add	r16, r16
 260:	11 1f       	adc	r17, r17
 262:	4a 95       	dec	r20
 264:	e2 f7       	brpl	.-8      	; 0x25e <writeChar+0x18c>
 266:	6d 5f       	subi	r22, 0xFD	; 253
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	02 c0       	rjmp	.+4      	; 0x270 <writeChar+0x19e>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <writeChar+0x19a>
 274:	80 2b       	or	r24, r16
 276:	82 2b       	or	r24, r18
 278:	83 0f       	add	r24, r19
 27a:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 27c:	8c 91       	ld	r24, X
 27e:	28 0f       	add	r18, r24
 280:	2c 93       	st	X, r18
		break;
 282:	18 c1       	rjmp	.+560    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '4':
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 284:	d7 01       	movw	r26, r14
 286:	4c 91       	ld	r20, X
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	06 2e       	mov	r0, r22
 290:	02 c0       	rjmp	.+4      	; 0x296 <writeChar+0x1c4>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <writeChar+0x1c0>
 29a:	fb 01       	movw	r30, r22
 29c:	32 96       	adiw	r30, 0x02	; 2
 29e:	8c 01       	movw	r16, r24
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <writeChar+0x1d4>
 2a2:	00 0f       	add	r16, r16
 2a4:	11 1f       	adc	r17, r17
 2a6:	ea 95       	dec	r30
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <writeChar+0x1d0>
 2aa:	32 2f       	mov	r19, r18
 2ac:	30 2b       	or	r19, r16
 2ae:	34 0f       	add	r19, r20
 2b0:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 2b2:	38 81       	ld	r19, Y
 2b4:	ab 01       	movw	r20, r22
 2b6:	4f 5f       	subi	r20, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	dc 01       	movw	r26, r24
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <writeChar+0x1f0>
 2be:	aa 0f       	add	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	4a 95       	dec	r20
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <writeChar+0x1ec>
 2c6:	6d 5f       	subi	r22, 0xFD	; 253
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <writeChar+0x1fe>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <writeChar+0x1fa>
 2d4:	8a 2b       	or	r24, r26
 2d6:	82 2b       	or	r24, r18
 2d8:	83 0f       	add	r24, r19
 2da:	88 83       	st	Y, r24
		break;
 2dc:	eb c0       	rjmp	.+470    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '5':
		HEAD  += (1 << (0 + offset));
 2de:	fa 01       	movw	r30, r20
 2e0:	10 81       	ld	r17, Z
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9c 01       	movw	r18, r24
 2e8:	06 2e       	mov	r0, r22
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <writeChar+0x21e>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <writeChar+0x21a>
 2f4:	31 2f       	mov	r19, r17
 2f6:	32 0f       	add	r19, r18
 2f8:	30 83       	st	Z, r19
		CHEST += (1 << (2 + offset));
 2fa:	f7 01       	movw	r30, r14
 2fc:	30 81       	ld	r19, Z
 2fe:	ab 01       	movw	r20, r22
 300:	4e 5f       	subi	r20, 0xFE	; 254
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	8c 01       	movw	r16, r24
 306:	02 c0       	rjmp	.+4      	; 0x30c <writeChar+0x23a>
 308:	00 0f       	add	r16, r16
 30a:	11 1f       	adc	r17, r17
 30c:	4a 95       	dec	r20
 30e:	e2 f7       	brpl	.-8      	; 0x308 <writeChar+0x236>
 310:	a8 01       	movw	r20, r16
 312:	43 0f       	add	r20, r19
 314:	40 83       	st	Z, r20
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 316:	38 81       	ld	r19, Y
 318:	ab 01       	movw	r20, r22
 31a:	4f 5f       	subi	r20, 0xFF	; 255
 31c:	5f 4f       	sbci	r21, 0xFF	; 255
 31e:	fc 01       	movw	r30, r24
 320:	02 c0       	rjmp	.+4      	; 0x326 <writeChar+0x254>
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	4a 95       	dec	r20
 328:	e2 f7       	brpl	.-8      	; 0x322 <writeChar+0x250>
 32a:	6d 5f       	subi	r22, 0xFD	; 253
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	02 c0       	rjmp	.+4      	; 0x334 <writeChar+0x262>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <writeChar+0x25e>
 338:	8e 2b       	or	r24, r30
 33a:	82 2b       	or	r24, r18
 33c:	83 0f       	add	r24, r19
 33e:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 340:	8c 91       	ld	r24, X
 342:	28 0f       	add	r18, r24
 344:	2c 93       	st	X, r18
		break;
 346:	b6 c0       	rjmp	.+364    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '6':
		HEAD  += (1 << (0 + offset));
 348:	fa 01       	movw	r30, r20
 34a:	20 81       	ld	r18, Z
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	8c 01       	movw	r16, r24
 352:	06 2e       	mov	r0, r22
 354:	02 c0       	rjmp	.+4      	; 0x35a <writeChar+0x288>
 356:	00 0f       	add	r16, r16
 358:	11 1f       	adc	r17, r17
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <writeChar+0x284>
 35e:	20 0f       	add	r18, r16
 360:	20 83       	st	Z, r18
		CHEST += (1 << (2 + offset));
 362:	f7 01       	movw	r30, r14
 364:	40 81       	ld	r20, Z
 366:	9b 01       	movw	r18, r22
 368:	2e 5f       	subi	r18, 0xFE	; 254
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	fc 01       	movw	r30, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <writeChar+0x2a2>
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	2a 95       	dec	r18
 376:	e2 f7       	brpl	.-8      	; 0x370 <writeChar+0x29e>
 378:	9f 01       	movw	r18, r30
 37a:	34 2f       	mov	r19, r20
 37c:	32 0f       	add	r19, r18
 37e:	f7 01       	movw	r30, r14
 380:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 382:	38 81       	ld	r19, Y
 384:	ab 01       	movw	r20, r22
 386:	4f 5f       	subi	r20, 0xFF	; 255
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	fc 01       	movw	r30, r24
 38c:	02 c0       	rjmp	.+4      	; 0x392 <writeChar+0x2c0>
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	4a 95       	dec	r20
 394:	e2 f7       	brpl	.-8      	; 0x38e <writeChar+0x2bc>
 396:	2e 2b       	or	r18, r30
 398:	20 2b       	or	r18, r16
 39a:	6d 5f       	subi	r22, 0xFD	; 253
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <writeChar+0x2d2>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <writeChar+0x2ce>
 3a8:	82 2b       	or	r24, r18
 3aa:	83 0f       	add	r24, r19
 3ac:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 3ae:	8c 91       	ld	r24, X
 3b0:	e0 2f       	mov	r30, r16
 3b2:	e8 0f       	add	r30, r24
 3b4:	ec 93       	st	X, r30
		break;
 3b6:	7e c0       	rjmp	.+252    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '7':
		HEAD  += (1 << (0 + offset));
 3b8:	da 01       	movw	r26, r20
 3ba:	2c 91       	ld	r18, X
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <writeChar+0x2f4>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <writeChar+0x2f0>
 3ca:	92 2f       	mov	r25, r18
 3cc:	98 0f       	add	r25, r24
 3ce:	9c 93       	st	X, r25
		CHEST += (1 << (0 + offset));
 3d0:	f7 01       	movw	r30, r14
 3d2:	90 81       	ld	r25, Z
 3d4:	98 0f       	add	r25, r24
 3d6:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset));
 3d8:	98 81       	ld	r25, Y
 3da:	89 0f       	add	r24, r25
 3dc:	88 83       	st	Y, r24
		break;
 3de:	6a c0       	rjmp	.+212    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '8':
		HEAD  += (1 << (0 + offset));
 3e0:	fa 01       	movw	r30, r20
 3e2:	10 81       	ld	r17, Z
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	9c 01       	movw	r18, r24
 3ea:	06 2e       	mov	r0, r22
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <writeChar+0x320>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <writeChar+0x31c>
 3f6:	31 2f       	mov	r19, r17
 3f8:	32 0f       	add	r19, r18
 3fa:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 3fc:	f7 01       	movw	r30, r14
 3fe:	30 81       	ld	r19, Z
 400:	ab 01       	movw	r20, r22
 402:	4e 5f       	subi	r20, 0xFE	; 254
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	8c 01       	movw	r16, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	00 0f       	add	r16, r16
 40c:	11 1f       	adc	r17, r17
 40e:	4a 95       	dec	r20
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	40 2f       	mov	r20, r16
 414:	42 2b       	or	r20, r18
 416:	34 0f       	add	r19, r20
 418:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
 41a:	38 81       	ld	r19, Y
 41c:	ab 01       	movw	r20, r22
 41e:	4f 5f       	subi	r20, 0xFF	; 255
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	fc 01       	movw	r30, r24
 424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	ee 0f       	add	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	4a 95       	dec	r20
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	af 01       	movw	r20, r30
 430:	40 2b       	or	r20, r16
 432:	42 2b       	or	r20, r18
 434:	6d 5f       	subi	r22, 0xFD	; 253
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	84 2b       	or	r24, r20
 444:	83 0f       	add	r24, r19
 446:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
 448:	8c 91       	ld	r24, X
 44a:	28 0f       	add	r18, r24
 44c:	2c 93       	st	X, r18
		break;
 44e:	32 c0       	rjmp	.+100    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		
		case '9':
		HEAD  += (1 << (0 + offset));
 450:	da 01       	movw	r26, r20
 452:	ec 91       	ld	r30, X
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	9c 01       	movw	r18, r24
 45a:	06 2e       	mov	r0, r22
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	3e 2f       	mov	r19, r30
 468:	32 0f       	add	r19, r18
 46a:	3c 93       	st	X, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
 46c:	f7 01       	movw	r30, r14
 46e:	40 81       	ld	r20, Z
 470:	fb 01       	movw	r30, r22
 472:	32 96       	adiw	r30, 0x02	; 2
 474:	8c 01       	movw	r16, r24
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	00 0f       	add	r16, r16
 47a:	11 1f       	adc	r17, r17
 47c:	ea 95       	dec	r30
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 480:	32 2f       	mov	r19, r18
 482:	30 2b       	or	r19, r16
 484:	34 0f       	add	r19, r20
 486:	d7 01       	movw	r26, r14
 488:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
 48a:	38 81       	ld	r19, Y
 48c:	ab 01       	movw	r20, r22
 48e:	4f 5f       	subi	r20, 0xFF	; 255
 490:	5f 4f       	sbci	r21, 0xFF	; 255
 492:	fc 01       	movw	r30, r24
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	4a 95       	dec	r20
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49e:	6d 5f       	subi	r22, 0xFD	; 253
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4ac:	8e 2b       	or	r24, r30
 4ae:	82 2b       	or	r24, r18
 4b0:	83 0f       	add	r24, r19
 4b2:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	08 95       	ret

000004c2 <is_prime>:



bool is_prime(long i){
 4c2:	cf 92       	push	r12
 4c4:	df 92       	push	r13
 4c6:	ef 92       	push	r14
 4c8:	ff 92       	push	r15
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	6b 01       	movw	r12, r22
 4d0:	7c 01       	movw	r14, r24
	
	if(i < 2){
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	c8 16       	cp	r12, r24
 4d6:	d1 04       	cpc	r13, r1
 4d8:	e1 04       	cpc	r14, r1
 4da:	f1 04       	cpc	r15, r1
 4dc:	a4 f1       	brlt	.+104    	; 0x546 <__stack+0x47>
		return false;
	}

	for (int n = 2; n < i; n++){
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	c8 16       	cp	r12, r24
 4e2:	d1 04       	cpc	r13, r1
 4e4:	e1 04       	cpc	r14, r1
 4e6:	f1 04       	cpc	r15, r1
 4e8:	84 f1       	brlt	.+96     	; 0x54a <__stack+0x4b>
		if ( i % n == 0){
 4ea:	d7 01       	movw	r26, r14
 4ec:	c6 01       	movw	r24, r12
 4ee:	81 70       	andi	r24, 0x01	; 1
 4f0:	99 27       	eor	r25, r25
 4f2:	aa 27       	eor	r26, r26
 4f4:	b0 78       	andi	r27, 0x80	; 128
 4f6:	bb 23       	and	r27, r27
 4f8:	54 f4       	brge	.+20     	; 0x50e <__stack+0xf>
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	a1 09       	sbc	r26, r1
 4fe:	b1 09       	sbc	r27, r1
 500:	8e 6f       	ori	r24, 0xFE	; 254
 502:	9f 6f       	ori	r25, 0xFF	; 255
 504:	af 6f       	ori	r26, 0xFF	; 255
 506:	bf 6f       	ori	r27, 0xFF	; 255
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	a1 1d       	adc	r26, r1
 50c:	b1 1d       	adc	r27, r1
 50e:	89 2b       	or	r24, r25
 510:	8a 2b       	or	r24, r26
 512:	8b 2b       	or	r24, r27
 514:	e1 f0       	breq	.+56     	; 0x54e <__stack+0x4f>
 516:	c2 e0       	ldi	r28, 0x02	; 2
 518:	d0 e0       	ldi	r29, 0x00	; 0
 51a:	08 c0       	rjmp	.+16     	; 0x52c <__stack+0x2d>
 51c:	c7 01       	movw	r24, r14
 51e:	b6 01       	movw	r22, r12
 520:	0e 94 22 04 	call	0x844	; 0x844 <__divmodsi4>
 524:	67 2b       	or	r22, r23
 526:	68 2b       	or	r22, r24
 528:	69 2b       	or	r22, r25
 52a:	99 f0       	breq	.+38     	; 0x552 <__stack+0x53>
	
	if(i < 2){
		return false;
	}

	for (int n = 2; n < i; n++){
 52c:	21 96       	adiw	r28, 0x01	; 1
 52e:	9e 01       	movw	r18, r28
 530:	0d 2e       	mov	r0, r29
 532:	00 0c       	add	r0, r0
 534:	44 0b       	sbc	r20, r20
 536:	55 0b       	sbc	r21, r21
 538:	2c 15       	cp	r18, r12
 53a:	3d 05       	cpc	r19, r13
 53c:	4e 05       	cpc	r20, r14
 53e:	5f 05       	cpc	r21, r15
 540:	6c f3       	brlt	.-38     	; 0x51c <__stack+0x1d>
		if ( i % n == 0){
			return false;
		}
	}

	return true;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	07 c0       	rjmp	.+14     	; 0x554 <__stack+0x55>


bool is_prime(long i){
	
	if(i < 2){
		return false;
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	05 c0       	rjmp	.+10     	; 0x554 <__stack+0x55>
		if ( i % n == 0){
			return false;
		}
	}

	return true;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	03 c0       	rjmp	.+6      	; 0x554 <__stack+0x55>
		return false;
	}

	for (int n = 2; n < i; n++){
		if ( i % n == 0){
			return false;
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	01 c0       	rjmp	.+2      	; 0x554 <__stack+0x55>
 552:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	08 95       	ret

00000562 <printAt>:



void printAt(long num, int pos) {
 562:	8f 92       	push	r8
 564:	9f 92       	push	r9
 566:	af 92       	push	r10
 568:	bf 92       	push	r11
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	4b 01       	movw	r8, r22
 578:	5c 01       	movw	r10, r24
 57a:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 57c:	24 e6       	ldi	r18, 0x64	; 100
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	0e 94 22 04 	call	0x844	; 0x844 <__divmodsi4>
 588:	0f 2e       	mov	r0, r31
 58a:	fa e0       	ldi	r31, 0x0A	; 10
 58c:	cf 2e       	mov	r12, r31
 58e:	d1 2c       	mov	r13, r1
 590:	e1 2c       	mov	r14, r1
 592:	f1 2c       	mov	r15, r1
 594:	f0 2d       	mov	r31, r0
 596:	a7 01       	movw	r20, r14
 598:	96 01       	movw	r18, r12
 59a:	0e 94 22 04 	call	0x844	; 0x844 <__divmodsi4>
 59e:	be 01       	movw	r22, r28
 5a0:	80 e3       	ldi	r24, 0x30	; 48
 5a2:	82 0f       	add	r24, r18
 5a4:	0e 94 69 00 	call	0xd2	; 0xd2 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 5a8:	21 96       	adiw	r28, 0x01	; 1
 5aa:	c5 01       	movw	r24, r10
 5ac:	b4 01       	movw	r22, r8
 5ae:	a7 01       	movw	r20, r14
 5b0:	96 01       	movw	r18, r12
 5b2:	0e 94 22 04 	call	0x844	; 0x844 <__divmodsi4>
 5b6:	86 2f       	mov	r24, r22
 5b8:	be 01       	movw	r22, r28
 5ba:	80 5d       	subi	r24, 0xD0	; 208
 5bc:	0e 94 69 00 	call	0xd2	; 0xd2 <writeChar>
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	bf 90       	pop	r11
 5ce:	af 90       	pop	r10
 5d0:	9f 90       	pop	r9
 5d2:	8f 90       	pop	r8
 5d4:	08 95       	ret

000005d6 <computePrimes>:



void computePrimes(int pos) {
 5d6:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 5d8:	c1 2c       	mov	r12, r1
 5da:	d1 2c       	mov	r13, r1
 5dc:	76 01       	movw	r14, r12
 5de:	c3 94       	inc	r12
        if (is_prime(n)) {
 5e0:	c7 01       	movw	r24, r14
 5e2:	b6 01       	movw	r22, r12
 5e4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <is_prime>
 5e8:	88 23       	and	r24, r24
 5ea:	29 f0       	breq	.+10     	; 0x5f6 <computePrimes+0x20>
            printAt(n, pos);
 5ec:	ae 01       	movw	r20, r28
 5ee:	c7 01       	movw	r24, r14
 5f0:	b6 01       	movw	r22, r12
 5f2:	0e 94 b1 02 	call	0x562	; 0x562 <printAt>


void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	c8 1a       	sub	r12, r24
 5fa:	d8 0a       	sbc	r13, r24
 5fc:	e8 0a       	sbc	r14, r24
 5fe:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 600:	ef cf       	rjmp	.-34     	; 0x5e0 <computePrimes+0xa>

00000602 <main>:
}


int main() {
	initLCD();
 602:	0e 94 57 00 	call	0xae	; 0xae <initLCD>
	
	spawn(computePrimes, 0);
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	8b ee       	ldi	r24, 0xEB	; 235
 60c:	92 e0       	ldi	r25, 0x02	; 2
 60e:	0e 94 44 03 	call	0x688	; 0x688 <spawn>
	computePrimes(3);
 612:	83 e0       	ldi	r24, 0x03	; 3
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <computePrimes>

0000061a <enqueue>:

void lock(mutex *m) {

}

void unlock(mutex *m) {
 61a:	dc 01       	movw	r26, r24
 61c:	15 96       	adiw	r26, 0x05	; 5
 61e:	1c 92       	st	X, r1
 620:	1e 92       	st	-X, r1
 622:	14 97       	sbiw	r26, 0x04	; 4
 624:	db 01       	movw	r26, r22
 626:	ed 91       	ld	r30, X+
 628:	fc 91       	ld	r31, X
 62a:	11 97       	sbiw	r26, 0x01	; 1
 62c:	30 97       	sbiw	r30, 0x00	; 0
 62e:	21 f4       	brne	.+8      	; 0x638 <enqueue+0x1e>
 630:	8d 93       	st	X+, r24
 632:	9c 93       	st	X, r25
 634:	08 95       	ret
 636:	f9 01       	movw	r30, r18
 638:	24 81       	ldd	r18, Z+4	; 0x04
 63a:	35 81       	ldd	r19, Z+5	; 0x05
 63c:	21 15       	cp	r18, r1
 63e:	31 05       	cpc	r19, r1
 640:	d1 f7       	brne	.-12     	; 0x636 <enqueue+0x1c>
 642:	95 83       	std	Z+5, r25	; 0x05
 644:	84 83       	std	Z+4, r24	; 0x04
 646:	08 95       	ret

00000648 <dispatch>:
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	00 d0       	rcall	.+0      	; 0x64e <dispatch+0x6>
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	9a 83       	std	Y+2, r25	; 0x02
 654:	89 83       	std	Y+1, r24	; 0x01
 656:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 65a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 65e:	06 96       	adiw	r24, 0x06	; 6
 660:	0e 94 69 04 	call	0x8d2	; 0x8d2 <setjmp>
 664:	89 2b       	or	r24, r25
 666:	59 f4       	brne	.+22     	; 0x67e <dispatch+0x36>
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	9a 81       	ldd	r25, Y+2	; 0x02
 66c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 670:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	06 96       	adiw	r24, 0x06	; 6
 67a:	0e 94 89 04 	call	0x912	; 0x912 <longjmp>
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <spawn>:
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	00 d0       	rcall	.+0      	; 0x68e <spawn+0x6>
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	f8 94       	cli
 694:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 698:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 69c:	23 2b       	or	r18, r19
 69e:	c9 f5       	brne	.+114    	; 0x712 <spawn+0x8a>
 6a0:	22 ee       	ldi	r18, 0xE2	; 226
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <threads+0x5>
 6a8:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <threads+0x4>
 6ac:	2f e4       	ldi	r18, 0x4F	; 79
 6ae:	32 e0       	ldi	r19, 0x02	; 2
 6b0:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <threads+0x72>
 6b4:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <threads+0x71>
 6b8:	2c eb       	ldi	r18, 0xBC	; 188
 6ba:	32 e0       	ldi	r19, 0x02	; 2
 6bc:	30 93 54 02 	sts	0x0254, r19	; 0x800254 <threads+0xdf>
 6c0:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <threads+0xde>
 6c4:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <threads+0x14c>
 6c8:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <threads+0x14b>
 6cc:	25 b1       	in	r18, 0x05	; 5
 6ce:	20 58       	subi	r18, 0x80	; 128
 6d0:	25 b9       	out	0x05, r18	; 5
 6d2:	2f e0       	ldi	r18, 0x0F	; 15
 6d4:	24 b9       	out	0x04, r18	; 4
 6d6:	00 00       	nop
 6d8:	20 e8       	ldi	r18, 0x80	; 128
 6da:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 6de:	2d bb       	out	0x1d, r18	; 29
 6e0:	22 e0       	ldi	r18, 0x02	; 2
 6e2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 6e6:	20 ec       	ldi	r18, 0xC0	; 192
 6e8:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 6ec:	2d e0       	ldi	r18, 0x0D	; 13
 6ee:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6f2:	2d e0       	ldi	r18, 0x0D	; 13
 6f4:	33 e0       	ldi	r19, 0x03	; 3
 6f6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6fa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 6fe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 702:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 706:	21 e0       	ldi	r18, 0x01	; 1
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 70e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 712:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 716:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 71a:	3a 83       	std	Y+2, r19	; 0x02
 71c:	29 83       	std	Y+1, r18	; 0x01
 71e:	23 2b       	or	r18, r19
 720:	a9 f0       	breq	.+42     	; 0x74c <spawn+0xc4>
 722:	e9 81       	ldd	r30, Y+1	; 0x01
 724:	fa 81       	ldd	r31, Y+2	; 0x02
 726:	44 81       	ldd	r20, Z+4	; 0x04
 728:	55 81       	ldd	r21, Z+5	; 0x05
 72a:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 72e:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>
 732:	91 83       	std	Z+1, r25	; 0x01
 734:	80 83       	st	Z, r24
 736:	73 83       	std	Z+3, r23	; 0x03
 738:	62 83       	std	Z+2, r22	; 0x02
 73a:	15 82       	std	Z+5, r1	; 0x05
 73c:	14 82       	std	Z+4, r1	; 0x04
 73e:	cf 01       	movw	r24, r30
 740:	06 96       	adiw	r24, 0x06	; 6
 742:	0e 94 69 04 	call	0x8d2	; 0x8d2 <setjmp>
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	49 f5       	brne	.+82     	; 0x79c <spawn+0x114>
 74a:	01 c0       	rjmp	.+2      	; 0x74e <spawn+0xc6>
 74c:	ff cf       	rjmp	.-2      	; 0x74c <spawn+0xc4>
 74e:	78 94       	sei
 750:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 754:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 758:	ed 91       	ld	r30, X+
 75a:	fc 91       	ld	r31, X
 75c:	11 97       	sbiw	r26, 0x01	; 1
 75e:	12 96       	adiw	r26, 0x02	; 2
 760:	8d 91       	ld	r24, X+
 762:	9c 91       	ld	r25, X
 764:	13 97       	sbiw	r26, 0x03	; 3
 766:	09 95       	icall
 768:	f8 94       	cli
 76a:	62 e0       	ldi	r22, 0x02	; 2
 76c:	71 e0       	ldi	r23, 0x01	; 1
 76e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 772:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 776:	0e 94 0d 03 	call	0x61a	; 0x61a <enqueue>
 77a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readyQ>
 77e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readyQ+0x1>
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	51 f0       	breq	.+20     	; 0x79a <spawn+0x112>
 786:	fc 01       	movw	r30, r24
 788:	24 81       	ldd	r18, Z+4	; 0x04
 78a:	35 81       	ldd	r19, Z+5	; 0x05
 78c:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <readyQ+0x1>
 790:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <readyQ>
 794:	0e 94 24 03 	call	0x648	; 0x648 <dispatch>
 798:	01 c0       	rjmp	.+2      	; 0x79c <spawn+0x114>
 79a:	ff cf       	rjmp	.-2      	; 0x79a <spawn+0x112>
 79c:	e9 81       	ldd	r30, Y+1	; 0x01
 79e:	fa 81       	ldd	r31, Y+2	; 0x02
 7a0:	36 96       	adiw	r30, 0x06	; 6
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
 7a4:	9a 81       	ldd	r25, Y+2	; 0x02
 7a6:	87 59       	subi	r24, 0x97	; 151
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	91 8b       	std	Z+17, r25	; 0x11
 7ac:	80 8b       	std	Z+16, r24	; 0x10
 7ae:	93 8b       	std	Z+19, r25	; 0x13
 7b0:	82 8b       	std	Z+18, r24	; 0x12
 7b2:	66 e0       	ldi	r22, 0x06	; 6
 7b4:	71 e0       	ldi	r23, 0x01	; 1
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ba:	0e 94 0d 03 	call	0x61a	; 0x61a <enqueue>
 7be:	78 94       	sei
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <yield>:
 7ca:	66 e0       	ldi	r22, 0x06	; 6
 7cc:	71 e0       	ldi	r23, 0x01	; 1
 7ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7d6:	0e 94 0d 03 	call	0x61a	; 0x61a <enqueue>
 7da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readyQ>
 7de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readyQ+0x1>
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	51 f0       	breq	.+20     	; 0x7fa <yield+0x30>
 7e6:	fc 01       	movw	r30, r24
 7e8:	24 81       	ldd	r18, Z+4	; 0x04
 7ea:	35 81       	ldd	r19, Z+5	; 0x05
 7ec:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <readyQ+0x1>
 7f0:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <readyQ>
 7f4:	0e 94 24 03 	call	0x648	; 0x648 <dispatch>
 7f8:	08 95       	ret
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <yield+0x30>

000007fc <__vector_7>:
		currentVal = !currentVal;
	}
}
*/

ISR(TIMER1_COMPA_vect) { 
 7fc:	1f 92       	push	r1
 7fe:	0f 92       	push	r0
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	0f 92       	push	r0
 804:	11 24       	eor	r1, r1
 806:	2f 93       	push	r18
 808:	3f 93       	push	r19
 80a:	4f 93       	push	r20
 80c:	5f 93       	push	r21
 80e:	6f 93       	push	r22
 810:	7f 93       	push	r23
 812:	8f 93       	push	r24
 814:	9f 93       	push	r25
 816:	af 93       	push	r26
 818:	bf 93       	push	r27
 81a:	ef 93       	push	r30
 81c:	ff 93       	push	r31
	yield();
 81e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <yield>
}
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <__divmodsi4>:
 844:	05 2e       	mov	r0, r21
 846:	97 fb       	bst	r25, 7
 848:	1e f4       	brtc	.+6      	; 0x850 <__divmodsi4+0xc>
 84a:	00 94       	com	r0
 84c:	0e 94 39 04 	call	0x872	; 0x872 <__negsi2>
 850:	57 fd       	sbrc	r21, 7
 852:	07 d0       	rcall	.+14     	; 0x862 <__divmodsi4_neg2>
 854:	0e 94 47 04 	call	0x88e	; 0x88e <__udivmodsi4>
 858:	07 fc       	sbrc	r0, 7
 85a:	03 d0       	rcall	.+6      	; 0x862 <__divmodsi4_neg2>
 85c:	4e f4       	brtc	.+18     	; 0x870 <__divmodsi4_exit>
 85e:	0c 94 39 04 	jmp	0x872	; 0x872 <__negsi2>

00000862 <__divmodsi4_neg2>:
 862:	50 95       	com	r21
 864:	40 95       	com	r20
 866:	30 95       	com	r19
 868:	21 95       	neg	r18
 86a:	3f 4f       	sbci	r19, 0xFF	; 255
 86c:	4f 4f       	sbci	r20, 0xFF	; 255
 86e:	5f 4f       	sbci	r21, 0xFF	; 255

00000870 <__divmodsi4_exit>:
 870:	08 95       	ret

00000872 <__negsi2>:
 872:	90 95       	com	r25
 874:	80 95       	com	r24
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__tablejump2__>:
 882:	ee 0f       	add	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	05 90       	lpm	r0, Z+
 888:	f4 91       	lpm	r31, Z
 88a:	e0 2d       	mov	r30, r0
 88c:	09 94       	ijmp

0000088e <__udivmodsi4>:
 88e:	a1 e2       	ldi	r26, 0x21	; 33
 890:	1a 2e       	mov	r1, r26
 892:	aa 1b       	sub	r26, r26
 894:	bb 1b       	sub	r27, r27
 896:	fd 01       	movw	r30, r26
 898:	0d c0       	rjmp	.+26     	; 0x8b4 <__udivmodsi4_ep>

0000089a <__udivmodsi4_loop>:
 89a:	aa 1f       	adc	r26, r26
 89c:	bb 1f       	adc	r27, r27
 89e:	ee 1f       	adc	r30, r30
 8a0:	ff 1f       	adc	r31, r31
 8a2:	a2 17       	cp	r26, r18
 8a4:	b3 07       	cpc	r27, r19
 8a6:	e4 07       	cpc	r30, r20
 8a8:	f5 07       	cpc	r31, r21
 8aa:	20 f0       	brcs	.+8      	; 0x8b4 <__udivmodsi4_ep>
 8ac:	a2 1b       	sub	r26, r18
 8ae:	b3 0b       	sbc	r27, r19
 8b0:	e4 0b       	sbc	r30, r20
 8b2:	f5 0b       	sbc	r31, r21

000008b4 <__udivmodsi4_ep>:
 8b4:	66 1f       	adc	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	1a 94       	dec	r1
 8be:	69 f7       	brne	.-38     	; 0x89a <__udivmodsi4_loop>
 8c0:	60 95       	com	r22
 8c2:	70 95       	com	r23
 8c4:	80 95       	com	r24
 8c6:	90 95       	com	r25
 8c8:	9b 01       	movw	r18, r22
 8ca:	ac 01       	movw	r20, r24
 8cc:	bd 01       	movw	r22, r26
 8ce:	cf 01       	movw	r24, r30
 8d0:	08 95       	ret

000008d2 <setjmp>:
 8d2:	dc 01       	movw	r26, r24
 8d4:	2d 92       	st	X+, r2
 8d6:	3d 92       	st	X+, r3
 8d8:	4d 92       	st	X+, r4
 8da:	5d 92       	st	X+, r5
 8dc:	6d 92       	st	X+, r6
 8de:	7d 92       	st	X+, r7
 8e0:	8d 92       	st	X+, r8
 8e2:	9d 92       	st	X+, r9
 8e4:	ad 92       	st	X+, r10
 8e6:	bd 92       	st	X+, r11
 8e8:	cd 92       	st	X+, r12
 8ea:	dd 92       	st	X+, r13
 8ec:	ed 92       	st	X+, r14
 8ee:	fd 92       	st	X+, r15
 8f0:	0d 93       	st	X+, r16
 8f2:	1d 93       	st	X+, r17
 8f4:	cd 93       	st	X+, r28
 8f6:	dd 93       	st	X+, r29
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	8d b7       	in	r24, 0x3d	; 61
 8fe:	8d 93       	st	X+, r24
 900:	8e b7       	in	r24, 0x3e	; 62
 902:	8d 93       	st	X+, r24
 904:	8f b7       	in	r24, 0x3f	; 63
 906:	8d 93       	st	X+, r24
 908:	ed 93       	st	X+, r30
 90a:	fd 93       	st	X+, r31
 90c:	88 27       	eor	r24, r24
 90e:	99 27       	eor	r25, r25
 910:	09 94       	ijmp

00000912 <longjmp>:
 912:	dc 01       	movw	r26, r24
 914:	cb 01       	movw	r24, r22
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	91 05       	cpc	r25, r1
 91a:	81 1d       	adc	r24, r1
 91c:	2d 90       	ld	r2, X+
 91e:	3d 90       	ld	r3, X+
 920:	4d 90       	ld	r4, X+
 922:	5d 90       	ld	r5, X+
 924:	6d 90       	ld	r6, X+
 926:	7d 90       	ld	r7, X+
 928:	8d 90       	ld	r8, X+
 92a:	9d 90       	ld	r9, X+
 92c:	ad 90       	ld	r10, X+
 92e:	bd 90       	ld	r11, X+
 930:	cd 90       	ld	r12, X+
 932:	dd 90       	ld	r13, X+
 934:	ed 90       	ld	r14, X+
 936:	fd 90       	ld	r15, X+
 938:	0d 91       	ld	r16, X+
 93a:	1d 91       	ld	r17, X+
 93c:	cd 91       	ld	r28, X+
 93e:	dd 91       	ld	r29, X+
 940:	ed 91       	ld	r30, X+
 942:	fd 91       	ld	r31, X+
 944:	0d 90       	ld	r0, X+
 946:	f8 94       	cli
 948:	fe bf       	out	0x3e, r31	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	ed bf       	out	0x3d, r30	; 61
 94e:	ed 91       	ld	r30, X+
 950:	fd 91       	ld	r31, X+
 952:	09 94       	ijmp

00000954 <_exit>:
 954:	f8 94       	cli

00000956 <__stop_program>:
 956:	ff cf       	rjmp	.-2      	; 0x956 <__stop_program>
