
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00002340  000023d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035d  00800130  00800130  00002404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a28  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e6  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155e  00000000  00000000  000061aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba0  00000000  00000000  00007708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094d  00000000  00000000  000082a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d12  00000000  00000000  00008bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000b907  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_1>
       8:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__vector_2>
       c:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__vector_3>
      10:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__vector_4>
      14:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__vector_9>
      28:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_10>
      2c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_11>
      30:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_12>
      34:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_13>
      38:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_14>
      3c:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_15>
      40:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_16>
      44:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_17>
      48:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_18>
      4c:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_19>
      50:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_20>
      54:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_21>
      58:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_22>
      5c:	12 01       	movw	r2, r4
      5e:	32 01       	movw	r6, r4
      60:	41 01       	movw	r8, r2
      62:	6e 01       	movw	r12, r28
      64:	93 01       	movw	r18, r6
      66:	b5 01       	movw	r22, r10
      68:	dc 01       	movw	r26, r24
      6a:	12 02       	muls	r17, r18
      6c:	d7 00       	.word	0x00d7	; ????
      6e:	96 00       	.word	0x0096	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e4       	ldi	r30, 0x40	; 64
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a0 33       	cpi	r26, 0x30	; 48
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a0 e3       	ldi	r26, 0x30	; 48
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ad 38       	cpi	r26, 0x8D	; 141
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 14 04 	call	0x828	; 0x828 <main>
      a6:	0c 94 9e 11 	jmp	0x233c	; 0x233c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <writeChar>:
	int focus;
} GUI;



static void writeChar(char c, int pos){
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
      bc:	db 01       	movw	r26, r22
      be:	77 fd       	sbrc	r23, 7
      c0:	74 c0       	rjmp	.+232    	; 0x1aa <writeChar+0xfc>
      c2:	b5 95       	asr	r27
      c4:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
      c6:	61 70       	andi	r22, 0x01	; 1
      c8:	70 78       	andi	r23, 0x80	; 128
      ca:	77 fd       	sbrc	r23, 7
      cc:	67 c0       	rjmp	.+206    	; 0x19c <writeChar+0xee>
      ce:	66 0f       	add	r22, r22
      d0:	77 1f       	adc	r23, r23
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
      d6:	ad 01       	movw	r20, r26
      d8:	44 51       	subi	r20, 0x14	; 20
      da:	5f 4f       	sbci	r21, 0xFF	; 255
      dc:	ea 01       	movw	r28, r20
      de:	88 81       	ld	r24, Y
      e0:	20 ef       	ldi	r18, 0xF0	; 240
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	06 2e       	mov	r0, r22
      e6:	02 c0       	rjmp	.+4      	; 0xec <writeChar+0x3e>
      e8:	35 95       	asr	r19
      ea:	27 95       	ror	r18
      ec:	0a 94       	dec	r0
      ee:	e2 f7       	brpl	.-8      	; 0xe8 <writeChar+0x3a>
      f0:	82 23       	and	r24, r18
      f2:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
      f4:	7d 01       	movw	r14, r26
      f6:	d1 ef       	ldi	r29, 0xF1	; 241
      f8:	ed 0e       	add	r14, r29
      fa:	f1 1c       	adc	r15, r1
      fc:	e7 01       	movw	r28, r14
      fe:	88 81       	ld	r24, Y
     100:	82 23       	and	r24, r18
     102:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
     104:	25 96       	adiw	r28, 0x05	; 5
     106:	88 81       	ld	r24, Y
     108:	82 23       	and	r24, r18
     10a:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
     10c:	a5 50       	subi	r26, 0x05	; 5
     10e:	bf 4f       	sbci	r27, 0xFF	; 255
     110:	8c 91       	ld	r24, X
     112:	28 23       	and	r18, r24
     114:	2c 93       	st	X, r18
	
	switch (c){
     116:	0e 2f       	mov	r16, r30
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	f8 01       	movw	r30, r16
     11c:	f0 97       	sbiw	r30, 0x30	; 48
     11e:	ea 30       	cpi	r30, 0x0A	; 10
     120:	f1 05       	cpc	r31, r1
     122:	a8 f5       	brcc	.+106    	; 0x18e <writeChar+0xe0>
     124:	e2 5d       	subi	r30, 0xD2	; 210
     126:	ff 4f       	sbci	r31, 0xFF	; 255
     128:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__tablejump2__>
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
		FEET  += (1 << (0 + offset));
		break;
		
		case '9':
		HEAD  += (1 << (0 + offset));
     12c:	da 01       	movw	r26, r20
     12e:	ec 91       	ld	r30, X
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	9c 01       	movw	r18, r24
     136:	06 2e       	mov	r0, r22
     138:	01 c0       	rjmp	.+2      	; 0x13c <writeChar+0x8e>
     13a:	22 0f       	add	r18, r18
     13c:	0a 94       	dec	r0
     13e:	ea f7       	brpl	.-6      	; 0x13a <writeChar+0x8c>
     140:	3e 2f       	mov	r19, r30
     142:	32 0f       	add	r19, r18
     144:	3c 93       	st	X, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     146:	f7 01       	movw	r30, r14
     148:	40 81       	ld	r20, Z
     14a:	fb 01       	movw	r30, r22
     14c:	32 96       	adiw	r30, 0x02	; 2
     14e:	8c 01       	movw	r16, r24
     150:	02 c0       	rjmp	.+4      	; 0x156 <writeChar+0xa8>
     152:	00 0f       	add	r16, r16
     154:	11 1f       	adc	r17, r17
     156:	ea 95       	dec	r30
     158:	e2 f7       	brpl	.-8      	; 0x152 <writeChar+0xa4>
     15a:	32 2f       	mov	r19, r18
     15c:	30 2b       	or	r19, r16
     15e:	34 0f       	add	r19, r20
     160:	d7 01       	movw	r26, r14
     162:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     164:	38 81       	ld	r19, Y
     166:	ab 01       	movw	r20, r22
     168:	4f 5f       	subi	r20, 0xFF	; 255
     16a:	5f 4f       	sbci	r21, 0xFF	; 255
     16c:	fc 01       	movw	r30, r24
     16e:	02 c0       	rjmp	.+4      	; 0x174 <writeChar+0xc6>
     170:	ee 0f       	add	r30, r30
     172:	ff 1f       	adc	r31, r31
     174:	4a 95       	dec	r20
     176:	e2 f7       	brpl	.-8      	; 0x170 <writeChar+0xc2>
     178:	af 01       	movw	r20, r30
     17a:	6d 5f       	subi	r22, 0xFD	; 253
     17c:	7f 4f       	sbci	r23, 0xFF	; 255
     17e:	01 c0       	rjmp	.+2      	; 0x182 <writeChar+0xd4>
     180:	88 0f       	add	r24, r24
     182:	6a 95       	dec	r22
     184:	ea f7       	brpl	.-6      	; 0x180 <writeChar+0xd2>
     186:	84 2b       	or	r24, r20
     188:	82 2b       	or	r24, r18
     18a:	83 0f       	add	r24, r19
     18c:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	08 95       	ret



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
     19c:	61 50       	subi	r22, 0x01	; 1
     19e:	71 09       	sbc	r23, r1
     1a0:	6e 6f       	ori	r22, 0xFE	; 254
     1a2:	7f 6f       	ori	r23, 0xFF	; 255
     1a4:	6f 5f       	subi	r22, 0xFF	; 255
     1a6:	7f 4f       	sbci	r23, 0xFF	; 255
     1a8:	92 cf       	rjmp	.-220    	; 0xce <writeChar+0x20>
} GUI;



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
     1aa:	11 96       	adiw	r26, 0x01	; 1
     1ac:	8a cf       	rjmp	.-236    	; 0xc2 <writeChar+0x14>
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset));
		break;
		
		case '8':
		HEAD  += (1 << (0 + offset));
     1ae:	fa 01       	movw	r30, r20
     1b0:	10 81       	ld	r17, Z
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	9c 01       	movw	r18, r24
     1b8:	06 2e       	mov	r0, r22
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <writeChar+0x110>
     1bc:	22 0f       	add	r18, r18
     1be:	0a 94       	dec	r0
     1c0:	ea f7       	brpl	.-6      	; 0x1bc <writeChar+0x10e>
     1c2:	31 2f       	mov	r19, r17
     1c4:	32 0f       	add	r19, r18
     1c6:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     1c8:	f7 01       	movw	r30, r14
     1ca:	30 81       	ld	r19, Z
     1cc:	ab 01       	movw	r20, r22
     1ce:	4e 5f       	subi	r20, 0xFE	; 254
     1d0:	5f 4f       	sbci	r21, 0xFF	; 255
     1d2:	8c 01       	movw	r16, r24
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <writeChar+0x12a>
     1d6:	00 0f       	add	r16, r16
     1d8:	4a 95       	dec	r20
     1da:	ea f7       	brpl	.-6      	; 0x1d6 <writeChar+0x128>
     1dc:	40 2f       	mov	r20, r16
     1de:	42 2b       	or	r20, r18
     1e0:	34 0f       	add	r19, r20
     1e2:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     1e4:	38 81       	ld	r19, Y
     1e6:	ab 01       	movw	r20, r22
     1e8:	4f 5f       	subi	r20, 0xFF	; 255
     1ea:	5f 4f       	sbci	r21, 0xFF	; 255
     1ec:	fc 01       	movw	r30, r24
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <writeChar+0x146>
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	4a 95       	dec	r20
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <writeChar+0x142>
     1f8:	af 01       	movw	r20, r30
     1fa:	40 2b       	or	r20, r16
     1fc:	42 2b       	or	r20, r18
     1fe:	6d 5f       	subi	r22, 0xFD	; 253
     200:	7f 4f       	sbci	r23, 0xFF	; 255
     202:	01 c0       	rjmp	.+2      	; 0x206 <writeChar+0x158>
     204:	88 0f       	add	r24, r24
     206:	6a 95       	dec	r22
     208:	ea f7       	brpl	.-6      	; 0x204 <writeChar+0x156>
     20a:	84 2b       	or	r24, r20
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     20c:	83 0f       	add	r24, r19
     20e:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     210:	8c 91       	ld	r24, X
     212:	28 0f       	add	r18, r24
     214:	2c 93       	st	X, r18
		break;
		
		default:
		break;
	}
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	08 95       	ret
	LEGS  &= (0x0F0 >> offset);
	FEET  &= (0x0F0 >> offset);
	
	switch (c){
		case '0':
		HEAD  += (1 << (0 + offset));
     224:	fa 01       	movw	r30, r20
     226:	10 81       	ld	r17, Z
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	9c 01       	movw	r18, r24
     22e:	06 2e       	mov	r0, r22
     230:	01 c0       	rjmp	.+2      	; 0x234 <writeChar+0x186>
     232:	22 0f       	add	r18, r18
     234:	0a 94       	dec	r0
     236:	ea f7       	brpl	.-6      	; 0x232 <writeChar+0x184>
     238:	31 2f       	mov	r19, r17
     23a:	32 0f       	add	r19, r18
     23c:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     23e:	f7 01       	movw	r30, r14
     240:	30 81       	ld	r19, Z
     242:	6e 5f       	subi	r22, 0xFE	; 254
     244:	7f 4f       	sbci	r23, 0xFF	; 255
     246:	01 c0       	rjmp	.+2      	; 0x24a <writeChar+0x19c>
     248:	88 0f       	add	r24, r24
     24a:	6a 95       	dec	r22
     24c:	ea f7       	brpl	.-6      	; 0x248 <writeChar+0x19a>
     24e:	82 2b       	or	r24, r18
     250:	93 2f       	mov	r25, r19
     252:	98 0f       	add	r25, r24
     254:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset)) | (1 << (2 + offset));
     256:	98 81       	ld	r25, Y
     258:	89 0f       	add	r24, r25
     25a:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     25c:	8c 91       	ld	r24, X
     25e:	28 0f       	add	r18, r24
     260:	2c 93       	st	X, r18
		break;
     262:	95 cf       	rjmp	.-214    	; 0x18e <writeChar+0xe0>
		
		case '1':
		CHEST += (1 << (0 + offset));
     264:	d7 01       	movw	r26, r14
     266:	2c 91       	ld	r18, X
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <writeChar+0x1c2>
     26e:	88 0f       	add	r24, r24
     270:	6a 95       	dec	r22
     272:	ea f7       	brpl	.-6      	; 0x26e <writeChar+0x1c0>
     274:	92 2f       	mov	r25, r18
     276:	98 0f       	add	r25, r24
     278:	9c 93       	st	X, r25
		LEGS  += (1 << (0 + offset));
     27a:	98 81       	ld	r25, Y
     27c:	89 0f       	add	r24, r25
     27e:	88 83       	st	Y, r24
		break;
     280:	86 cf       	rjmp	.-244    	; 0x18e <writeChar+0xe0>
		
		case '2':
		HEAD  += (1 << (0 + offset));
     282:	fa 01       	movw	r30, r20
     284:	10 81       	ld	r17, Z
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	9c 01       	movw	r18, r24
     28c:	06 2e       	mov	r0, r22
     28e:	01 c0       	rjmp	.+2      	; 0x292 <writeChar+0x1e4>
     290:	22 0f       	add	r18, r18
     292:	0a 94       	dec	r0
     294:	ea f7       	brpl	.-6      	; 0x290 <writeChar+0x1e2>
     296:	31 2f       	mov	r19, r17
     298:	32 0f       	add	r19, r18
     29a:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     29c:	f7 01       	movw	r30, r14
     29e:	30 81       	ld	r19, Z
     2a0:	32 0f       	add	r19, r18
     2a2:	30 83       	st	Z, r19
		LEGS  += (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     2a4:	38 81       	ld	r19, Y
     2a6:	ab 01       	movw	r20, r22
     2a8:	4f 5f       	subi	r20, 0xFF	; 255
     2aa:	5f 4f       	sbci	r21, 0xFF	; 255
     2ac:	fc 01       	movw	r30, r24
     2ae:	04 2e       	mov	r0, r20
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <writeChar+0x206>
     2b2:	ee 0f       	add	r30, r30
     2b4:	0a 94       	dec	r0
     2b6:	ea f7       	brpl	.-6      	; 0x2b2 <writeChar+0x204>
     2b8:	4f 5f       	subi	r20, 0xFF	; 255
     2ba:	5f 4f       	sbci	r21, 0xFF	; 255
     2bc:	8c 01       	movw	r16, r24
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <writeChar+0x216>
     2c0:	00 0f       	add	r16, r16
     2c2:	11 1f       	adc	r17, r17
     2c4:	4a 95       	dec	r20
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <writeChar+0x212>
     2c8:	a8 01       	movw	r20, r16
     2ca:	4e 2b       	or	r20, r30
     2cc:	6d 5f       	subi	r22, 0xFD	; 253
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <writeChar+0x226>
     2d2:	88 0f       	add	r24, r24
     2d4:	6a 95       	dec	r22
     2d6:	ea f7       	brpl	.-6      	; 0x2d2 <writeChar+0x224>
     2d8:	84 2b       	or	r24, r20
     2da:	98 cf       	rjmp	.-208    	; 0x20c <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
     2dc:	fa 01       	movw	r30, r20
     2de:	10 81       	ld	r17, Z
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	9c 01       	movw	r18, r24
     2e6:	06 2e       	mov	r0, r22
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <writeChar+0x23e>
     2ea:	22 0f       	add	r18, r18
     2ec:	0a 94       	dec	r0
     2ee:	ea f7       	brpl	.-6      	; 0x2ea <writeChar+0x23c>
     2f0:	31 2f       	mov	r19, r17
     2f2:	32 0f       	add	r19, r18
     2f4:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     2f6:	f7 01       	movw	r30, r14
     2f8:	30 81       	ld	r19, Z
     2fa:	32 0f       	add	r19, r18
     2fc:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     2fe:	38 81       	ld	r19, Y
     300:	ab 01       	movw	r20, r22
     302:	4f 5f       	subi	r20, 0xFF	; 255
     304:	5f 4f       	sbci	r21, 0xFF	; 255
     306:	8c 01       	movw	r16, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <writeChar+0x260>
     30a:	00 0f       	add	r16, r16
     30c:	11 1f       	adc	r17, r17
     30e:	4a 95       	dec	r20
     310:	e2 f7       	brpl	.-8      	; 0x30a <writeChar+0x25c>
     312:	a8 01       	movw	r20, r16
     314:	6d 5f       	subi	r22, 0xFD	; 253
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	01 c0       	rjmp	.+2      	; 0x31c <writeChar+0x26e>
     31a:	88 0f       	add	r24, r24
     31c:	6a 95       	dec	r22
     31e:	ea f7       	brpl	.-6      	; 0x31a <writeChar+0x26c>
     320:	84 2b       	or	r24, r20
     322:	82 2b       	or	r24, r18
     324:	73 cf       	rjmp	.-282    	; 0x20c <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '4':
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     326:	d7 01       	movw	r26, r14
     328:	4c 91       	ld	r20, X
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	9c 01       	movw	r18, r24
     330:	06 2e       	mov	r0, r22
     332:	01 c0       	rjmp	.+2      	; 0x336 <writeChar+0x288>
     334:	22 0f       	add	r18, r18
     336:	0a 94       	dec	r0
     338:	ea f7       	brpl	.-6      	; 0x334 <writeChar+0x286>
     33a:	fb 01       	movw	r30, r22
     33c:	32 96       	adiw	r30, 0x02	; 2
     33e:	8c 01       	movw	r16, r24
     340:	02 c0       	rjmp	.+4      	; 0x346 <writeChar+0x298>
     342:	00 0f       	add	r16, r16
     344:	11 1f       	adc	r17, r17
     346:	ea 95       	dec	r30
     348:	e2 f7       	brpl	.-8      	; 0x342 <writeChar+0x294>
     34a:	32 2f       	mov	r19, r18
     34c:	30 2b       	or	r19, r16
     34e:	34 0f       	add	r19, r20
     350:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     352:	38 81       	ld	r19, Y
     354:	ab 01       	movw	r20, r22
     356:	4f 5f       	subi	r20, 0xFF	; 255
     358:	5f 4f       	sbci	r21, 0xFF	; 255
     35a:	dc 01       	movw	r26, r24
     35c:	02 c0       	rjmp	.+4      	; 0x362 <writeChar+0x2b4>
     35e:	aa 0f       	add	r26, r26
     360:	bb 1f       	adc	r27, r27
     362:	4a 95       	dec	r20
     364:	e2 f7       	brpl	.-8      	; 0x35e <writeChar+0x2b0>
     366:	ad 01       	movw	r20, r26
     368:	08 cf       	rjmp	.-496    	; 0x17a <writeChar+0xcc>
		break;
		
		case '5':
		HEAD  += (1 << (0 + offset));
     36a:	fa 01       	movw	r30, r20
     36c:	10 81       	ld	r17, Z
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9c 01       	movw	r18, r24
     374:	06 2e       	mov	r0, r22
     376:	01 c0       	rjmp	.+2      	; 0x37a <writeChar+0x2cc>
     378:	22 0f       	add	r18, r18
     37a:	0a 94       	dec	r0
     37c:	ea f7       	brpl	.-6      	; 0x378 <writeChar+0x2ca>
     37e:	31 2f       	mov	r19, r17
     380:	32 0f       	add	r19, r18
     382:	30 83       	st	Z, r19
		CHEST += (1 << (2 + offset));
     384:	f7 01       	movw	r30, r14
     386:	30 81       	ld	r19, Z
     388:	ab 01       	movw	r20, r22
     38a:	4e 5f       	subi	r20, 0xFE	; 254
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	8c 01       	movw	r16, r24
     390:	02 c0       	rjmp	.+4      	; 0x396 <writeChar+0x2e8>
     392:	00 0f       	add	r16, r16
     394:	11 1f       	adc	r17, r17
     396:	4a 95       	dec	r20
     398:	e2 f7       	brpl	.-8      	; 0x392 <writeChar+0x2e4>
     39a:	a8 01       	movw	r20, r16
     39c:	43 0f       	add	r20, r19
     39e:	40 83       	st	Z, r20
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     3a0:	38 81       	ld	r19, Y
     3a2:	ab 01       	movw	r20, r22
     3a4:	4f 5f       	subi	r20, 0xFF	; 255
     3a6:	5f 4f       	sbci	r21, 0xFF	; 255
     3a8:	fc 01       	movw	r30, r24
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <writeChar+0x302>
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	4a 95       	dec	r20
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <writeChar+0x2fe>
     3b4:	af 01       	movw	r20, r30
     3b6:	ae cf       	rjmp	.-164    	; 0x314 <writeChar+0x266>
		FEET  += (1 << (0 + offset));
		break;
		
		case '6':
		HEAD  += (1 << (0 + offset));
     3b8:	fa 01       	movw	r30, r20
     3ba:	20 81       	ld	r18, Z
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	8c 01       	movw	r16, r24
     3c2:	06 2e       	mov	r0, r22
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <writeChar+0x31a>
     3c6:	00 0f       	add	r16, r16
     3c8:	0a 94       	dec	r0
     3ca:	ea f7       	brpl	.-6      	; 0x3c6 <writeChar+0x318>
     3cc:	20 0f       	add	r18, r16
     3ce:	20 83       	st	Z, r18
		CHEST += (1 << (2 + offset));
     3d0:	f7 01       	movw	r30, r14
     3d2:	40 81       	ld	r20, Z
     3d4:	9b 01       	movw	r18, r22
     3d6:	2e 5f       	subi	r18, 0xFE	; 254
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	fc 01       	movw	r30, r24
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <writeChar+0x334>
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	2a 95       	dec	r18
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <writeChar+0x330>
     3e6:	9f 01       	movw	r18, r30
     3e8:	34 2f       	mov	r19, r20
     3ea:	32 0f       	add	r19, r18
     3ec:	f7 01       	movw	r30, r14
     3ee:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     3f0:	38 81       	ld	r19, Y
     3f2:	ab 01       	movw	r20, r22
     3f4:	4f 5f       	subi	r20, 0xFF	; 255
     3f6:	5f 4f       	sbci	r21, 0xFF	; 255
     3f8:	fc 01       	movw	r30, r24
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	4a 95       	dec	r20
     402:	e2 f7       	brpl	.-8      	; 0x3fc <writeChar+0x34e>
     404:	2e 2b       	or	r18, r30
     406:	20 2b       	or	r18, r16
     408:	6d 5f       	subi	r22, 0xFD	; 253
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	88 0f       	add	r24, r24
     410:	6a 95       	dec	r22
     412:	ea f7       	brpl	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     414:	82 2b       	or	r24, r18
     416:	83 0f       	add	r24, r19
     418:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     41a:	8c 91       	ld	r24, X
     41c:	e0 2f       	mov	r30, r16
     41e:	e8 0f       	add	r30, r24
     420:	ec 93       	st	X, r30
		break;
     422:	b5 ce       	rjmp	.-662    	; 0x18e <writeChar+0xe0>
		
		case '7':
		HEAD  += (1 << (0 + offset));
     424:	da 01       	movw	r26, r20
     426:	2c 91       	ld	r18, X
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	88 0f       	add	r24, r24
     430:	6a 95       	dec	r22
     432:	ea f7       	brpl	.-6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     434:	92 2f       	mov	r25, r18
     436:	98 0f       	add	r25, r24
     438:	9c 93       	st	X, r25
		CHEST += (1 << (0 + offset));
     43a:	f7 01       	movw	r30, r14
     43c:	90 81       	ld	r25, Z
     43e:	98 0f       	add	r25, r24
     440:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset));
     442:	98 81       	ld	r25, Y
     444:	89 0f       	add	r24, r25
     446:	88 83       	st	Y, r24
		break;
     448:	a2 ce       	rjmp	.-700    	; 0x18e <writeChar+0xe0>

0000044a <printAt>:
		default:
		break;
	}
}

void printAt(GUI *self, int num) {
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	7b 01       	movw	r14, r22
	int pp = self->focus * 4;
     458:	fc 01       	movw	r30, r24
     45a:	c4 81       	ldd	r28, Z+4	; 0x04
     45c:	d5 81       	ldd	r29, Z+5	; 0x05
     45e:	cc 0f       	add	r28, r28
     460:	dd 1f       	adc	r29, r29
     462:	cc 0f       	add	r28, r28
     464:	dd 1f       	adc	r29, r29
	writeChar( (num % 100) / 10 + '0', pp);
     466:	cb 01       	movw	r24, r22
     468:	64 e6       	ldi	r22, 0x64	; 100
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodhi4>
     470:	0a e0       	ldi	r16, 0x0A	; 10
     472:	10 e0       	ldi	r17, 0x00	; 0
     474:	b8 01       	movw	r22, r16
     476:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodhi4>
     47a:	86 2f       	mov	r24, r22
     47c:	be 01       	movw	r22, r28
     47e:	80 5d       	subi	r24, 0xD0	; 208
     480:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     484:	21 96       	adiw	r28, 0x01	; 1
     486:	c7 01       	movw	r24, r14
     488:	b8 01       	movw	r22, r16
     48a:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodhi4>
     48e:	be 01       	movw	r22, r28
     490:	80 5d       	subi	r24, 0xD0	; 208
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14

void printAt(GUI *self, int num) {
	int pp = self->focus * 4;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     49e:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

000004a2 <initLCD>:



void initLCD(){
	// LCD
	CLKPR = 0x80;
     4a2:	e1 e6       	ldi	r30, 0x61	; 97
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	80 83       	st	Z, r24
	CLKPR = 0x00;
     4aa:	10 82       	st	Z, r1

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     4ac:	90 ec       	ldi	r25, 0xC0	; 192
     4ae:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     4b2:	87 e3       	ldi	r24, 0x37	; 55
     4b4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     4b8:	87 e0       	ldi	r24, 0x07	; 7
     4ba:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     4be:	8f e0       	ldi	r24, 0x0F	; 15
     4c0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	
	
	// Button
	PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
     4c4:	85 b1       	in	r24, 0x05	; 5
     4c6:	80 6d       	ori	r24, 0xD0	; 208
     4c8:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE2)|(1<<PE3);
     4ca:	8e b1       	in	r24, 0x0e	; 14
     4cc:	8c 60       	ori	r24, 0x0C	; 12
     4ce:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
     4d0:	8f e2       	ldi	r24, 0x2F	; 47
     4d2:	84 b9       	out	0x04, r24	; 4
	//DDRE   = (1<<DDE6)|(1<<DDE4);
	
	//Insert nop for synchronization
	asm("nop");
     4d4:	00 00       	nop

	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
     4dc:	80 ed       	ldi	r24, 0xD0	; 208
     4de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
     4e2:	9d bb       	out	0x1d, r25	; 29



	// Prints startup chars
	LCDDR1 = (1 << 2);
     4e4:	84 e0       	ldi	r24, 0x04	; 4
     4e6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	writeChar('0', 0);
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	writeChar('0', 1);
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e3       	ldi	r24, 0x30	; 48
     4fa:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	writeChar('0', 4);
     4fe:	64 e0       	ldi	r22, 0x04	; 4
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	writeChar('0', 5);
     508:	65 e0       	ldi	r22, 0x05	; 5
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	80 e3       	ldi	r24, 0x30	; 48
     50e:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

00000512 <switchFocus>:
}


void switchFocus(GUI *self){
	self->focus = !self->focus;
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	24 81       	ldd	r18, Z+4	; 0x04
     51a:	35 81       	ldd	r19, Z+5	; 0x05
     51c:	23 2b       	or	r18, r19
     51e:	11 f0       	breq	.+4      	; 0x524 <switchFocus+0x12>
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	55 83       	std	Z+5, r21	; 0x05
     528:	44 83       	std	Z+4, r20	; 0x04
	LCDDR1 = (1 <<( 2 - self->focus));
     52a:	22 e0       	ldi	r18, 0x02	; 2
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	24 1b       	sub	r18, r20
     530:	35 0b       	sbc	r19, r21
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	01 c0       	rjmp	.+2      	; 0x53a <switchFocus+0x28>
     538:	88 0f       	add	r24, r24
     53a:	2a 95       	dec	r18
     53c:	ea f7       	brpl	.-6      	; 0x538 <switchFocus+0x26>
     53e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     542:	08 95       	ret

00000544 <joystickCrossways>:
	ASYNC(self->pGen[1], generatePulse, 0);
}



void joystickCrossways(InputHandler *self, int bl){
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
     55a:	5b 01       	movw	r10, r22
	#define repPeriod 150

	
	
	// Depressed
	if(!(PINB-P6-P7)){
     55c:	83 b1       	in	r24, 0x03	; 3
     55e:	80 3c       	cpi	r24, 0xC0	; 192
     560:	09 f4       	brne	.+2      	; 0x564 <joystickCrossways+0x20>
     562:	68 c0       	rjmp	.+208    	; 0x634 <joystickCrossways+0xf0>
		ASYNC(SELECTED_PGEN, saveOrLoadFrequency, NULL);
		ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);					// Print new value to screen
	}
	
	// Up
	if(!(PINB-P4-P7)){
     564:	83 b1       	in	r24, 0x03	; 3
     566:	80 39       	cpi	r24, 0x90	; 144
     568:	09 f4       	brne	.+2      	; 0x56c <joystickCrossways+0x28>
     56a:	9f c0       	rjmp	.+318    	; 0x6aa <joystickCrossways+0x166>
			
		AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
	}
	
	// Down
	if(!(PINB-P4-P6)){
     56c:	83 b1       	in	r24, 0x03	; 3
     56e:	80 35       	cpi	r24, 0x50	; 80
     570:	59 f0       	breq	.+22     	; 0x588 <joystickCrossways+0x44>
		AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
	}
	
	
	
}
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret
		AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
	}
	
	// Down
	if(!(PINB-P4-P6)){
		ASYNC(SELECTED_PGEN, increaseFrequency, -1);
     588:	e8 85       	ldd	r30, Y+8	; 0x08
     58a:	f9 85       	ldd	r31, Y+9	; 0x09
     58c:	04 80       	ldd	r0, Z+4	; 0x04
     58e:	f5 81       	ldd	r31, Z+5	; 0x05
     590:	e0 2d       	mov	r30, r0
     592:	32 96       	adiw	r30, 0x02	; 2
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	ec 0f       	add	r30, r28
     59a:	fd 1f       	adc	r31, r29
     59c:	00 81       	ld	r16, Z
     59e:	11 81       	ldd	r17, Z+1	; 0x01
     5a0:	cc 24       	eor	r12, r12
     5a2:	ca 94       	dec	r12
     5a4:	dc 2c       	mov	r13, r12
     5a6:	61 ea       	ldi	r22, 0xA1	; 161
     5a8:	e6 2e       	mov	r14, r22
     5aa:	64 e0       	ldi	r22, 0x04	; 4
     5ac:	f6 2e       	mov	r15, r22
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	a9 01       	movw	r20, r18
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	cb 01       	movw	r24, r22
     5ba:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
		ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);
     5be:	08 85       	ldd	r16, Y+8	; 0x08
     5c0:	19 85       	ldd	r17, Y+9	; 0x09
     5c2:	d8 01       	movw	r26, r16
     5c4:	14 96       	adiw	r26, 0x04	; 4
     5c6:	ed 91       	ld	r30, X+
     5c8:	fc 91       	ld	r31, X
     5ca:	15 97       	sbiw	r26, 0x05	; 5
     5cc:	32 96       	adiw	r30, 0x02	; 2
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	ec 0f       	add	r30, r28
     5d4:	fd 1f       	adc	r31, r29
     5d6:	01 90       	ld	r0, Z+
     5d8:	f0 81       	ld	r31, Z
     5da:	e0 2d       	mov	r30, r0
     5dc:	c0 84       	ldd	r12, Z+8	; 0x08
     5de:	d1 84       	ldd	r13, Z+9	; 0x09
     5e0:	e5 e2       	ldi	r30, 0x25	; 37
     5e2:	ee 2e       	mov	r14, r30
     5e4:	e2 e0       	ldi	r30, 0x02	; 2
     5e6:	fe 2e       	mov	r15, r30
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	cb 01       	movw	r24, r22
     5f4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
		
		AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
     5f8:	65 01       	movw	r12, r10
     5fa:	b6 e9       	ldi	r27, 0x96	; 150
     5fc:	cb 0e       	add	r12, r27
     5fe:	d1 1c       	adc	r13, r1
     600:	2d e7       	ldi	r18, 0x7D	; 125
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	d6 01       	movw	r26, r12
     606:	0e 94 33 11 	call	0x2266	; 0x2266 <__usmulhisi3>
     60a:	97 fd       	sbrc	r25, 7
     60c:	a4 c0       	rjmp	.+328    	; 0x756 <joystickCrossways+0x212>
     60e:	95 95       	asr	r25
     610:	87 95       	ror	r24
     612:	77 95       	ror	r23
     614:	67 95       	ror	r22
     616:	95 95       	asr	r25
     618:	87 95       	ror	r24
     61a:	77 95       	ror	r23
     61c:	67 95       	ror	r22
     61e:	32 ea       	ldi	r19, 0xA2	; 162
     620:	e3 2e       	mov	r14, r19
     622:	32 e0       	ldi	r19, 0x02	; 2
     624:	f3 2e       	mov	r15, r19
     626:	8e 01       	movw	r16, r28
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	a9 01       	movw	r20, r18
     62e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
	}
	
	
	
}
     632:	9f cf       	rjmp	.-194    	; 0x572 <joystickCrossways+0x2e>

	
	
	// Depressed
	if(!(PINB-P6-P7)){
		ASYNC(SELECTED_PGEN, saveOrLoadFrequency, NULL);
     634:	e8 85       	ldd	r30, Y+8	; 0x08
     636:	f9 85       	ldd	r31, Y+9	; 0x09
     638:	04 80       	ldd	r0, Z+4	; 0x04
     63a:	f5 81       	ldd	r31, Z+5	; 0x05
     63c:	e0 2d       	mov	r30, r0
     63e:	32 96       	adiw	r30, 0x02	; 2
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ec 0f       	add	r30, r28
     646:	fd 1f       	adc	r31, r29
     648:	00 81       	ld	r16, Z
     64a:	11 81       	ldd	r17, Z+1	; 0x01
     64c:	c1 2c       	mov	r12, r1
     64e:	d1 2c       	mov	r13, r1
     650:	58 eb       	ldi	r21, 0xB8	; 184
     652:	e5 2e       	mov	r14, r21
     654:	54 e0       	ldi	r21, 0x04	; 4
     656:	f5 2e       	mov	r15, r21
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	a9 01       	movw	r20, r18
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	cb 01       	movw	r24, r22
     664:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
		ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);					// Print new value to screen
     668:	08 85       	ldd	r16, Y+8	; 0x08
     66a:	19 85       	ldd	r17, Y+9	; 0x09
     66c:	d8 01       	movw	r26, r16
     66e:	14 96       	adiw	r26, 0x04	; 4
     670:	ed 91       	ld	r30, X+
     672:	fc 91       	ld	r31, X
     674:	15 97       	sbiw	r26, 0x05	; 5
     676:	32 96       	adiw	r30, 0x02	; 2
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ec 0f       	add	r30, r28
     67e:	fd 1f       	adc	r31, r29
     680:	01 90       	ld	r0, Z+
     682:	f0 81       	ld	r31, Z
     684:	e0 2d       	mov	r30, r0
     686:	c0 84       	ldd	r12, Z+8	; 0x08
     688:	d1 84       	ldd	r13, Z+9	; 0x09
     68a:	75 e2       	ldi	r23, 0x25	; 37
     68c:	e7 2e       	mov	r14, r23
     68e:	72 e0       	ldi	r23, 0x02	; 2
     690:	f7 2e       	mov	r15, r23
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	a9 01       	movw	r20, r18
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	cb 01       	movw	r24, r22
     69e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
	}
	
	// Up
	if(!(PINB-P4-P7)){
     6a2:	83 b1       	in	r24, 0x03	; 3
     6a4:	80 39       	cpi	r24, 0x90	; 144
     6a6:	09 f0       	breq	.+2      	; 0x6aa <joystickCrossways+0x166>
     6a8:	61 cf       	rjmp	.-318    	; 0x56c <joystickCrossways+0x28>
		ASYNC(SELECTED_PGEN, increaseFrequency, 1);
     6aa:	e8 85       	ldd	r30, Y+8	; 0x08
     6ac:	f9 85       	ldd	r31, Y+9	; 0x09
     6ae:	04 80       	ldd	r0, Z+4	; 0x04
     6b0:	f5 81       	ldd	r31, Z+5	; 0x05
     6b2:	e0 2d       	mov	r30, r0
     6b4:	32 96       	adiw	r30, 0x02	; 2
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ec 0f       	add	r30, r28
     6bc:	fd 1f       	adc	r31, r29
     6be:	00 81       	ld	r16, Z
     6c0:	11 81       	ldd	r17, Z+1	; 0x01
     6c2:	cc 24       	eor	r12, r12
     6c4:	c3 94       	inc	r12
     6c6:	d1 2c       	mov	r13, r1
     6c8:	91 ea       	ldi	r25, 0xA1	; 161
     6ca:	e9 2e       	mov	r14, r25
     6cc:	94 e0       	ldi	r25, 0x04	; 4
     6ce:	f9 2e       	mov	r15, r25
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	a9 01       	movw	r20, r18
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	cb 01       	movw	r24, r22
     6dc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
		ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);
     6e0:	08 85       	ldd	r16, Y+8	; 0x08
     6e2:	19 85       	ldd	r17, Y+9	; 0x09
     6e4:	d8 01       	movw	r26, r16
     6e6:	14 96       	adiw	r26, 0x04	; 4
     6e8:	ed 91       	ld	r30, X+
     6ea:	fc 91       	ld	r31, X
     6ec:	15 97       	sbiw	r26, 0x05	; 5
     6ee:	32 96       	adiw	r30, 0x02	; 2
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ec 0f       	add	r30, r28
     6f6:	fd 1f       	adc	r31, r29
     6f8:	01 90       	ld	r0, Z+
     6fa:	f0 81       	ld	r31, Z
     6fc:	e0 2d       	mov	r30, r0
     6fe:	c0 84       	ldd	r12, Z+8	; 0x08
     700:	d1 84       	ldd	r13, Z+9	; 0x09
     702:	35 e2       	ldi	r19, 0x25	; 37
     704:	e3 2e       	mov	r14, r19
     706:	32 e0       	ldi	r19, 0x02	; 2
     708:	f3 2e       	mov	r15, r19
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	a9 01       	movw	r20, r18
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	cb 01       	movw	r24, r22
     716:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
			
		AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
     71a:	65 01       	movw	r12, r10
     71c:	b6 e9       	ldi	r27, 0x96	; 150
     71e:	cb 0e       	add	r12, r27
     720:	d1 1c       	adc	r13, r1
     722:	2d e7       	ldi	r18, 0x7D	; 125
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	d6 01       	movw	r26, r12
     728:	0e 94 33 11 	call	0x2266	; 0x2266 <__usmulhisi3>
     72c:	97 fd       	sbrc	r25, 7
     72e:	18 c0       	rjmp	.+48     	; 0x760 <joystickCrossways+0x21c>
     730:	95 95       	asr	r25
     732:	87 95       	ror	r24
     734:	77 95       	ror	r23
     736:	67 95       	ror	r22
     738:	95 95       	asr	r25
     73a:	87 95       	ror	r24
     73c:	77 95       	ror	r23
     73e:	67 95       	ror	r22
     740:	a2 ea       	ldi	r26, 0xA2	; 162
     742:	ea 2e       	mov	r14, r26
     744:	a2 e0       	ldi	r26, 0x02	; 2
     746:	fa 2e       	mov	r15, r26
     748:	8e 01       	movw	r16, r28
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	a9 01       	movw	r20, r18
     750:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
     754:	0b cf       	rjmp	.-490    	; 0x56c <joystickCrossways+0x28>
	// Down
	if(!(PINB-P4-P6)){
		ASYNC(SELECTED_PGEN, increaseFrequency, -1);
		ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);
		
		AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
     756:	6d 5f       	subi	r22, 0xFD	; 253
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	8f 4f       	sbci	r24, 0xFF	; 255
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	57 cf       	rjmp	.-338    	; 0x60e <joystickCrossways+0xca>
	// Up
	if(!(PINB-P4-P7)){
		ASYNC(SELECTED_PGEN, increaseFrequency, 1);
		ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);
			
		AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
     760:	6d 5f       	subi	r22, 0xFD	; 253
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	8f 4f       	sbci	r24, 0xFF	; 255
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	e3 cf       	rjmp	.-58     	; 0x730 <joystickCrossways+0x1ec>

0000076a <initialize>:





void initialize(InputHandler *self){
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
	SYNC(self->gui, initLCD, NULL);
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	61 e5       	ldi	r22, 0x51	; 81
     782:	72 e0       	ldi	r23, 0x02	; 2
     784:	88 85       	ldd	r24, Y+8	; 0x08
     786:	99 85       	ldd	r25, Y+9	; 0x09
     788:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
	ASYNC(self->pGen[0], generatePulse, 0);
     78c:	0c 81       	ldd	r16, Y+4	; 0x04
     78e:	1d 81       	ldd	r17, Y+5	; 0x05
     790:	c1 2c       	mov	r12, r1
     792:	d1 2c       	mov	r13, r1
     794:	85 e3       	ldi	r24, 0x35	; 53
     796:	e8 2e       	mov	r14, r24
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	f8 2e       	mov	r15, r24
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	a9 01       	movw	r20, r18
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	cb 01       	movw	r24, r22
     7a8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
	ASYNC(self->pGen[1], generatePulse, 0);
     7ac:	0e 81       	ldd	r16, Y+6	; 0x06
     7ae:	1f 81       	ldd	r17, Y+7	; 0x07
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	a9 01       	movw	r20, r18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	08 95       	ret

000007d2 <joystickSideways>:
	
}



void joystickSideways(InputHandler *self, int arg){
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
	
	if(self->risingEdge){
     7de:	fc 01       	movw	r30, r24
     7e0:	22 85       	ldd	r18, Z+10	; 0x0a
     7e2:	21 11       	cpse	r18, r1
     7e4:	0a c0       	rjmp	.+20     	; 0x7fa <joystickSideways+0x28>
		self->risingEdge = false;
		ASYNC(self->gui, switchFocus, arg);
	}else{
		self->risingEdge = true;
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	fc 01       	movw	r30, r24
     7ea:	22 87       	std	Z+10, r18	; 0x0a
	}
	
}
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	df 90       	pop	r13
     7f6:	cf 90       	pop	r12
     7f8:	08 95       	ret
     7fa:	6b 01       	movw	r12, r22


void joystickSideways(InputHandler *self, int arg){
	
	if(self->risingEdge){
		self->risingEdge = false;
     7fc:	12 86       	std	Z+10, r1	; 0x0a
		ASYNC(self->gui, switchFocus, arg);
     7fe:	00 85       	ldd	r16, Z+8	; 0x08
     800:	11 85       	ldd	r17, Z+9	; 0x09
     802:	89 e8       	ldi	r24, 0x89	; 137
     804:	e8 2e       	mov	r14, r24
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	f8 2e       	mov	r15, r24
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	a9 01       	movw	r20, r18
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	cb 01       	movw	r24, r22
     816:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
	}else{
		self->risingEdge = true;
	}
	
}
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	08 95       	ret

00000828 <main>:

int main(void)
{
	

	INSTALL(&inputHandler, joystickCrossways, IRQ_PCINT1);	// Up, Down & Depressed
     828:	42 e0       	ldi	r20, 0x02	; 2
     82a:	62 ea       	ldi	r22, 0xA2	; 162
     82c:	72 e0       	ldi	r23, 0x02	; 2
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <install>
	INSTALL(&inputHandler, joystickSideways, IRQ_PCINT0);	// Left & Right
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	69 ee       	ldi	r22, 0xE9	; 233
     83a:	73 e0       	ldi	r23, 0x03	; 3
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <install>
	
	return TINYTIMBER(&inputHandler, initialize, NULL);
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	65 eb       	ldi	r22, 0xB5	; 181
     84a:	73 e0       	ldi	r23, 0x03	; 3
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <tinytimber>

00000854 <writeToPin>:
	Object super;
} PortWriter;


void writeToPin(PortWriter *self, int args[]){
	PINE = (args[0] << args[1]);
     854:	fb 01       	movw	r30, r22
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	02 80       	ldd	r0, Z+2	; 0x02
     85c:	02 c0       	rjmp	.+4      	; 0x862 <writeToPin+0xe>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <writeToPin+0xa>
     866:	8c b9       	out	0x0c, r24	; 12
     868:	08 95       	ret

0000086a <generatePulse>:
	}
	
}


void generatePulse(PulseGenerator *self, int bl){
     86a:	8f 92       	push	r8
     86c:	9f 92       	push	r9
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	00 d0       	rcall	.+0      	; 0x884 <generatePulse+0x1a>
     884:	00 d0       	rcall	.+0      	; 0x886 <generatePulse+0x1c>
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	5c 01       	movw	r10, r24
     88c:	4b 01       	movw	r8, r22
	self->isHigh = !self->isHigh;
     88e:	fc 01       	movw	r30, r24
     890:	94 85       	ldd	r25, Z+12	; 0x0c
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 27       	eor	r24, r25
     896:	84 87       	std	Z+12, r24	; 0x0c
	int temp[] = {self->isHigh, self->pin};
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	9a 83       	std	Y+2, r25	; 0x02
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	86 81       	ldd	r24, Z+6	; 0x06
     8a0:	97 81       	ldd	r25, Z+7	; 0x07
     8a2:	9c 83       	std	Y+4, r25	; 0x04
     8a4:	8b 83       	std	Y+3, r24	; 0x03
	ASYNC(self->pWriter, writeToPin, temp);
     8a6:	04 81       	ldd	r16, Z+4	; 0x04
     8a8:	15 81       	ldd	r17, Z+5	; 0x05
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	6c 01       	movw	r12, r24
     8b0:	4a e2       	ldi	r20, 0x2A	; 42
     8b2:	e4 2e       	mov	r14, r20
     8b4:	44 e0       	ldi	r20, 0x04	; 4
     8b6:	f4 2e       	mov	r15, r20
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	a9 01       	movw	r20, r18
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	cb 01       	movw	r24, r22
     8c4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
	
	AFTER(MSEC(bl+self->frequency*500), self, generatePulse, bl+self->frequency*500);	
     8c8:	f5 01       	movw	r30, r10
     8ca:	20 85       	ldd	r18, Z+8	; 0x08
     8cc:	31 85       	ldd	r19, Z+9	; 0x09
     8ce:	84 ef       	ldi	r24, 0xF4	; 244
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	28 9f       	mul	r18, r24
     8d4:	60 01       	movw	r12, r0
     8d6:	29 9f       	mul	r18, r25
     8d8:	d0 0c       	add	r13, r0
     8da:	38 9f       	mul	r19, r24
     8dc:	d0 0c       	add	r13, r0
     8de:	11 24       	eor	r1, r1
     8e0:	c8 0c       	add	r12, r8
     8e2:	d9 1c       	adc	r13, r9
     8e4:	2d e7       	ldi	r18, 0x7D	; 125
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	d6 01       	movw	r26, r12
     8ea:	0e 94 33 11 	call	0x2266	; 0x2266 <__usmulhisi3>
     8ee:	97 fd       	sbrc	r25, 7
     8f0:	23 c0       	rjmp	.+70     	; 0x938 <generatePulse+0xce>
     8f2:	95 95       	asr	r25
     8f4:	87 95       	ror	r24
     8f6:	77 95       	ror	r23
     8f8:	67 95       	ror	r22
     8fa:	95 95       	asr	r25
     8fc:	87 95       	ror	r24
     8fe:	77 95       	ror	r23
     900:	67 95       	ror	r22
     902:	35 e3       	ldi	r19, 0x35	; 53
     904:	e3 2e       	mov	r14, r19
     906:	34 e0       	ldi	r19, 0x04	; 4
     908:	f3 2e       	mov	r15, r19
     90a:	85 01       	movw	r16, r10
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	a9 01       	movw	r20, r18
     912:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
}
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	df 90       	pop	r13
     92c:	cf 90       	pop	r12
     92e:	bf 90       	pop	r11
     930:	af 90       	pop	r10
     932:	9f 90       	pop	r9
     934:	8f 90       	pop	r8
     936:	08 95       	ret
void generatePulse(PulseGenerator *self, int bl){
	self->isHigh = !self->isHigh;
	int temp[] = {self->isHigh, self->pin};
	ASYNC(self->pWriter, writeToPin, temp);
	
	AFTER(MSEC(bl+self->frequency*500), self, generatePulse, bl+self->frequency*500);	
     938:	6d 5f       	subi	r22, 0xFD	; 253
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	8f 4f       	sbci	r24, 0xFF	; 255
     93e:	9f 4f       	sbci	r25, 0xFF	; 255
     940:	d8 cf       	rjmp	.-80     	; 0x8f2 <generatePulse+0x88>

00000942 <increaseFrequency>:



void increaseFrequency(PulseGenerator *self, int amount){
	
	self->frequency += amount;
     942:	fc 01       	movw	r30, r24
     944:	20 85       	ldd	r18, Z+8	; 0x08
     946:	31 85       	ldd	r19, Z+9	; 0x09
     948:	62 0f       	add	r22, r18
     94a:	73 1f       	adc	r23, r19
	
	if(self->frequency < 0) { self->frequency =  0; }
     94c:	77 fd       	sbrc	r23, 7
     94e:	09 c0       	rjmp	.+18     	; 0x962 <increaseFrequency+0x20>
	if(self->frequency > 99){ self->frequency = 99; }
     950:	64 36       	cpi	r22, 0x64	; 100
     952:	71 05       	cpc	r23, r1
     954:	4c f0       	brlt	.+18     	; 0x968 <increaseFrequency+0x26>
     956:	23 e6       	ldi	r18, 0x63	; 99
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	fc 01       	movw	r30, r24
     95c:	31 87       	std	Z+9, r19	; 0x09
     95e:	20 87       	std	Z+8, r18	; 0x08
     960:	08 95       	ret

void increaseFrequency(PulseGenerator *self, int amount){
	
	self->frequency += amount;
	
	if(self->frequency < 0) { self->frequency =  0; }
     962:	11 86       	std	Z+9, r1	; 0x09
     964:	10 86       	std	Z+8, r1	; 0x08
     966:	08 95       	ret



void increaseFrequency(PulseGenerator *self, int amount){
	
	self->frequency += amount;
     968:	fc 01       	movw	r30, r24
     96a:	71 87       	std	Z+9, r23	; 0x09
     96c:	60 87       	std	Z+8, r22	; 0x08
     96e:	08 95       	ret

00000970 <saveOrLoadFrequency>:
	if(self->frequency < 0) { self->frequency =  0; }
	if(self->frequency > 99){ self->frequency = 99; }
}


void saveOrLoadFrequency(PulseGenerator *self){
     970:	fc 01       	movw	r30, r24
	
	if (self->frequency == 0)
     972:	80 85       	ldd	r24, Z+8	; 0x08
     974:	91 85       	ldd	r25, Z+9	; 0x09
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	19 f0       	breq	.+6      	; 0x980 <saveOrLoadFrequency+0x10>
	{
		self->frequency = self->savedFreq;
	}
	else{
		self->savedFreq = self->frequency; 
     97a:	93 87       	std	Z+11, r25	; 0x0b
     97c:	82 87       	std	Z+10, r24	; 0x0a
     97e:	08 95       	ret

void saveOrLoadFrequency(PulseGenerator *self){
	
	if (self->frequency == 0)
	{
		self->frequency = self->savedFreq;
     980:	82 85       	ldd	r24, Z+10	; 0x0a
     982:	93 85       	ldd	r25, Z+11	; 0x0b
     984:	91 87       	std	Z+9, r25	; 0x09
     986:	80 87       	std	Z+8, r24	; 0x08
     988:	08 95       	ret

0000098a <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	00 d0       	rcall	.+0      	; 0x990 <initialize+0x6>
     990:	00 d0       	rcall	.+0      	; 0x992 <initialize+0x8>
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	8d e2       	ldi	r24, 0x2D	; 45
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	2d e0       	ldi	r18, 0x0D	; 13
     99c:	33 e0       	ldi	r19, 0x03	; 3
     99e:	fc 01       	movw	r30, r24
     9a0:	70 97       	sbiw	r30, 0x10	; 16
     9a2:	91 83       	std	Z+1, r25	; 0x01
     9a4:	80 83       	st	Z, r24
     9a6:	40 96       	adiw	r24, 0x10	; 16
     9a8:	82 17       	cp	r24, r18
     9aa:	93 07       	cpc	r25, r19
     9ac:	c1 f7       	brne	.-16     	; 0x99e <initialize+0x14>
     9ae:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <messages+0xe1>
     9b2:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <messages+0xe0>
     9b6:	e8 e6       	ldi	r30, 0x68	; 104
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	85 e8       	ldi	r24, 0x85	; 133
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
     9c2:	82 ea       	ldi	r24, 0xA2	; 162
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	96 8f       	std	Z+30, r25	; 0x1e
     9c8:	85 8f       	std	Z+29, r24	; 0x1d
     9ca:	af eb       	ldi	r26, 0xBF	; 191
     9cc:	b1 e0       	ldi	r27, 0x01	; 1
     9ce:	b3 af       	std	Z+59, r27	; 0x3b
     9d0:	a2 af       	std	Z+58, r26	; 0x3a
     9d2:	1d 92       	st	X+, r1
     9d4:	1c 92       	st	X, r1
     9d6:	fa 83       	std	Y+2, r31	; 0x02
     9d8:	e9 83       	std	Y+1, r30	; 0x01
     9da:	e9 e6       	ldi	r30, 0x69	; 105
     9dc:	f3 e0       	ldi	r31, 0x03	; 3
     9de:	fc 83       	std	Y+4, r31	; 0x04
     9e0:	eb 83       	std	Y+3, r30	; 0x03
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	06 96       	adiw	r24, 0x06	; 6
     9e8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <setjmp>
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	9c 81       	ldd	r25, Y+4	; 0x04
     9f0:	e9 81       	ldd	r30, Y+1	; 0x01
     9f2:	fa 81       	ldd	r31, Y+2	; 0x02
     9f4:	97 8b       	std	Z+23, r25	; 0x17
     9f6:	86 8b       	std	Z+22, r24	; 0x16
     9f8:	91 8f       	std	Z+25, r25	; 0x19
     9fa:	80 8f       	std	Z+24, r24	; 0x18
     9fc:	88 e6       	ldi	r24, 0x68	; 104
     9fe:	90 e1       	ldi	r25, 0x10	; 16
     a00:	94 8f       	std	Z+28, r25	; 0x1c
     a02:	83 8f       	std	Z+27, r24	; 0x1b
     a04:	15 82       	std	Z+5, r1	; 0x05
     a06:	14 82       	std	Z+4, r1	; 0x04
     a08:	7d 96       	adiw	r30, 0x1d	; 29
     a0a:	fa 83       	std	Y+2, r31	; 0x02
     a0c:	e9 83       	std	Y+1, r30	; 0x01
     a0e:	eb 81       	ldd	r30, Y+3	; 0x03
     a10:	fc 81       	ldd	r31, Y+4	; 0x04
     a12:	e0 5a       	subi	r30, 0xA0	; 160
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	fc 83       	std	Y+4, r31	; 0x04
     a18:	eb 83       	std	Y+3, r30	; 0x03
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	8c 5d       	subi	r24, 0xDC	; 220
     a20:	91 40       	sbci	r25, 0x01	; 1
     a22:	f9 f6       	brne	.-66     	; 0x9e2 <initialize+0x58>
     a24:	e0 e0       	ldi	r30, 0x00	; 0
     a26:	f2 e0       	ldi	r31, 0x02	; 2
     a28:	11 82       	std	Z+1, r1	; 0x01
     a2a:	10 82       	st	Z, r1
     a2c:	15 82       	std	Z+5, r1	; 0x05
     a2e:	14 82       	std	Z+4, r1	; 0x04
     a30:	13 82       	std	Z+3, r1	; 0x03
     a32:	12 82       	std	Z+2, r1	; 0x02
     a34:	e1 e6       	ldi	r30, 0x61	; 97
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 e8       	ldi	r24, 0x80	; 128
     a3a:	80 83       	st	Z, r24
     a3c:	10 82       	st	Z, r1
     a3e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a42:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <dispatch>:
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <dispatch+0x6>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
     a6e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
     a72:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
     a76:	06 96       	adiw	r24, 0x06	; 6
     a78:	0e 94 5d 11 	call	0x22ba	; 0x22ba <setjmp>
     a7c:	89 2b       	or	r24, r25
     a7e:	29 f0       	breq	.+10     	; 0xa8a <dispatch+0x2a>
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	9a 81       	ldd	r25, Y+2	; 0x02
     a8e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <current+0x1>
     a92:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <current>
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	06 96       	adiw	r24, 0x06	; 6
     a9c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <longjmp>

00000aa0 <schedule>:
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <msgQ>
     aac:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <msgQ+0x1>
     ab0:	30 97       	sbiw	r30, 0x00	; 0
     ab2:	f1 f0       	breq	.+60     	; 0xaf0 <schedule+0x50>
     ab4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <threadPool>
     ab8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <threadPool+0x1>
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	c1 f0       	breq	.+48     	; 0xaf0 <schedule+0x50>
     ac0:	c0 91 2a 01 	lds	r28, 0x012A	; 0x80012a <activeStack>
     ac4:	d0 91 2b 01 	lds	r29, 0x012B	; 0x80012b <activeStack+0x1>
     ac8:	aa 81       	ldd	r26, Y+2	; 0x02
     aca:	bb 81       	ldd	r27, Y+3	; 0x03
     acc:	10 97       	sbiw	r26, 0x00	; 0
     ace:	a9 f0       	breq	.+42     	; 0xafa <schedule+0x5a>
     ad0:	46 81       	ldd	r20, Z+6	; 0x06
     ad2:	57 81       	ldd	r21, Z+7	; 0x07
     ad4:	60 85       	ldd	r22, Z+8	; 0x08
     ad6:	71 85       	ldd	r23, Z+9	; 0x09
     ad8:	16 96       	adiw	r26, 0x06	; 6
     ada:	0d 91       	ld	r16, X+
     adc:	1d 91       	ld	r17, X+
     ade:	2d 91       	ld	r18, X+
     ae0:	3c 91       	ld	r19, X
     ae2:	19 97       	sbiw	r26, 0x09	; 9
     ae4:	40 1b       	sub	r20, r16
     ae6:	51 0b       	sbc	r21, r17
     ae8:	62 0b       	sbc	r22, r18
     aea:	73 0b       	sbc	r23, r19
     aec:	77 fd       	sbrc	r23, 7
     aee:	05 c0       	rjmp	.+10     	; 0xafa <schedule+0x5a>
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret
     afa:	fc 01       	movw	r30, r24
     afc:	20 81       	ld	r18, Z
     afe:	31 81       	ldd	r19, Z+1	; 0x01
     b00:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <threadPool+0x1>
     b04:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <threadPool>
     b08:	d1 83       	std	Z+1, r29	; 0x01
     b0a:	c0 83       	st	Z, r28
     b0c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <activeStack+0x1>
     b10:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <activeStack>
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <dispatch>

00000b20 <dequeue.part.0>:
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     b26:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     b2a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	83 bf       	out	0x33, r24	; 51
     b32:	88 95       	sleep
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <dequeue.part.0+0x10>

00000b36 <__vector_1>:
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
     b5c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
     b60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b68:	c9 01       	movw	r24, r18
     b6a:	03 2e       	mov	r0, r19
     b6c:	00 0c       	add	r0, r0
     b6e:	aa 0b       	sbc	r26, r26
     b70:	bb 0b       	sbc	r27, r27
     b72:	dc 01       	movw	r26, r24
     b74:	99 27       	eor	r25, r25
     b76:	88 27       	eor	r24, r24
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	84 2b       	or	r24, r20
     b7e:	95 2b       	or	r25, r21
     b80:	a6 2b       	or	r26, r22
     b82:	b7 2b       	or	r27, r23
     b84:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     b88:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     b8c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     b90:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     b94:	b0 9b       	sbis	0x16, 0	; 22
     b96:	1b c0       	rjmp	.+54     	; 0xbce <__vector_1+0x98>
     b98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ba0:	c9 01       	movw	r24, r18
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	09 2e       	mov	r0, r25
     ba6:	00 0c       	add	r0, r0
     ba8:	aa 0b       	sbc	r26, r26
     baa:	bb 0b       	sbc	r27, r27
     bac:	dc 01       	movw	r26, r24
     bae:	99 27       	eor	r25, r25
     bb0:	88 27       	eor	r24, r24
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	84 2b       	or	r24, r20
     bb8:	95 2b       	or	r25, r21
     bba:	a6 2b       	or	r26, r22
     bbc:	b7 2b       	or	r27, r23
     bbe:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     bc2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     bc6:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     bca:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     bce:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable>
     bd2:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1>
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	39 f0       	breq	.+14     	; 0xbe8 <__vector_1+0xb2>
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable>
     be2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1>
     be6:	09 95       	icall
     be8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_2>:
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
     c34:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
     c38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c40:	c9 01       	movw	r24, r18
     c42:	03 2e       	mov	r0, r19
     c44:	00 0c       	add	r0, r0
     c46:	aa 0b       	sbc	r26, r26
     c48:	bb 0b       	sbc	r27, r27
     c4a:	dc 01       	movw	r26, r24
     c4c:	99 27       	eor	r25, r25
     c4e:	88 27       	eor	r24, r24
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	84 2b       	or	r24, r20
     c56:	95 2b       	or	r25, r21
     c58:	a6 2b       	or	r26, r22
     c5a:	b7 2b       	or	r27, r23
     c5c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     c60:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     c64:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     c68:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     c6c:	b0 9b       	sbis	0x16, 0	; 22
     c6e:	1b c0       	rjmp	.+54     	; 0xca6 <__vector_2+0x98>
     c70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c78:	c9 01       	movw	r24, r18
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	09 2e       	mov	r0, r25
     c7e:	00 0c       	add	r0, r0
     c80:	aa 0b       	sbc	r26, r26
     c82:	bb 0b       	sbc	r27, r27
     c84:	dc 01       	movw	r26, r24
     c86:	99 27       	eor	r25, r25
     c88:	88 27       	eor	r24, r24
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	84 2b       	or	r24, r20
     c90:	95 2b       	or	r25, r21
     c92:	a6 2b       	or	r26, r22
     c94:	b7 2b       	or	r27, r23
     c96:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     c9a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     c9e:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     ca2:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     ca6:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x2>
     caa:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x3>
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <__vector_2+0xb2>
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x2>
     cba:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x3>
     cbe:	09 95       	icall
     cc0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <__vector_3>:
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	6f 93       	push	r22
     cfa:	7f 93       	push	r23
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	ef 93       	push	r30
     d06:	ff 93       	push	r31
     d08:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
     d0c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
     d10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d18:	c9 01       	movw	r24, r18
     d1a:	03 2e       	mov	r0, r19
     d1c:	00 0c       	add	r0, r0
     d1e:	aa 0b       	sbc	r26, r26
     d20:	bb 0b       	sbc	r27, r27
     d22:	dc 01       	movw	r26, r24
     d24:	99 27       	eor	r25, r25
     d26:	88 27       	eor	r24, r24
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	84 2b       	or	r24, r20
     d2e:	95 2b       	or	r25, r21
     d30:	a6 2b       	or	r26, r22
     d32:	b7 2b       	or	r27, r23
     d34:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     d38:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     d3c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     d40:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     d44:	b0 9b       	sbis	0x16, 0	; 22
     d46:	1b c0       	rjmp	.+54     	; 0xd7e <__vector_3+0x98>
     d48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d50:	c9 01       	movw	r24, r18
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	09 2e       	mov	r0, r25
     d56:	00 0c       	add	r0, r0
     d58:	aa 0b       	sbc	r26, r26
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	dc 01       	movw	r26, r24
     d5e:	99 27       	eor	r25, r25
     d60:	88 27       	eor	r24, r24
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	84 2b       	or	r24, r20
     d68:	95 2b       	or	r25, r21
     d6a:	a6 2b       	or	r26, r22
     d6c:	b7 2b       	or	r27, r23
     d6e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     d72:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     d76:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     d7a:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     d7e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x4>
     d82:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x5>
     d86:	30 97       	sbiw	r30, 0x00	; 0
     d88:	39 f0       	breq	.+14     	; 0xd98 <__vector_3+0xb2>
     d8a:	62 e0       	ldi	r22, 0x02	; 2
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x4>
     d92:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x5>
     d96:	09 95       	icall
     d98:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__vector_4>:
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	2f 93       	push	r18
     dca:	3f 93       	push	r19
     dcc:	4f 93       	push	r20
     dce:	5f 93       	push	r21
     dd0:	6f 93       	push	r22
     dd2:	7f 93       	push	r23
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
     ddc:	ef 93       	push	r30
     dde:	ff 93       	push	r31
     de0:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
     de4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
     de8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     df0:	c9 01       	movw	r24, r18
     df2:	03 2e       	mov	r0, r19
     df4:	00 0c       	add	r0, r0
     df6:	aa 0b       	sbc	r26, r26
     df8:	bb 0b       	sbc	r27, r27
     dfa:	dc 01       	movw	r26, r24
     dfc:	99 27       	eor	r25, r25
     dfe:	88 27       	eor	r24, r24
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	84 2b       	or	r24, r20
     e06:	95 2b       	or	r25, r21
     e08:	a6 2b       	or	r26, r22
     e0a:	b7 2b       	or	r27, r23
     e0c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     e10:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     e14:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     e18:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     e1c:	b0 9b       	sbis	0x16, 0	; 22
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <__vector_4+0x98>
     e20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e28:	c9 01       	movw	r24, r18
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	09 2e       	mov	r0, r25
     e2e:	00 0c       	add	r0, r0
     e30:	aa 0b       	sbc	r26, r26
     e32:	bb 0b       	sbc	r27, r27
     e34:	dc 01       	movw	r26, r24
     e36:	99 27       	eor	r25, r25
     e38:	88 27       	eor	r24, r24
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	84 2b       	or	r24, r20
     e40:	95 2b       	or	r25, r21
     e42:	a6 2b       	or	r26, r22
     e44:	b7 2b       	or	r27, r23
     e46:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     e4a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     e4e:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     e52:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     e56:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x6>
     e5a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x7>
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	39 f0       	breq	.+14     	; 0xe70 <__vector_4+0xb2>
     e62:	63 e0       	ldi	r22, 0x03	; 3
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x6>
     e6a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x7>
     e6e:	09 95       	icall
     e70:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_5>:
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
     eb8:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
     ebc:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
     ec0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ec4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ec8:	c9 01       	movw	r24, r18
     eca:	03 2e       	mov	r0, r19
     ecc:	00 0c       	add	r0, r0
     ece:	aa 0b       	sbc	r26, r26
     ed0:	bb 0b       	sbc	r27, r27
     ed2:	dc 01       	movw	r26, r24
     ed4:	99 27       	eor	r25, r25
     ed6:	88 27       	eor	r24, r24
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	84 2b       	or	r24, r20
     ede:	95 2b       	or	r25, r21
     ee0:	a6 2b       	or	r26, r22
     ee2:	b7 2b       	or	r27, r23
     ee4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     ee8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     eec:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     ef0:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     ef4:	b0 9b       	sbis	0x16, 0	; 22
     ef6:	1b c0       	rjmp	.+54     	; 0xf2e <__vector_5+0x98>
     ef8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     efc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f00:	c9 01       	movw	r24, r18
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	09 2e       	mov	r0, r25
     f06:	00 0c       	add	r0, r0
     f08:	aa 0b       	sbc	r26, r26
     f0a:	bb 0b       	sbc	r27, r27
     f0c:	dc 01       	movw	r26, r24
     f0e:	99 27       	eor	r25, r25
     f10:	88 27       	eor	r24, r24
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	84 2b       	or	r24, r20
     f18:	95 2b       	or	r25, r21
     f1a:	a6 2b       	or	r26, r22
     f1c:	b7 2b       	or	r27, r23
     f1e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     f22:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     f26:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     f2a:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     f2e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x8>
     f32:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x9>
     f36:	30 97       	sbiw	r30, 0x00	; 0
     f38:	39 f0       	breq	.+14     	; 0xf48 <__vector_5+0xb2>
     f3a:	64 e0       	ldi	r22, 0x04	; 4
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x8>
     f42:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x9>
     f46:	09 95       	icall
     f48:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_10>:
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
     f90:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
     f94:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
     f98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fa0:	c9 01       	movw	r24, r18
     fa2:	03 2e       	mov	r0, r19
     fa4:	00 0c       	add	r0, r0
     fa6:	aa 0b       	sbc	r26, r26
     fa8:	bb 0b       	sbc	r27, r27
     faa:	dc 01       	movw	r26, r24
     fac:	99 27       	eor	r25, r25
     fae:	88 27       	eor	r24, r24
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	84 2b       	or	r24, r20
     fb6:	95 2b       	or	r25, r21
     fb8:	a6 2b       	or	r26, r22
     fba:	b7 2b       	or	r27, r23
     fbc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     fc0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     fc4:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
     fc8:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
     fcc:	b0 9b       	sbis	0x16, 0	; 22
     fce:	1b c0       	rjmp	.+54     	; 0x1006 <__vector_10+0x98>
     fd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fd8:	c9 01       	movw	r24, r18
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	09 2e       	mov	r0, r25
     fde:	00 0c       	add	r0, r0
     fe0:	aa 0b       	sbc	r26, r26
     fe2:	bb 0b       	sbc	r27, r27
     fe4:	dc 01       	movw	r26, r24
     fe6:	99 27       	eor	r25, r25
     fe8:	88 27       	eor	r24, r24
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	84 2b       	or	r24, r20
     ff0:	95 2b       	or	r25, r21
     ff2:	a6 2b       	or	r26, r22
     ff4:	b7 2b       	or	r27, r23
     ff6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
     ffa:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
     ffe:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1002:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1006:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xa>
    100a:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xb>
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	39 f0       	breq	.+14     	; 0x1020 <__vector_10+0xb2>
    1012:	65 e0       	ldi	r22, 0x05	; 5
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xa>
    101a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xb>
    101e:	09 95       	icall
    1020:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_11>:
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
    1068:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    106c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    1070:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1074:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1078:	c9 01       	movw	r24, r18
    107a:	03 2e       	mov	r0, r19
    107c:	00 0c       	add	r0, r0
    107e:	aa 0b       	sbc	r26, r26
    1080:	bb 0b       	sbc	r27, r27
    1082:	dc 01       	movw	r26, r24
    1084:	99 27       	eor	r25, r25
    1086:	88 27       	eor	r24, r24
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	84 2b       	or	r24, r20
    108e:	95 2b       	or	r25, r21
    1090:	a6 2b       	or	r26, r22
    1092:	b7 2b       	or	r27, r23
    1094:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1098:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    109c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    10a0:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    10a4:	b0 9b       	sbis	0x16, 0	; 22
    10a6:	1b c0       	rjmp	.+54     	; 0x10de <__vector_11+0x98>
    10a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10b0:	c9 01       	movw	r24, r18
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	09 2e       	mov	r0, r25
    10b6:	00 0c       	add	r0, r0
    10b8:	aa 0b       	sbc	r26, r26
    10ba:	bb 0b       	sbc	r27, r27
    10bc:	dc 01       	movw	r26, r24
    10be:	99 27       	eor	r25, r25
    10c0:	88 27       	eor	r24, r24
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	84 2b       	or	r24, r20
    10c8:	95 2b       	or	r25, r21
    10ca:	a6 2b       	or	r26, r22
    10cc:	b7 2b       	or	r27, r23
    10ce:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    10d2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    10d6:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    10da:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    10de:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0xc>
    10e2:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0xd>
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	39 f0       	breq	.+14     	; 0x10f8 <__vector_11+0xb2>
    10ea:	66 e0       	ldi	r22, 0x06	; 6
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0xc>
    10f2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0xd>
    10f6:	09 95       	icall
    10f8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_12>:
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	2f 93       	push	r18
    112a:	3f 93       	push	r19
    112c:	4f 93       	push	r20
    112e:	5f 93       	push	r21
    1130:	6f 93       	push	r22
    1132:	7f 93       	push	r23
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	af 93       	push	r26
    113a:	bf 93       	push	r27
    113c:	ef 93       	push	r30
    113e:	ff 93       	push	r31
    1140:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    1144:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    1148:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    114c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1150:	c9 01       	movw	r24, r18
    1152:	03 2e       	mov	r0, r19
    1154:	00 0c       	add	r0, r0
    1156:	aa 0b       	sbc	r26, r26
    1158:	bb 0b       	sbc	r27, r27
    115a:	dc 01       	movw	r26, r24
    115c:	99 27       	eor	r25, r25
    115e:	88 27       	eor	r24, r24
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	84 2b       	or	r24, r20
    1166:	95 2b       	or	r25, r21
    1168:	a6 2b       	or	r26, r22
    116a:	b7 2b       	or	r27, r23
    116c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1170:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1174:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1178:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    117c:	b0 9b       	sbis	0x16, 0	; 22
    117e:	1b c0       	rjmp	.+54     	; 0x11b6 <__vector_12+0x98>
    1180:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1184:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1188:	c9 01       	movw	r24, r18
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	09 2e       	mov	r0, r25
    118e:	00 0c       	add	r0, r0
    1190:	aa 0b       	sbc	r26, r26
    1192:	bb 0b       	sbc	r27, r27
    1194:	dc 01       	movw	r26, r24
    1196:	99 27       	eor	r25, r25
    1198:	88 27       	eor	r24, r24
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	84 2b       	or	r24, r20
    11a0:	95 2b       	or	r25, r21
    11a2:	a6 2b       	or	r26, r22
    11a4:	b7 2b       	or	r27, r23
    11a6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    11aa:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    11ae:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    11b2:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    11b6:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0xe>
    11ba:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0xf>
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <__vector_12+0xb2>
    11c2:	67 e0       	ldi	r22, 0x07	; 7
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0xe>
    11ca:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0xf>
    11ce:	09 95       	icall
    11d0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <__vector_13>:
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    1218:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    121c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    1220:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1224:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1228:	c9 01       	movw	r24, r18
    122a:	03 2e       	mov	r0, r19
    122c:	00 0c       	add	r0, r0
    122e:	aa 0b       	sbc	r26, r26
    1230:	bb 0b       	sbc	r27, r27
    1232:	dc 01       	movw	r26, r24
    1234:	99 27       	eor	r25, r25
    1236:	88 27       	eor	r24, r24
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	84 2b       	or	r24, r20
    123e:	95 2b       	or	r25, r21
    1240:	a6 2b       	or	r26, r22
    1242:	b7 2b       	or	r27, r23
    1244:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1248:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    124c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1250:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1254:	b0 9b       	sbis	0x16, 0	; 22
    1256:	1b c0       	rjmp	.+54     	; 0x128e <__vector_13+0x98>
    1258:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    125c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1260:	c9 01       	movw	r24, r18
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	09 2e       	mov	r0, r25
    1266:	00 0c       	add	r0, r0
    1268:	aa 0b       	sbc	r26, r26
    126a:	bb 0b       	sbc	r27, r27
    126c:	dc 01       	movw	r26, r24
    126e:	99 27       	eor	r25, r25
    1270:	88 27       	eor	r24, r24
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	84 2b       	or	r24, r20
    1278:	95 2b       	or	r25, r21
    127a:	a6 2b       	or	r26, r22
    127c:	b7 2b       	or	r27, r23
    127e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1282:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1286:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    128a:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    128e:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x10>
    1292:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x11>
    1296:	30 97       	sbiw	r30, 0x00	; 0
    1298:	39 f0       	breq	.+14     	; 0x12a8 <__vector_13+0xb2>
    129a:	68 e0       	ldi	r22, 0x08	; 8
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x10>
    12a2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x11>
    12a6:	09 95       	icall
    12a8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <__vector_14>:
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
    12f0:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    12f4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    12f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1300:	c9 01       	movw	r24, r18
    1302:	03 2e       	mov	r0, r19
    1304:	00 0c       	add	r0, r0
    1306:	aa 0b       	sbc	r26, r26
    1308:	bb 0b       	sbc	r27, r27
    130a:	dc 01       	movw	r26, r24
    130c:	99 27       	eor	r25, r25
    130e:	88 27       	eor	r24, r24
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	84 2b       	or	r24, r20
    1316:	95 2b       	or	r25, r21
    1318:	a6 2b       	or	r26, r22
    131a:	b7 2b       	or	r27, r23
    131c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1320:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1324:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1328:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    132c:	b0 9b       	sbis	0x16, 0	; 22
    132e:	1b c0       	rjmp	.+54     	; 0x1366 <__vector_14+0x98>
    1330:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1334:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1338:	c9 01       	movw	r24, r18
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	09 2e       	mov	r0, r25
    133e:	00 0c       	add	r0, r0
    1340:	aa 0b       	sbc	r26, r26
    1342:	bb 0b       	sbc	r27, r27
    1344:	dc 01       	movw	r26, r24
    1346:	99 27       	eor	r25, r25
    1348:	88 27       	eor	r24, r24
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	84 2b       	or	r24, r20
    1350:	95 2b       	or	r25, r21
    1352:	a6 2b       	or	r26, r22
    1354:	b7 2b       	or	r27, r23
    1356:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    135a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    135e:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1362:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1366:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x12>
    136a:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x13>
    136e:	30 97       	sbiw	r30, 0x00	; 0
    1370:	39 f0       	breq	.+14     	; 0x1380 <__vector_14+0xb2>
    1372:	69 e0       	ldi	r22, 0x09	; 9
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x12>
    137a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x13>
    137e:	09 95       	icall
    1380:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <__vector_15>:
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	11 24       	eor	r1, r1
    13b0:	2f 93       	push	r18
    13b2:	3f 93       	push	r19
    13b4:	4f 93       	push	r20
    13b6:	5f 93       	push	r21
    13b8:	6f 93       	push	r22
    13ba:	7f 93       	push	r23
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
    13c8:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    13cc:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    13d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13d8:	c9 01       	movw	r24, r18
    13da:	03 2e       	mov	r0, r19
    13dc:	00 0c       	add	r0, r0
    13de:	aa 0b       	sbc	r26, r26
    13e0:	bb 0b       	sbc	r27, r27
    13e2:	dc 01       	movw	r26, r24
    13e4:	99 27       	eor	r25, r25
    13e6:	88 27       	eor	r24, r24
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	84 2b       	or	r24, r20
    13ee:	95 2b       	or	r25, r21
    13f0:	a6 2b       	or	r26, r22
    13f2:	b7 2b       	or	r27, r23
    13f4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    13f8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    13fc:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1400:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1404:	b0 9b       	sbis	0x16, 0	; 22
    1406:	1b c0       	rjmp	.+54     	; 0x143e <__vector_15+0x98>
    1408:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    140c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1410:	c9 01       	movw	r24, r18
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	09 2e       	mov	r0, r25
    1416:	00 0c       	add	r0, r0
    1418:	aa 0b       	sbc	r26, r26
    141a:	bb 0b       	sbc	r27, r27
    141c:	dc 01       	movw	r26, r24
    141e:	99 27       	eor	r25, r25
    1420:	88 27       	eor	r24, r24
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	84 2b       	or	r24, r20
    1428:	95 2b       	or	r25, r21
    142a:	a6 2b       	or	r26, r22
    142c:	b7 2b       	or	r27, r23
    142e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1432:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1436:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    143a:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    143e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x14>
    1442:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x15>
    1446:	30 97       	sbiw	r30, 0x00	; 0
    1448:	39 f0       	breq	.+14     	; 0x1458 <__vector_15+0xb2>
    144a:	6a e0       	ldi	r22, 0x0A	; 10
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x14>
    1452:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x15>
    1456:	09 95       	icall
    1458:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_16>:
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
    14a0:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    14a4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    14a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14b0:	c9 01       	movw	r24, r18
    14b2:	03 2e       	mov	r0, r19
    14b4:	00 0c       	add	r0, r0
    14b6:	aa 0b       	sbc	r26, r26
    14b8:	bb 0b       	sbc	r27, r27
    14ba:	dc 01       	movw	r26, r24
    14bc:	99 27       	eor	r25, r25
    14be:	88 27       	eor	r24, r24
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	84 2b       	or	r24, r20
    14c6:	95 2b       	or	r25, r21
    14c8:	a6 2b       	or	r26, r22
    14ca:	b7 2b       	or	r27, r23
    14cc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    14d0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    14d4:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    14d8:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    14dc:	b0 9b       	sbis	0x16, 0	; 22
    14de:	1b c0       	rjmp	.+54     	; 0x1516 <__vector_16+0x98>
    14e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14e8:	c9 01       	movw	r24, r18
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	09 2e       	mov	r0, r25
    14ee:	00 0c       	add	r0, r0
    14f0:	aa 0b       	sbc	r26, r26
    14f2:	bb 0b       	sbc	r27, r27
    14f4:	dc 01       	movw	r26, r24
    14f6:	99 27       	eor	r25, r25
    14f8:	88 27       	eor	r24, r24
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	84 2b       	or	r24, r20
    1500:	95 2b       	or	r25, r21
    1502:	a6 2b       	or	r26, r22
    1504:	b7 2b       	or	r27, r23
    1506:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    150a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    150e:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1512:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1516:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x16>
    151a:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x17>
    151e:	30 97       	sbiw	r30, 0x00	; 0
    1520:	39 f0       	breq	.+14     	; 0x1530 <__vector_16+0xb2>
    1522:	6b e0       	ldi	r22, 0x0B	; 11
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x16>
    152a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x17>
    152e:	09 95       	icall
    1530:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_17>:
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	2f 93       	push	r18
    1562:	3f 93       	push	r19
    1564:	4f 93       	push	r20
    1566:	5f 93       	push	r21
    1568:	6f 93       	push	r22
    156a:	7f 93       	push	r23
    156c:	8f 93       	push	r24
    156e:	9f 93       	push	r25
    1570:	af 93       	push	r26
    1572:	bf 93       	push	r27
    1574:	ef 93       	push	r30
    1576:	ff 93       	push	r31
    1578:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    157c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    1580:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1584:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1588:	c9 01       	movw	r24, r18
    158a:	03 2e       	mov	r0, r19
    158c:	00 0c       	add	r0, r0
    158e:	aa 0b       	sbc	r26, r26
    1590:	bb 0b       	sbc	r27, r27
    1592:	dc 01       	movw	r26, r24
    1594:	99 27       	eor	r25, r25
    1596:	88 27       	eor	r24, r24
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	84 2b       	or	r24, r20
    159e:	95 2b       	or	r25, r21
    15a0:	a6 2b       	or	r26, r22
    15a2:	b7 2b       	or	r27, r23
    15a4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    15a8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    15ac:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    15b0:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    15b4:	b0 9b       	sbis	0x16, 0	; 22
    15b6:	1b c0       	rjmp	.+54     	; 0x15ee <__vector_17+0x98>
    15b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15c0:	c9 01       	movw	r24, r18
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	09 2e       	mov	r0, r25
    15c6:	00 0c       	add	r0, r0
    15c8:	aa 0b       	sbc	r26, r26
    15ca:	bb 0b       	sbc	r27, r27
    15cc:	dc 01       	movw	r26, r24
    15ce:	99 27       	eor	r25, r25
    15d0:	88 27       	eor	r24, r24
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	84 2b       	or	r24, r20
    15d8:	95 2b       	or	r25, r21
    15da:	a6 2b       	or	r26, r22
    15dc:	b7 2b       	or	r27, r23
    15de:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    15e2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    15e6:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    15ea:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    15ee:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x18>
    15f2:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x19>
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	39 f0       	breq	.+14     	; 0x1608 <__vector_17+0xb2>
    15fa:	6c e0       	ldi	r22, 0x0C	; 12
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x18>
    1602:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x19>
    1606:	09 95       	icall
    1608:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_18>:
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
    1650:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    1654:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    1658:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    165c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1660:	c9 01       	movw	r24, r18
    1662:	03 2e       	mov	r0, r19
    1664:	00 0c       	add	r0, r0
    1666:	aa 0b       	sbc	r26, r26
    1668:	bb 0b       	sbc	r27, r27
    166a:	dc 01       	movw	r26, r24
    166c:	99 27       	eor	r25, r25
    166e:	88 27       	eor	r24, r24
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	84 2b       	or	r24, r20
    1676:	95 2b       	or	r25, r21
    1678:	a6 2b       	or	r26, r22
    167a:	b7 2b       	or	r27, r23
    167c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1680:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1684:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1688:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    168c:	b0 9b       	sbis	0x16, 0	; 22
    168e:	1b c0       	rjmp	.+54     	; 0x16c6 <__vector_18+0x98>
    1690:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1694:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1698:	c9 01       	movw	r24, r18
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	09 2e       	mov	r0, r25
    169e:	00 0c       	add	r0, r0
    16a0:	aa 0b       	sbc	r26, r26
    16a2:	bb 0b       	sbc	r27, r27
    16a4:	dc 01       	movw	r26, r24
    16a6:	99 27       	eor	r25, r25
    16a8:	88 27       	eor	r24, r24
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	84 2b       	or	r24, r20
    16b0:	95 2b       	or	r25, r21
    16b2:	a6 2b       	or	r26, r22
    16b4:	b7 2b       	or	r27, r23
    16b6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    16ba:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    16be:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    16c2:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    16c6:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1a>
    16ca:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1b>
    16ce:	30 97       	sbiw	r30, 0x00	; 0
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <__vector_18+0xb2>
    16d2:	6d e0       	ldi	r22, 0x0D	; 13
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1a>
    16da:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1b>
    16de:	09 95       	icall
    16e0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_19>:
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    172c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    1730:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1734:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1738:	c9 01       	movw	r24, r18
    173a:	03 2e       	mov	r0, r19
    173c:	00 0c       	add	r0, r0
    173e:	aa 0b       	sbc	r26, r26
    1740:	bb 0b       	sbc	r27, r27
    1742:	dc 01       	movw	r26, r24
    1744:	99 27       	eor	r25, r25
    1746:	88 27       	eor	r24, r24
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	84 2b       	or	r24, r20
    174e:	95 2b       	or	r25, r21
    1750:	a6 2b       	or	r26, r22
    1752:	b7 2b       	or	r27, r23
    1754:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1758:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    175c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1760:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1764:	b0 9b       	sbis	0x16, 0	; 22
    1766:	1b c0       	rjmp	.+54     	; 0x179e <__vector_19+0x98>
    1768:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    176c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1770:	c9 01       	movw	r24, r18
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	09 2e       	mov	r0, r25
    1776:	00 0c       	add	r0, r0
    1778:	aa 0b       	sbc	r26, r26
    177a:	bb 0b       	sbc	r27, r27
    177c:	dc 01       	movw	r26, r24
    177e:	99 27       	eor	r25, r25
    1780:	88 27       	eor	r24, r24
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	84 2b       	or	r24, r20
    1788:	95 2b       	or	r25, r21
    178a:	a6 2b       	or	r26, r22
    178c:	b7 2b       	or	r27, r23
    178e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1792:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1796:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    179a:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    179e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x1c>
    17a2:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1d>
    17a6:	30 97       	sbiw	r30, 0x00	; 0
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <__vector_19+0xb2>
    17aa:	6e e0       	ldi	r22, 0x0E	; 14
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x1c>
    17b2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1d>
    17b6:	09 95       	icall
    17b8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_20>:
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
    1800:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    1804:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    1808:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    180c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1810:	c9 01       	movw	r24, r18
    1812:	03 2e       	mov	r0, r19
    1814:	00 0c       	add	r0, r0
    1816:	aa 0b       	sbc	r26, r26
    1818:	bb 0b       	sbc	r27, r27
    181a:	dc 01       	movw	r26, r24
    181c:	99 27       	eor	r25, r25
    181e:	88 27       	eor	r24, r24
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	84 2b       	or	r24, r20
    1826:	95 2b       	or	r25, r21
    1828:	a6 2b       	or	r26, r22
    182a:	b7 2b       	or	r27, r23
    182c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1830:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1834:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1838:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    183c:	b0 9b       	sbis	0x16, 0	; 22
    183e:	1b c0       	rjmp	.+54     	; 0x1876 <__vector_20+0x98>
    1840:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1844:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1848:	c9 01       	movw	r24, r18
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	09 2e       	mov	r0, r25
    184e:	00 0c       	add	r0, r0
    1850:	aa 0b       	sbc	r26, r26
    1852:	bb 0b       	sbc	r27, r27
    1854:	dc 01       	movw	r26, r24
    1856:	99 27       	eor	r25, r25
    1858:	88 27       	eor	r24, r24
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	84 2b       	or	r24, r20
    1860:	95 2b       	or	r25, r21
    1862:	a6 2b       	or	r26, r22
    1864:	b7 2b       	or	r27, r23
    1866:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    186a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    186e:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1872:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1876:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x1e>
    187a:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x1f>
    187e:	30 97       	sbiw	r30, 0x00	; 0
    1880:	39 f0       	breq	.+14     	; 0x1890 <__vector_20+0xb2>
    1882:	6f e0       	ldi	r22, 0x0F	; 15
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x1e>
    188a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x1f>
    188e:	09 95       	icall
    1890:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_21>:
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    18dc:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    18e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18e8:	c9 01       	movw	r24, r18
    18ea:	03 2e       	mov	r0, r19
    18ec:	00 0c       	add	r0, r0
    18ee:	aa 0b       	sbc	r26, r26
    18f0:	bb 0b       	sbc	r27, r27
    18f2:	dc 01       	movw	r26, r24
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	84 2b       	or	r24, r20
    18fe:	95 2b       	or	r25, r21
    1900:	a6 2b       	or	r26, r22
    1902:	b7 2b       	or	r27, r23
    1904:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1908:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    190c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1910:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1914:	b0 9b       	sbis	0x16, 0	; 22
    1916:	1b c0       	rjmp	.+54     	; 0x194e <__vector_21+0x98>
    1918:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    191c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1920:	c9 01       	movw	r24, r18
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	09 2e       	mov	r0, r25
    1926:	00 0c       	add	r0, r0
    1928:	aa 0b       	sbc	r26, r26
    192a:	bb 0b       	sbc	r27, r27
    192c:	dc 01       	movw	r26, r24
    192e:	99 27       	eor	r25, r25
    1930:	88 27       	eor	r24, r24
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	84 2b       	or	r24, r20
    1938:	95 2b       	or	r25, r21
    193a:	a6 2b       	or	r26, r22
    193c:	b7 2b       	or	r27, r23
    193e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1942:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1946:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    194a:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    194e:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x20>
    1952:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x21>
    1956:	30 97       	sbiw	r30, 0x00	; 0
    1958:	39 f0       	breq	.+14     	; 0x1968 <__vector_21+0xb2>
    195a:	60 e1       	ldi	r22, 0x10	; 16
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x20>
    1962:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x21>
    1966:	09 95       	icall
    1968:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <__vector_22>:
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
    19b0:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <overflows>
    19b4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <overflows+0x1>
    19b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19c0:	c9 01       	movw	r24, r18
    19c2:	03 2e       	mov	r0, r19
    19c4:	00 0c       	add	r0, r0
    19c6:	aa 0b       	sbc	r26, r26
    19c8:	bb 0b       	sbc	r27, r27
    19ca:	dc 01       	movw	r26, r24
    19cc:	99 27       	eor	r25, r25
    19ce:	88 27       	eor	r24, r24
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	84 2b       	or	r24, r20
    19d6:	95 2b       	or	r25, r21
    19d8:	a6 2b       	or	r26, r22
    19da:	b7 2b       	or	r27, r23
    19dc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    19e0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    19e4:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    19e8:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    19ec:	b0 9b       	sbis	0x16, 0	; 22
    19ee:	1b c0       	rjmp	.+54     	; 0x1a26 <__vector_22+0x98>
    19f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19f8:	c9 01       	movw	r24, r18
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	09 2e       	mov	r0, r25
    19fe:	00 0c       	add	r0, r0
    1a00:	aa 0b       	sbc	r26, r26
    1a02:	bb 0b       	sbc	r27, r27
    1a04:	dc 01       	movw	r26, r24
    1a06:	99 27       	eor	r25, r25
    1a08:	88 27       	eor	r24, r24
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	84 2b       	or	r24, r20
    1a10:	95 2b       	or	r25, r21
    1a12:	a6 2b       	or	r26, r22
    1a14:	b7 2b       	or	r27, r23
    1a16:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timestamp>
    1a1a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timestamp+0x1>
    1a1e:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timestamp+0x2>
    1a22:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timestamp+0x3>
    1a26:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x22>
    1a2a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x23>
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <__vector_22+0xb2>
    1a32:	61 e1       	ldi	r22, 0x11	; 17
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x22>
    1a3a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x23>
    1a3e:	09 95       	icall
    1a40:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    1a44:	ff 91       	pop	r31
    1a46:	ef 91       	pop	r30
    1a48:	bf 91       	pop	r27
    1a4a:	af 91       	pop	r26
    1a4c:	9f 91       	pop	r25
    1a4e:	8f 91       	pop	r24
    1a50:	7f 91       	pop	r23
    1a52:	6f 91       	pop	r22
    1a54:	5f 91       	pop	r21
    1a56:	4f 91       	pop	r20
    1a58:	3f 91       	pop	r19
    1a5a:	2f 91       	pop	r18
    1a5c:	0f 90       	pop	r0
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	0f 90       	pop	r0
    1a62:	1f 90       	pop	r1
    1a64:	18 95       	reti

00001a66 <__vector_9>:
    1a66:	1f 92       	push	r1
    1a68:	0f 92       	push	r0
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	0f 92       	push	r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	2f 93       	push	r18
    1a72:	3f 93       	push	r19
    1a74:	4f 93       	push	r20
    1a76:	5f 93       	push	r21
    1a78:	6f 93       	push	r22
    1a7a:	7f 93       	push	r23
    1a7c:	8f 93       	push	r24
    1a7e:	9f 93       	push	r25
    1a80:	ef 93       	push	r30
    1a82:	ff 93       	push	r31
    1a84:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <overflows>
    1a88:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <overflows+0x1>
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <overflows+0x1>
    1a92:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <overflows>
    1a96:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <timerQ>
    1a9a:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <timerQ+0x1>
    1a9e:	30 97       	sbiw	r30, 0x00	; 0
    1aa0:	39 f0       	breq	.+14     	; 0x1ab0 <__vector_9+0x4a>
    1aa2:	42 81       	ldd	r20, Z+2	; 0x02
    1aa4:	53 81       	ldd	r21, Z+3	; 0x03
    1aa6:	64 81       	ldd	r22, Z+4	; 0x04
    1aa8:	75 81       	ldd	r23, Z+5	; 0x05
    1aaa:	86 17       	cp	r24, r22
    1aac:	97 07       	cpc	r25, r23
    1aae:	a1 f0       	breq	.+40     	; 0x1ad8 <__vector_9+0x72>
    1ab0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1ab4:	8d 7f       	andi	r24, 0xFD	; 253
    1ab6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti
    1ad8:	ca 01       	movw	r24, r20
    1ada:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ade:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ae2:	42 1b       	sub	r20, r18
    1ae4:	53 0b       	sbc	r21, r19
    1ae6:	41 30       	cpi	r20, 0x01	; 1
    1ae8:	51 05       	cpc	r21, r1
    1aea:	51 f0       	breq	.+20     	; 0x1b00 <__vector_9+0x9a>
    1aec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1af0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1af4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1af8:	82 60       	ori	r24, 0x02	; 2
    1afa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1afe:	dd cf       	rjmp	.-70     	; 0x1aba <__vector_9+0x54>
    1b00:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b04:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	f0 cf       	rjmp	.-32     	; 0x1aec <__vector_9+0x86>

00001b0c <__vector_7>:
    1b0c:	1f 92       	push	r1
    1b0e:	0f 92       	push	r0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	0f 92       	push	r0
    1b14:	11 24       	eor	r1, r1
    1b16:	8f 92       	push	r8
    1b18:	9f 92       	push	r9
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	ef 93       	push	r30
    1b44:	ff 93       	push	r31
    1b46:	e0 90 3a 01 	lds	r14, 0x013A	; 0x80013a <overflows>
    1b4a:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <overflows+0x1>
    1b4e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b52:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b56:	b0 99       	sbic	0x16, 0	; 22
    1b58:	98 c0       	rjmp	.+304    	; 0x1c8a <__vector_7+0x17e>
    1b5a:	47 01       	movw	r8, r14
    1b5c:	0f 2c       	mov	r0, r15
    1b5e:	00 0c       	add	r0, r0
    1b60:	aa 08       	sbc	r10, r10
    1b62:	bb 08       	sbc	r11, r11
    1b64:	54 01       	movw	r10, r8
    1b66:	99 24       	eor	r9, r9
    1b68:	88 24       	eor	r8, r8
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	88 2a       	or	r8, r24
    1b70:	99 2a       	or	r9, r25
    1b72:	aa 2a       	or	r10, r26
    1b74:	bb 2a       	or	r11, r27
    1b76:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <timerQ>
    1b7a:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <timerQ+0x1>
    1b7e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <msgQ>
    1b82:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <msgQ+0x1>
    1b86:	20 97       	sbiw	r28, 0x00	; 0
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__vector_7+0x80>
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <__vector_7+0xfe>
    1b8c:	4a 81       	ldd	r20, Y+2	; 0x02
    1b8e:	5b 81       	ldd	r21, Y+3	; 0x03
    1b90:	6c 81       	ldd	r22, Y+4	; 0x04
    1b92:	7d 81       	ldd	r23, Y+5	; 0x05
    1b94:	8a 01       	movw	r16, r20
    1b96:	9b 01       	movw	r18, r22
    1b98:	08 19       	sub	r16, r8
    1b9a:	19 09       	sbc	r17, r9
    1b9c:	2a 09       	sbc	r18, r10
    1b9e:	3b 09       	sbc	r19, r11
    1ba0:	10 16       	cp	r1, r16
    1ba2:	11 06       	cpc	r1, r17
    1ba4:	12 06       	cpc	r1, r18
    1ba6:	13 06       	cpc	r1, r19
    1ba8:	0c f4       	brge	.+2      	; 0x1bac <__vector_7+0xa0>
    1baa:	40 c0       	rjmp	.+128    	; 0x1c2c <__vector_7+0x120>
    1bac:	d8 80       	ld	r13, Y
    1bae:	c9 80       	ldd	r12, Y+1	; 0x01
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	b9 f1       	breq	.+110    	; 0x1c22 <__vector_7+0x116>
    1bb4:	0e 81       	ldd	r16, Y+6	; 0x06
    1bb6:	1f 81       	ldd	r17, Y+7	; 0x07
    1bb8:	28 85       	ldd	r18, Y+8	; 0x08
    1bba:	39 85       	ldd	r19, Y+9	; 0x09
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	46 81       	ldd	r20, Z+6	; 0x06
    1bc0:	57 81       	ldd	r21, Z+7	; 0x07
    1bc2:	60 85       	ldd	r22, Z+8	; 0x08
    1bc4:	71 85       	ldd	r23, Z+9	; 0x09
    1bc6:	04 17       	cp	r16, r20
    1bc8:	15 07       	cpc	r17, r21
    1bca:	26 07       	cpc	r18, r22
    1bcc:	37 07       	cpc	r19, r23
    1bce:	4c f1       	brlt	.+82     	; 0x1c22 <__vector_7+0x116>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	0a c0       	rjmp	.+20     	; 0x1be8 <__vector_7+0xdc>
    1bd4:	46 81       	ldd	r20, Z+6	; 0x06
    1bd6:	57 81       	ldd	r21, Z+7	; 0x07
    1bd8:	60 85       	ldd	r22, Z+8	; 0x08
    1bda:	71 85       	ldd	r23, Z+9	; 0x09
    1bdc:	04 17       	cp	r16, r20
    1bde:	15 07       	cpc	r17, r21
    1be0:	26 07       	cpc	r18, r22
    1be2:	37 07       	cpc	r19, r23
    1be4:	dc f0       	brlt	.+54     	; 0x1c1c <__vector_7+0x110>
    1be6:	df 01       	movw	r26, r30
    1be8:	ed 91       	ld	r30, X+
    1bea:	fc 91       	ld	r31, X
    1bec:	11 97       	sbiw	r26, 0x01	; 1
    1bee:	30 97       	sbiw	r30, 0x00	; 0
    1bf0:	89 f7       	brne	.-30     	; 0x1bd4 <__vector_7+0xc8>
    1bf2:	19 82       	std	Y+1, r1	; 0x01
    1bf4:	18 82       	st	Y, r1
    1bf6:	cd 93       	st	X+, r28
    1bf8:	dc 93       	st	X, r29
    1bfa:	38 2f       	mov	r19, r24
    1bfc:	29 2f       	mov	r18, r25
    1bfe:	cd 2d       	mov	r28, r13
    1c00:	dc 2d       	mov	r29, r12
    1c02:	83 2f       	mov	r24, r19
    1c04:	92 2f       	mov	r25, r18
    1c06:	20 97       	sbiw	r28, 0x00	; 0
    1c08:	09 f6       	brne	.-126    	; 0x1b8c <__vector_7+0x80>
    1c0a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <timerQ+0x1>
    1c0e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <timerQ>
    1c12:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <msgQ+0x1>
    1c16:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <msgQ>
    1c1a:	13 c0       	rjmp	.+38     	; 0x1c42 <__vector_7+0x136>
    1c1c:	f9 83       	std	Y+1, r31	; 0x01
    1c1e:	e8 83       	st	Y, r30
    1c20:	ea cf       	rjmp	.-44     	; 0x1bf6 <__vector_7+0xea>
    1c22:	99 83       	std	Y+1, r25	; 0x01
    1c24:	88 83       	st	Y, r24
    1c26:	3c 2f       	mov	r19, r28
    1c28:	2d 2f       	mov	r18, r29
    1c2a:	e9 cf       	rjmp	.-46     	; 0x1bfe <__vector_7+0xf2>
    1c2c:	d0 93 41 01 	sts	0x0141, r29	; 0x800141 <timerQ+0x1>
    1c30:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <timerQ>
    1c34:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <msgQ+0x1>
    1c38:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <msgQ>
    1c3c:	e6 16       	cp	r14, r22
    1c3e:	f7 06       	cpc	r15, r23
    1c40:	d9 f1       	breq	.+118    	; 0x1cb8 <__vector_7+0x1ac>
    1c42:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c46:	8d 7f       	andi	r24, 0xFD	; 253
    1c48:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c4c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	bf 91       	pop	r27
    1c5a:	af 91       	pop	r26
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	7f 91       	pop	r23
    1c62:	6f 91       	pop	r22
    1c64:	5f 91       	pop	r21
    1c66:	4f 91       	pop	r20
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	bf 90       	pop	r11
    1c7a:	af 90       	pop	r10
    1c7c:	9f 90       	pop	r9
    1c7e:	8f 90       	pop	r8
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti
    1c8a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c8e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c92:	47 01       	movw	r8, r14
    1c94:	8f ef       	ldi	r24, 0xFF	; 255
    1c96:	88 1a       	sub	r8, r24
    1c98:	98 0a       	sbc	r9, r24
    1c9a:	09 2c       	mov	r0, r9
    1c9c:	00 0c       	add	r0, r0
    1c9e:	aa 08       	sbc	r10, r10
    1ca0:	bb 08       	sbc	r11, r11
    1ca2:	d4 01       	movw	r26, r8
    1ca4:	99 27       	eor	r25, r25
    1ca6:	88 27       	eor	r24, r24
    1ca8:	49 01       	movw	r8, r18
    1caa:	a1 2c       	mov	r10, r1
    1cac:	b1 2c       	mov	r11, r1
    1cae:	88 2a       	or	r8, r24
    1cb0:	99 2a       	or	r9, r25
    1cb2:	aa 2a       	or	r10, r26
    1cb4:	bb 2a       	or	r11, r27
    1cb6:	5f cf       	rjmp	.-322    	; 0x1b76 <__vector_7+0x6a>
    1cb8:	ca 01       	movw	r24, r20
    1cba:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1cbe:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1cc2:	42 1b       	sub	r20, r18
    1cc4:	53 0b       	sbc	r21, r19
    1cc6:	41 30       	cpi	r20, 0x01	; 1
    1cc8:	51 05       	cpc	r21, r1
    1cca:	51 f0       	breq	.+20     	; 0x1ce0 <__vector_7+0x1d4>
    1ccc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1cd0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1cd4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1cd8:	82 60       	ori	r24, 0x02	; 2
    1cda:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1cde:	b6 cf       	rjmp	.-148    	; 0x1c4c <__vector_7+0x140>
    1ce0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ce4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	f0 cf       	rjmp	.-32     	; 0x1ccc <__vector_7+0x1c0>

00001cec <async>:
    1cec:	3f 92       	push	r3
    1cee:	4f 92       	push	r4
    1cf0:	5f 92       	push	r5
    1cf2:	6f 92       	push	r6
    1cf4:	7f 92       	push	r7
    1cf6:	8f 92       	push	r8
    1cf8:	9f 92       	push	r9
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	ef b7       	in	r30, 0x3f	; 63
    1d10:	e0 78       	andi	r30, 0x80	; 128
    1d12:	3e 2e       	mov	r3, r30
    1d14:	f8 94       	cli
    1d16:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <msgPool>
    1d1a:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <msgPool+0x1>
    1d1e:	20 97       	sbiw	r28, 0x00	; 0
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <async+0x38>
    1d22:	52 c1       	rjmp	.+676    	; 0x1fc8 <async+0x2dc>
    1d24:	e8 81       	ld	r30, Y
    1d26:	f9 81       	ldd	r31, Y+1	; 0x01
    1d28:	f0 93 2f 01 	sts	0x012F, r31	; 0x80012f <msgPool+0x1>
    1d2c:	e0 93 2e 01 	sts	0x012E, r30	; 0x80012e <msgPool>
    1d30:	1b 87       	std	Y+11, r17	; 0x0b
    1d32:	0a 87       	std	Y+10, r16	; 0x0a
    1d34:	fd 86       	std	Y+13, r15	; 0x0d
    1d36:	ec 86       	std	Y+12, r14	; 0x0c
    1d38:	df 86       	std	Y+15, r13	; 0x0f
    1d3a:	ce 86       	std	Y+14, r12	; 0x0e
    1d3c:	33 20       	and	r3, r3
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <async+0x56>
    1d40:	6f c0       	rjmp	.+222    	; 0x1e20 <async+0x134>
    1d42:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <current>
    1d46:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <current+0x1>
    1d4a:	02 80       	ldd	r0, Z+2	; 0x02
    1d4c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d4e:	e0 2d       	mov	r30, r0
    1d50:	c2 80       	ldd	r12, Z+2	; 0x02
    1d52:	d3 80       	ldd	r13, Z+3	; 0x03
    1d54:	e4 80       	ldd	r14, Z+4	; 0x04
    1d56:	f5 80       	ldd	r15, Z+5	; 0x05
    1d58:	c6 0e       	add	r12, r22
    1d5a:	d7 1e       	adc	r13, r23
    1d5c:	e8 1e       	adc	r14, r24
    1d5e:	f9 1e       	adc	r15, r25
    1d60:	ca 82       	std	Y+2, r12	; 0x02
    1d62:	db 82       	std	Y+3, r13	; 0x03
    1d64:	ec 82       	std	Y+4, r14	; 0x04
    1d66:	fd 82       	std	Y+5, r15	; 0x05
    1d68:	12 16       	cp	r1, r18
    1d6a:	13 06       	cpc	r1, r19
    1d6c:	14 06       	cpc	r1, r20
    1d6e:	15 06       	cpc	r1, r21
    1d70:	0c f0       	brlt	.+2      	; 0x1d74 <async+0x88>
    1d72:	f8 c0       	rjmp	.+496    	; 0x1f64 <async+0x278>
    1d74:	da 01       	movw	r26, r20
    1d76:	c9 01       	movw	r24, r18
    1d78:	8c 01       	movw	r16, r24
    1d7a:	9d 01       	movw	r18, r26
    1d7c:	0c 0d       	add	r16, r12
    1d7e:	1d 1d       	adc	r17, r13
    1d80:	2e 1d       	adc	r18, r14
    1d82:	3f 1d       	adc	r19, r15
    1d84:	0e 83       	std	Y+6, r16	; 0x06
    1d86:	1f 83       	std	Y+7, r17	; 0x07
    1d88:	28 87       	std	Y+8, r18	; 0x08
    1d8a:	39 87       	std	Y+9, r19	; 0x09
    1d8c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <overflows>
    1d90:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <overflows+0x1>
    1d94:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d98:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d9c:	b0 99       	sbic	0x16, 0	; 22
    1d9e:	49 c0       	rjmp	.+146    	; 0x1e32 <async+0x146>
    1da0:	2c 01       	movw	r4, r24
    1da2:	09 2e       	mov	r0, r25
    1da4:	00 0c       	add	r0, r0
    1da6:	66 08       	sbc	r6, r6
    1da8:	77 08       	sbc	r7, r7
    1daa:	52 01       	movw	r10, r4
    1dac:	99 24       	eor	r9, r9
    1dae:	88 24       	eor	r8, r8
    1db0:	2b 01       	movw	r4, r22
    1db2:	61 2c       	mov	r6, r1
    1db4:	71 2c       	mov	r7, r1
    1db6:	48 28       	or	r4, r8
    1db8:	59 28       	or	r5, r9
    1dba:	6a 28       	or	r6, r10
    1dbc:	7b 28       	or	r7, r11
    1dbe:	b7 01       	movw	r22, r14
    1dc0:	a6 01       	movw	r20, r12
    1dc2:	44 19       	sub	r20, r4
    1dc4:	55 09       	sbc	r21, r5
    1dc6:	66 09       	sbc	r22, r6
    1dc8:	77 09       	sbc	r23, r7
    1dca:	14 16       	cp	r1, r20
    1dcc:	15 06       	cpc	r1, r21
    1dce:	16 06       	cpc	r1, r22
    1dd0:	17 06       	cpc	r1, r23
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <async+0xea>
    1dd4:	68 c0       	rjmp	.+208    	; 0x1ea6 <async+0x1ba>
    1dd6:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <timerQ>
    1dda:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <timerQ+0x1>
    1dde:	10 97       	sbiw	r26, 0x00	; 0
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <async+0xf8>
    1de2:	dc c0       	rjmp	.+440    	; 0x1f9c <async+0x2b0>
    1de4:	12 96       	adiw	r26, 0x02	; 2
    1de6:	0d 91       	ld	r16, X+
    1de8:	1d 91       	ld	r17, X+
    1dea:	2d 91       	ld	r18, X+
    1dec:	3c 91       	ld	r19, X
    1dee:	15 97       	sbiw	r26, 0x05	; 5
    1df0:	c0 16       	cp	r12, r16
    1df2:	d1 06       	cpc	r13, r17
    1df4:	e2 06       	cpc	r14, r18
    1df6:	f3 06       	cpc	r15, r19
    1df8:	5c f4       	brge	.+22     	; 0x1e10 <async+0x124>
    1dfa:	d0 c0       	rjmp	.+416    	; 0x1f9c <async+0x2b0>
    1dfc:	42 81       	ldd	r20, Z+2	; 0x02
    1dfe:	53 81       	ldd	r21, Z+3	; 0x03
    1e00:	64 81       	ldd	r22, Z+4	; 0x04
    1e02:	75 81       	ldd	r23, Z+5	; 0x05
    1e04:	c4 16       	cp	r12, r20
    1e06:	d5 06       	cpc	r13, r21
    1e08:	e6 06       	cpc	r14, r22
    1e0a:	f7 06       	cpc	r15, r23
    1e0c:	4c f1       	brlt	.+82     	; 0x1e60 <async+0x174>
    1e0e:	df 01       	movw	r26, r30
    1e10:	ed 91       	ld	r30, X+
    1e12:	fc 91       	ld	r31, X
    1e14:	11 97       	sbiw	r26, 0x01	; 1
    1e16:	30 97       	sbiw	r30, 0x00	; 0
    1e18:	89 f7       	brne	.-30     	; 0x1dfc <async+0x110>
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	18 82       	st	Y, r1
    1e1e:	22 c0       	rjmp	.+68     	; 0x1e64 <async+0x178>
    1e20:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <timestamp>
    1e24:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <timestamp+0x1>
    1e28:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <timestamp+0x2>
    1e2c:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <timestamp+0x3>
    1e30:	93 cf       	rjmp	.-218    	; 0x1d58 <async+0x6c>
    1e32:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e36:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e3a:	2c 01       	movw	r4, r24
    1e3c:	4f ef       	ldi	r20, 0xFF	; 255
    1e3e:	44 1a       	sub	r4, r20
    1e40:	54 0a       	sbc	r5, r20
    1e42:	05 2c       	mov	r0, r5
    1e44:	00 0c       	add	r0, r0
    1e46:	66 08       	sbc	r6, r6
    1e48:	77 08       	sbc	r7, r7
    1e4a:	b2 01       	movw	r22, r4
    1e4c:	55 27       	eor	r21, r21
    1e4e:	44 27       	eor	r20, r20
    1e50:	2f 01       	movw	r4, r30
    1e52:	61 2c       	mov	r6, r1
    1e54:	71 2c       	mov	r7, r1
    1e56:	44 2a       	or	r4, r20
    1e58:	55 2a       	or	r5, r21
    1e5a:	66 2a       	or	r6, r22
    1e5c:	77 2a       	or	r7, r23
    1e5e:	af cf       	rjmp	.-162    	; 0x1dbe <async+0xd2>
    1e60:	f9 83       	std	Y+1, r31	; 0x01
    1e62:	e8 83       	st	Y, r30
    1e64:	cd 93       	st	X+, r28
    1e66:	dc 93       	st	X, r29
    1e68:	82 17       	cp	r24, r18
    1e6a:	93 07       	cpc	r25, r19
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <async+0x184>
    1e6e:	7f c0       	rjmp	.+254    	; 0x1f6e <async+0x282>
    1e70:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1e74:	8d 7f       	andi	r24, 0xFD	; 253
    1e76:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1e7a:	33 20       	and	r3, r3
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <async+0x194>
    1e7e:	78 94       	sei
    1e80:	ce 01       	movw	r24, r28
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	bf 90       	pop	r11
    1e94:	af 90       	pop	r10
    1e96:	9f 90       	pop	r9
    1e98:	8f 90       	pop	r8
    1e9a:	7f 90       	pop	r7
    1e9c:	6f 90       	pop	r6
    1e9e:	5f 90       	pop	r5
    1ea0:	4f 90       	pop	r4
    1ea2:	3f 90       	pop	r3
    1ea4:	08 95       	ret
    1ea6:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <msgQ>
    1eaa:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <msgQ+0x1>
    1eae:	10 97       	sbiw	r26, 0x00	; 0
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <async+0x1c8>
    1eb2:	83 c0       	rjmp	.+262    	; 0x1fba <async+0x2ce>
    1eb4:	16 96       	adiw	r26, 0x06	; 6
    1eb6:	cd 90       	ld	r12, X+
    1eb8:	dd 90       	ld	r13, X+
    1eba:	ed 90       	ld	r14, X+
    1ebc:	fc 90       	ld	r15, X
    1ebe:	19 97       	sbiw	r26, 0x09	; 9
    1ec0:	0c 15       	cp	r16, r12
    1ec2:	1d 05       	cpc	r17, r13
    1ec4:	2e 05       	cpc	r18, r14
    1ec6:	3f 05       	cpc	r19, r15
    1ec8:	64 f4       	brge	.+24     	; 0x1ee2 <async+0x1f6>
    1eca:	77 c0       	rjmp	.+238    	; 0x1fba <async+0x2ce>
    1ecc:	c6 80       	ldd	r12, Z+6	; 0x06
    1ece:	d7 80       	ldd	r13, Z+7	; 0x07
    1ed0:	e0 84       	ldd	r14, Z+8	; 0x08
    1ed2:	f1 84       	ldd	r15, Z+9	; 0x09
    1ed4:	0c 15       	cp	r16, r12
    1ed6:	1d 05       	cpc	r17, r13
    1ed8:	2e 05       	cpc	r18, r14
    1eda:	3f 05       	cpc	r19, r15
    1edc:	0c f4       	brge	.+2      	; 0x1ee0 <async+0x1f4>
    1ede:	5b c0       	rjmp	.+182    	; 0x1f96 <async+0x2aa>
    1ee0:	df 01       	movw	r26, r30
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
    1ee6:	11 97       	sbiw	r26, 0x01	; 1
    1ee8:	30 97       	sbiw	r30, 0x00	; 0
    1eea:	81 f7       	brne	.-32     	; 0x1ecc <async+0x1e0>
    1eec:	19 82       	std	Y+1, r1	; 0x01
    1eee:	18 82       	st	Y, r1
    1ef0:	cd 93       	st	X+, r28
    1ef2:	dc 93       	st	X, r29
    1ef4:	33 20       	and	r3, r3
    1ef6:	21 f2       	breq	.-120    	; 0x1e80 <async+0x194>
    1ef8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <threadPool>
    1efc:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <threadPool+0x1>
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <async+0x21a>
    1f04:	bc cf       	rjmp	.-136    	; 0x1e7e <async+0x192>
    1f06:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <activeStack>
    1f0a:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <activeStack+0x1>
    1f0e:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <msgQ>
    1f12:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <msgQ+0x1>
    1f16:	02 81       	ldd	r16, Z+2	; 0x02
    1f18:	13 81       	ldd	r17, Z+3	; 0x03
    1f1a:	d9 01       	movw	r26, r18
    1f1c:	16 96       	adiw	r26, 0x06	; 6
    1f1e:	4d 91       	ld	r20, X+
    1f20:	5d 91       	ld	r21, X+
    1f22:	6d 91       	ld	r22, X+
    1f24:	7c 91       	ld	r23, X
    1f26:	19 97       	sbiw	r26, 0x09	; 9
    1f28:	d8 01       	movw	r26, r16
    1f2a:	16 96       	adiw	r26, 0x06	; 6
    1f2c:	0d 91       	ld	r16, X+
    1f2e:	1d 91       	ld	r17, X+
    1f30:	2d 91       	ld	r18, X+
    1f32:	3c 91       	ld	r19, X
    1f34:	19 97       	sbiw	r26, 0x09	; 9
    1f36:	40 1b       	sub	r20, r16
    1f38:	51 0b       	sbc	r21, r17
    1f3a:	62 0b       	sbc	r22, r18
    1f3c:	73 0b       	sbc	r23, r19
    1f3e:	77 ff       	sbrs	r23, 7
    1f40:	9e cf       	rjmp	.-196    	; 0x1e7e <async+0x192>
    1f42:	dc 01       	movw	r26, r24
    1f44:	2d 91       	ld	r18, X+
    1f46:	3c 91       	ld	r19, X
    1f48:	11 97       	sbiw	r26, 0x01	; 1
    1f4a:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <threadPool+0x1>
    1f4e:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <threadPool>
    1f52:	ed 93       	st	X+, r30
    1f54:	fc 93       	st	X, r31
    1f56:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <activeStack+0x1>
    1f5a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <activeStack>
    1f5e:	0e 94 30 05 	call	0xa60	; 0xa60 <dispatch>
    1f62:	8d cf       	rjmp	.-230    	; 0x1e7e <async+0x192>
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	af ef       	ldi	r26, 0xFF	; 255
    1f6a:	bf e7       	ldi	r27, 0x7F	; 127
    1f6c:	05 cf       	rjmp	.-502    	; 0x1d78 <async+0x8c>
    1f6e:	c8 01       	movw	r24, r16
    1f70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f78:	04 1b       	sub	r16, r20
    1f7a:	15 0b       	sbc	r17, r21
    1f7c:	01 30       	cpi	r16, 0x01	; 1
    1f7e:	11 05       	cpc	r17, r1
    1f80:	b1 f0       	breq	.+44     	; 0x1fae <async+0x2c2>
    1f82:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f86:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1f8a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1f8e:	82 60       	ori	r24, 0x02	; 2
    1f90:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1f94:	72 cf       	rjmp	.-284    	; 0x1e7a <async+0x18e>
    1f96:	f9 83       	std	Y+1, r31	; 0x01
    1f98:	e8 83       	st	Y, r30
    1f9a:	aa cf       	rjmp	.-172    	; 0x1ef0 <async+0x204>
    1f9c:	b9 83       	std	Y+1, r27	; 0x01
    1f9e:	a8 83       	st	Y, r26
    1fa0:	d0 93 41 01 	sts	0x0141, r29	; 0x800141 <timerQ+0x1>
    1fa4:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <timerQ>
    1fa8:	97 01       	movw	r18, r14
    1faa:	86 01       	movw	r16, r12
    1fac:	5d cf       	rjmp	.-326    	; 0x1e68 <async+0x17c>
    1fae:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1fb2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	e4 cf       	rjmp	.-56     	; 0x1f82 <async+0x296>
    1fba:	b9 83       	std	Y+1, r27	; 0x01
    1fbc:	a8 83       	st	Y, r26
    1fbe:	d0 93 43 01 	sts	0x0143, r29	; 0x800143 <msgQ+0x1>
    1fc2:	c0 93 42 01 	sts	0x0142, r28	; 0x800142 <msgQ>
    1fc6:	96 cf       	rjmp	.-212    	; 0x1ef4 <async+0x208>
    1fc8:	0e 94 90 05 	call	0xb20	; 0xb20 <dequeue.part.0>

00001fcc <sync>:
    1fcc:	cf 92       	push	r12
    1fce:	df 92       	push	r13
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	ec 01       	movw	r28, r24
    1fde:	7b 01       	movw	r14, r22
    1fe0:	6a 01       	movw	r12, r20
    1fe2:	1f b7       	in	r17, 0x3f	; 63
    1fe4:	10 78       	andi	r17, 0x80	; 128
    1fe6:	f8 94       	cli
    1fe8:	a8 81       	ld	r26, Y
    1fea:	b9 81       	ldd	r27, Y+1	; 0x01
    1fec:	10 97       	sbiw	r26, 0x00	; 0
    1fee:	19 f4       	brne	.+6      	; 0x1ff6 <sync+0x2a>
    1ff0:	62 c0       	rjmp	.+196    	; 0x20b6 <sync+0xea>
    1ff2:	a0 81       	ld	r26, Z
    1ff4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ff6:	14 96       	adiw	r26, 0x04	; 4
    1ff8:	ed 91       	ld	r30, X+
    1ffa:	fc 91       	ld	r31, X
    1ffc:	15 97       	sbiw	r26, 0x05	; 5
    1ffe:	30 97       	sbiw	r30, 0x00	; 0
    2000:	c1 f7       	brne	.-16     	; 0x1ff2 <sync+0x26>
    2002:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <current>
    2006:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <current+0x1>
    200a:	2a 17       	cp	r18, r26
    200c:	3b 07       	cpc	r19, r27
    200e:	09 f4       	brne	.+2      	; 0x2012 <sync+0x46>
    2010:	4c c0       	rjmp	.+152    	; 0x20aa <sync+0xde>
    2012:	11 23       	and	r17, r17
    2014:	a1 f1       	breq	.+104    	; 0x207e <sync+0xb2>
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	19 f0       	breq	.+6      	; 0x2024 <sync+0x58>
    201e:	fc 01       	movw	r30, r24
    2020:	15 82       	std	Z+5, r1	; 0x05
    2022:	14 82       	std	Z+4, r1	; 0x04
    2024:	3b 83       	std	Y+3, r19	; 0x03
    2026:	2a 83       	std	Y+2, r18	; 0x02
    2028:	f9 01       	movw	r30, r18
    202a:	d5 83       	std	Z+5, r29	; 0x05
    202c:	c4 83       	std	Z+4, r28	; 0x04
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 30 05 	call	0xa60	; 0xa60 <dispatch>
    2034:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <current>
    2038:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <current+0x1>
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	89 2b       	or	r24, r25
    2042:	09 f4       	brne	.+2      	; 0x2046 <sync+0x7a>
    2044:	41 c0       	rjmp	.+130    	; 0x20c8 <sync+0xfc>
    2046:	f9 83       	std	Y+1, r31	; 0x01
    2048:	e8 83       	st	Y, r30
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	09 f0       	breq	.+2      	; 0x2054 <sync+0x88>
    2052:	78 94       	sei
    2054:	b6 01       	movw	r22, r12
    2056:	ce 01       	movw	r24, r28
    2058:	f7 01       	movw	r30, r14
    205a:	09 95       	icall
    205c:	f8 2e       	mov	r15, r24
    205e:	09 2f       	mov	r16, r25
    2060:	8f b7       	in	r24, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	19 82       	std	Y+1, r1	; 0x01
    2066:	18 82       	st	Y, r1
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	91 05       	cpc	r25, r1
    2070:	a0 f4       	brcc	.+40     	; 0x209a <sync+0xce>
    2072:	11 23       	and	r17, r17
    2074:	79 f0       	breq	.+30     	; 0x2094 <sync+0xc8>
    2076:	78 94       	sei
    2078:	8f 2d       	mov	r24, r15
    207a:	90 2f       	mov	r25, r16
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <sync+0xb6>
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	08 95       	ret
    2094:	8f 2d       	mov	r24, r15
    2096:	90 2f       	mov	r25, r16
    2098:	f4 cf       	rjmp	.-24     	; 0x2082 <sync+0xb6>
    209a:	1b 82       	std	Y+3, r1	; 0x03
    209c:	1a 82       	std	Y+2, r1	; 0x02
    209e:	fc 01       	movw	r30, r24
    20a0:	15 82       	std	Z+5, r1	; 0x05
    20a2:	14 82       	std	Z+4, r1	; 0x04
    20a4:	0e 94 30 05 	call	0xa60	; 0xa60 <dispatch>
    20a8:	e4 cf       	rjmp	.-56     	; 0x2072 <sync+0xa6>
    20aa:	11 23       	and	r17, r17
    20ac:	41 f3       	breq	.-48     	; 0x207e <sync+0xb2>
    20ae:	78 94       	sei
    20b0:	8f ef       	ldi	r24, 0xFF	; 255
    20b2:	9f ef       	ldi	r25, 0xFF	; 255
    20b4:	e6 cf       	rjmp	.-52     	; 0x2082 <sync+0xb6>
    20b6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
    20ba:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
    20be:	99 83       	std	Y+1, r25	; 0x01
    20c0:	88 83       	st	Y, r24
    20c2:	11 23       	and	r17, r17
    20c4:	39 f2       	breq	.-114    	; 0x2054 <sync+0x88>
    20c6:	c1 cf       	rjmp	.-126    	; 0x204a <sync+0x7e>
    20c8:	78 94       	sei
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	d9 cf       	rjmp	.-78     	; 0x2082 <sync+0xb6>

000020d0 <run>:
    20d0:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <msgQ>
    20d4:	d0 91 43 01 	lds	r29, 0x0143	; 0x800143 <msgQ+0x1>
    20d8:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <current>
    20dc:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <current+0x1>
    20e0:	20 97       	sbiw	r28, 0x00	; 0
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <run+0x16>
    20e4:	6e c0       	rjmp	.+220    	; 0x21c2 <run+0xf2>
    20e6:	88 81       	ld	r24, Y
    20e8:	99 81       	ldd	r25, Y+1	; 0x01
    20ea:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <msgQ+0x1>
    20ee:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <msgQ>
    20f2:	d3 83       	std	Z+3, r29	; 0x03
    20f4:	c2 83       	std	Z+2, r28	; 0x02
    20f6:	78 94       	sei
    20f8:	4e 85       	ldd	r20, Y+14	; 0x0e
    20fa:	5f 85       	ldd	r21, Y+15	; 0x0f
    20fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    20fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2100:	8a 85       	ldd	r24, Y+10	; 0x0a
    2102:	9b 85       	ldd	r25, Y+11	; 0x0b
    2104:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <sync>
    2108:	8f b7       	in	r24, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msgPool>
    2110:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msgPool+0x1>
    2114:	99 83       	std	Y+1, r25	; 0x01
    2116:	88 83       	st	Y, r24
    2118:	d0 93 2f 01 	sts	0x012F, r29	; 0x80012f <msgPool+0x1>
    211c:	c0 93 2e 01 	sts	0x012E, r28	; 0x80012e <msgPool>
    2120:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <activeStack>
    2124:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <activeStack+0x1>
    2128:	f7 01       	movw	r30, r14
    212a:	a0 81       	ld	r26, Z
    212c:	b1 81       	ldd	r27, Z+1	; 0x01
    212e:	12 96       	adiw	r26, 0x02	; 2
    2130:	8d 91       	ld	r24, X+
    2132:	9c 91       	ld	r25, X
    2134:	13 97       	sbiw	r26, 0x03	; 3
    2136:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <msgQ>
    213a:	d0 91 43 01 	lds	r29, 0x0143	; 0x800143 <msgQ+0x1>
    213e:	20 97       	sbiw	r28, 0x00	; 0
    2140:	a9 f0       	breq	.+42     	; 0x216c <run+0x9c>
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	49 f2       	breq	.-110    	; 0x20d8 <run+0x8>
    2146:	4e 81       	ldd	r20, Y+6	; 0x06
    2148:	5f 81       	ldd	r21, Y+7	; 0x07
    214a:	68 85       	ldd	r22, Y+8	; 0x08
    214c:	79 85       	ldd	r23, Y+9	; 0x09
    214e:	fc 01       	movw	r30, r24
    2150:	06 81       	ldd	r16, Z+6	; 0x06
    2152:	17 81       	ldd	r17, Z+7	; 0x07
    2154:	20 85       	ldd	r18, Z+8	; 0x08
    2156:	31 85       	ldd	r19, Z+9	; 0x09
    2158:	40 1b       	sub	r20, r16
    215a:	51 0b       	sbc	r21, r17
    215c:	62 0b       	sbc	r22, r18
    215e:	73 0b       	sbc	r23, r19
    2160:	14 16       	cp	r1, r20
    2162:	15 06       	cpc	r1, r21
    2164:	16 06       	cpc	r1, r22
    2166:	17 06       	cpc	r1, r23
    2168:	0c f0       	brlt	.+2      	; 0x216c <run+0x9c>
    216a:	b6 cf       	rjmp	.-148    	; 0x20d8 <run+0x8>
    216c:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <activeStack+0x1>
    2170:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <activeStack>
    2174:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <threadPool>
    2178:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <threadPool+0x1>
    217c:	f7 01       	movw	r30, r14
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	f0 92 2d 01 	sts	0x012D, r15	; 0x80012d <threadPool+0x1>
    2186:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <threadPool>
    218a:	14 96       	adiw	r26, 0x04	; 4
    218c:	ed 91       	ld	r30, X+
    218e:	fc 91       	ld	r31, X
    2190:	15 97       	sbiw	r26, 0x05	; 5
    2192:	30 97       	sbiw	r30, 0x00	; 0
    2194:	41 f0       	breq	.+16     	; 0x21a6 <run+0xd6>
    2196:	a0 81       	ld	r26, Z
    2198:	b1 81       	ldd	r27, Z+1	; 0x01
    219a:	14 96       	adiw	r26, 0x04	; 4
    219c:	ed 91       	ld	r30, X+
    219e:	fc 91       	ld	r31, X
    21a0:	15 97       	sbiw	r26, 0x05	; 5
    21a2:	30 97       	sbiw	r30, 0x00	; 0
    21a4:	c1 f7       	brne	.-16     	; 0x2196 <run+0xc6>
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 30 05 	call	0xa60	; 0xa60 <dispatch>
    21ac:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <msgQ>
    21b0:	d0 91 43 01 	lds	r29, 0x0143	; 0x800143 <msgQ+0x1>
    21b4:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <current>
    21b8:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <current+0x1>
    21bc:	20 97       	sbiw	r28, 0x00	; 0
    21be:	09 f0       	breq	.+2      	; 0x21c2 <run+0xf2>
    21c0:	92 cf       	rjmp	.-220    	; 0x20e6 <run+0x16>
    21c2:	0e 94 90 05 	call	0xb20	; 0xb20 <dequeue.part.0>

000021c6 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    21c6:	42 31       	cpi	r20, 0x12	; 18
    21c8:	b8 f4       	brcc	.+46     	; 0x21f8 <install+0x32>
        char status;
        DISABLE(status);
    21ca:	2f b7       	in	r18, 0x3f	; 63
    21cc:	f8 94       	cli
        otable[i] = obj;
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	44 0f       	add	r20, r20
    21d2:	55 1f       	adc	r21, r21
    21d4:	fa 01       	movw	r30, r20
    21d6:	ec 5b       	subi	r30, 0xBC	; 188
    21d8:	fe 4f       	sbci	r31, 0xFE	; 254
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
        mtable[i] = m;
    21de:	fa 01       	movw	r30, r20
    21e0:	e4 52       	subi	r30, 0x24	; 36
    21e2:	fe 4f       	sbci	r31, 0xFE	; 254
    21e4:	71 83       	std	Z+1, r23	; 0x01
    21e6:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	fc 01       	movw	r30, r24
    21ee:	53 83       	std	Z+3, r21	; 0x03
    21f0:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    21f2:	27 ff       	sbrs	r18, 7
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <install+0x32>
    21f6:	78 94       	sei
    21f8:	08 95       	ret

000021fa <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21fa:	8c 01       	movw	r16, r24
    21fc:	7b 01       	movw	r14, r22
    21fe:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2200:	8f b7       	in	r24, 0x3f	; 63
    2202:	f8 94       	cli
    initialize();
    2204:	0e 94 c5 04 	call	0x98a	; 0x98a <initialize>
    ENABLE(1);
    2208:	78 94       	sei
    if (m != NULL)
    220a:	e1 14       	cp	r14, r1
    220c:	f1 04       	cpc	r15, r1
    220e:	41 f0       	breq	.+16     	; 0x2220 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	a9 01       	movw	r20, r18
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	cb 01       	movw	r24, r22
    221c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <async>
    DISABLE(status);
    2220:	8f b7       	in	r24, 0x3f	; 63
    2222:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2224:	0e 94 50 05 	call	0xaa0	; 0xaa0 <schedule>
    ENABLE(1);
    2228:	78 94       	sei
    while (1) {
        SLEEP();
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	83 bf       	out	0x33, r24	; 51
    222e:	88 95       	sleep
    2230:	fd cf       	rjmp	.-6      	; 0x222c <tinytimber+0x32>

00002232 <__divmodhi4>:
    2232:	97 fb       	bst	r25, 7
    2234:	07 2e       	mov	r0, r23
    2236:	16 f4       	brtc	.+4      	; 0x223c <__divmodhi4+0xa>
    2238:	00 94       	com	r0
    223a:	07 d0       	rcall	.+14     	; 0x224a <__divmodhi4_neg1>
    223c:	77 fd       	sbrc	r23, 7
    223e:	09 d0       	rcall	.+18     	; 0x2252 <__divmodhi4_neg2>
    2240:	0e 94 3a 11 	call	0x2274	; 0x2274 <__udivmodhi4>
    2244:	07 fc       	sbrc	r0, 7
    2246:	05 d0       	rcall	.+10     	; 0x2252 <__divmodhi4_neg2>
    2248:	3e f4       	brtc	.+14     	; 0x2258 <__divmodhi4_exit>

0000224a <__divmodhi4_neg1>:
    224a:	90 95       	com	r25
    224c:	81 95       	neg	r24
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	08 95       	ret

00002252 <__divmodhi4_neg2>:
    2252:	70 95       	com	r23
    2254:	61 95       	neg	r22
    2256:	7f 4f       	sbci	r23, 0xFF	; 255

00002258 <__divmodhi4_exit>:
    2258:	08 95       	ret

0000225a <__tablejump2__>:
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	05 90       	lpm	r0, Z+
    2260:	f4 91       	lpm	r31, Z
    2262:	e0 2d       	mov	r30, r0
    2264:	09 94       	ijmp

00002266 <__usmulhisi3>:
    2266:	0e 94 4e 11 	call	0x229c	; 0x229c <__umulhisi3>

0000226a <__usmulhisi3_tail>:
    226a:	b7 ff       	sbrs	r27, 7
    226c:	08 95       	ret
    226e:	82 1b       	sub	r24, r18
    2270:	93 0b       	sbc	r25, r19
    2272:	08 95       	ret

00002274 <__udivmodhi4>:
    2274:	aa 1b       	sub	r26, r26
    2276:	bb 1b       	sub	r27, r27
    2278:	51 e1       	ldi	r21, 0x11	; 17
    227a:	07 c0       	rjmp	.+14     	; 0x228a <__udivmodhi4_ep>

0000227c <__udivmodhi4_loop>:
    227c:	aa 1f       	adc	r26, r26
    227e:	bb 1f       	adc	r27, r27
    2280:	a6 17       	cp	r26, r22
    2282:	b7 07       	cpc	r27, r23
    2284:	10 f0       	brcs	.+4      	; 0x228a <__udivmodhi4_ep>
    2286:	a6 1b       	sub	r26, r22
    2288:	b7 0b       	sbc	r27, r23

0000228a <__udivmodhi4_ep>:
    228a:	88 1f       	adc	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	5a 95       	dec	r21
    2290:	a9 f7       	brne	.-22     	; 0x227c <__udivmodhi4_loop>
    2292:	80 95       	com	r24
    2294:	90 95       	com	r25
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	08 95       	ret

0000229c <__umulhisi3>:
    229c:	a2 9f       	mul	r26, r18
    229e:	b0 01       	movw	r22, r0
    22a0:	b3 9f       	mul	r27, r19
    22a2:	c0 01       	movw	r24, r0
    22a4:	a3 9f       	mul	r26, r19
    22a6:	70 0d       	add	r23, r0
    22a8:	81 1d       	adc	r24, r1
    22aa:	11 24       	eor	r1, r1
    22ac:	91 1d       	adc	r25, r1
    22ae:	b2 9f       	mul	r27, r18
    22b0:	70 0d       	add	r23, r0
    22b2:	81 1d       	adc	r24, r1
    22b4:	11 24       	eor	r1, r1
    22b6:	91 1d       	adc	r25, r1
    22b8:	08 95       	ret

000022ba <setjmp>:
    22ba:	dc 01       	movw	r26, r24
    22bc:	2d 92       	st	X+, r2
    22be:	3d 92       	st	X+, r3
    22c0:	4d 92       	st	X+, r4
    22c2:	5d 92       	st	X+, r5
    22c4:	6d 92       	st	X+, r6
    22c6:	7d 92       	st	X+, r7
    22c8:	8d 92       	st	X+, r8
    22ca:	9d 92       	st	X+, r9
    22cc:	ad 92       	st	X+, r10
    22ce:	bd 92       	st	X+, r11
    22d0:	cd 92       	st	X+, r12
    22d2:	dd 92       	st	X+, r13
    22d4:	ed 92       	st	X+, r14
    22d6:	fd 92       	st	X+, r15
    22d8:	0d 93       	st	X+, r16
    22da:	1d 93       	st	X+, r17
    22dc:	cd 93       	st	X+, r28
    22de:	dd 93       	st	X+, r29
    22e0:	ff 91       	pop	r31
    22e2:	ef 91       	pop	r30
    22e4:	8d b7       	in	r24, 0x3d	; 61
    22e6:	8d 93       	st	X+, r24
    22e8:	8e b7       	in	r24, 0x3e	; 62
    22ea:	8d 93       	st	X+, r24
    22ec:	8f b7       	in	r24, 0x3f	; 63
    22ee:	8d 93       	st	X+, r24
    22f0:	ed 93       	st	X+, r30
    22f2:	fd 93       	st	X+, r31
    22f4:	88 27       	eor	r24, r24
    22f6:	99 27       	eor	r25, r25
    22f8:	09 94       	ijmp

000022fa <longjmp>:
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	81 1d       	adc	r24, r1
    2304:	2d 90       	ld	r2, X+
    2306:	3d 90       	ld	r3, X+
    2308:	4d 90       	ld	r4, X+
    230a:	5d 90       	ld	r5, X+
    230c:	6d 90       	ld	r6, X+
    230e:	7d 90       	ld	r7, X+
    2310:	8d 90       	ld	r8, X+
    2312:	9d 90       	ld	r9, X+
    2314:	ad 90       	ld	r10, X+
    2316:	bd 90       	ld	r11, X+
    2318:	cd 90       	ld	r12, X+
    231a:	dd 90       	ld	r13, X+
    231c:	ed 90       	ld	r14, X+
    231e:	fd 90       	ld	r15, X+
    2320:	0d 91       	ld	r16, X+
    2322:	1d 91       	ld	r17, X+
    2324:	cd 91       	ld	r28, X+
    2326:	dd 91       	ld	r29, X+
    2328:	ed 91       	ld	r30, X+
    232a:	fd 91       	ld	r31, X+
    232c:	0d 90       	ld	r0, X+
    232e:	f8 94       	cli
    2330:	fe bf       	out	0x3e, r31	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	ed bf       	out	0x3d, r30	; 61
    2336:	ed 91       	ld	r30, X+
    2338:	fd 91       	ld	r31, X+
    233a:	09 94       	ijmp

0000233c <_exit>:
    233c:	f8 94       	cli

0000233e <__stop_program>:
    233e:	ff cf       	rjmp	.-2      	; 0x233e <__stop_program>
