
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002326  000023ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035d  00800134  00800134  000023ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002af1  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00005179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015e1  00000000  00000000  0000627a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bdc  00000000  00000000  0000785c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094d  00000000  00000000  00008438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e2e  00000000  00000000  00008d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000bbb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__vector_1>
       8:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__vector_2>
       c:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_3>
      10:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_4>
      14:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_9>
      28:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_10>
      2c:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_11>
      30:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_12>
      34:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_13>
      38:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_14>
      3c:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_15>
      40:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_16>
      44:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_17>
      48:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_18>
      4c:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_19>
      50:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_20>
      54:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__vector_21>
      58:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_22>
      5c:	12 01       	movw	r2, r4
      5e:	32 01       	movw	r6, r4
      60:	41 01       	movw	r8, r2
      62:	6e 01       	movw	r12, r28
      64:	93 01       	movw	r18, r6
      66:	b5 01       	movw	r22, r10
      68:	dc 01       	movw	r26, r24
      6a:	12 02       	muls	r17, r18
      6c:	d7 00       	.word	0x00d7	; ????
      6e:	96 00       	.word	0x0096	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e2       	ldi	r30, 0x26	; 38
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 33       	cpi	r26, 0x34	; 52
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e3       	ldi	r26, 0x34	; 52
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 39       	cpi	r26, 0x91	; 145
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <main>
      a6:	0c 94 91 11 	jmp	0x2322	; 0x2322 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <writeChar>:
	int focus;
} GUI;



static void writeChar(char c, int pos){
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
      bc:	db 01       	movw	r26, r22
      be:	77 fd       	sbrc	r23, 7
      c0:	74 c0       	rjmp	.+232    	; 0x1aa <writeChar+0xfc>
      c2:	b5 95       	asr	r27
      c4:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
      c6:	61 70       	andi	r22, 0x01	; 1
      c8:	70 78       	andi	r23, 0x80	; 128
      ca:	77 fd       	sbrc	r23, 7
      cc:	67 c0       	rjmp	.+206    	; 0x19c <writeChar+0xee>
      ce:	66 0f       	add	r22, r22
      d0:	77 1f       	adc	r23, r23
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
      d6:	ad 01       	movw	r20, r26
      d8:	44 51       	subi	r20, 0x14	; 20
      da:	5f 4f       	sbci	r21, 0xFF	; 255
      dc:	ea 01       	movw	r28, r20
      de:	88 81       	ld	r24, Y
      e0:	20 ef       	ldi	r18, 0xF0	; 240
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	06 2e       	mov	r0, r22
      e6:	02 c0       	rjmp	.+4      	; 0xec <writeChar+0x3e>
      e8:	35 95       	asr	r19
      ea:	27 95       	ror	r18
      ec:	0a 94       	dec	r0
      ee:	e2 f7       	brpl	.-8      	; 0xe8 <writeChar+0x3a>
      f0:	82 23       	and	r24, r18
      f2:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
      f4:	7d 01       	movw	r14, r26
      f6:	d1 ef       	ldi	r29, 0xF1	; 241
      f8:	ed 0e       	add	r14, r29
      fa:	f1 1c       	adc	r15, r1
      fc:	e7 01       	movw	r28, r14
      fe:	88 81       	ld	r24, Y
     100:	82 23       	and	r24, r18
     102:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
     104:	25 96       	adiw	r28, 0x05	; 5
     106:	88 81       	ld	r24, Y
     108:	82 23       	and	r24, r18
     10a:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
     10c:	a5 50       	subi	r26, 0x05	; 5
     10e:	bf 4f       	sbci	r27, 0xFF	; 255
     110:	8c 91       	ld	r24, X
     112:	28 23       	and	r18, r24
     114:	2c 93       	st	X, r18
	
	switch (c){
     116:	0e 2f       	mov	r16, r30
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	f8 01       	movw	r30, r16
     11c:	f0 97       	sbiw	r30, 0x30	; 48
     11e:	ea 30       	cpi	r30, 0x0A	; 10
     120:	f1 05       	cpc	r31, r1
     122:	a8 f5       	brcc	.+106    	; 0x18e <writeChar+0xe0>
     124:	e2 5d       	subi	r30, 0xD2	; 210
     126:	ff 4f       	sbci	r31, 0xFF	; 255
     128:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__tablejump2__>
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
		FEET  += (1 << (0 + offset));
		break;
		
		case '9':
		HEAD  += (1 << (0 + offset));
     12c:	da 01       	movw	r26, r20
     12e:	ec 91       	ld	r30, X
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	9c 01       	movw	r18, r24
     136:	06 2e       	mov	r0, r22
     138:	01 c0       	rjmp	.+2      	; 0x13c <writeChar+0x8e>
     13a:	22 0f       	add	r18, r18
     13c:	0a 94       	dec	r0
     13e:	ea f7       	brpl	.-6      	; 0x13a <writeChar+0x8c>
     140:	3e 2f       	mov	r19, r30
     142:	32 0f       	add	r19, r18
     144:	3c 93       	st	X, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     146:	f7 01       	movw	r30, r14
     148:	40 81       	ld	r20, Z
     14a:	fb 01       	movw	r30, r22
     14c:	32 96       	adiw	r30, 0x02	; 2
     14e:	8c 01       	movw	r16, r24
     150:	02 c0       	rjmp	.+4      	; 0x156 <writeChar+0xa8>
     152:	00 0f       	add	r16, r16
     154:	11 1f       	adc	r17, r17
     156:	ea 95       	dec	r30
     158:	e2 f7       	brpl	.-8      	; 0x152 <writeChar+0xa4>
     15a:	32 2f       	mov	r19, r18
     15c:	30 2b       	or	r19, r16
     15e:	34 0f       	add	r19, r20
     160:	d7 01       	movw	r26, r14
     162:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     164:	38 81       	ld	r19, Y
     166:	ab 01       	movw	r20, r22
     168:	4f 5f       	subi	r20, 0xFF	; 255
     16a:	5f 4f       	sbci	r21, 0xFF	; 255
     16c:	fc 01       	movw	r30, r24
     16e:	02 c0       	rjmp	.+4      	; 0x174 <writeChar+0xc6>
     170:	ee 0f       	add	r30, r30
     172:	ff 1f       	adc	r31, r31
     174:	4a 95       	dec	r20
     176:	e2 f7       	brpl	.-8      	; 0x170 <writeChar+0xc2>
     178:	af 01       	movw	r20, r30
     17a:	6d 5f       	subi	r22, 0xFD	; 253
     17c:	7f 4f       	sbci	r23, 0xFF	; 255
     17e:	01 c0       	rjmp	.+2      	; 0x182 <writeChar+0xd4>
     180:	88 0f       	add	r24, r24
     182:	6a 95       	dec	r22
     184:	ea f7       	brpl	.-6      	; 0x180 <writeChar+0xd2>
     186:	84 2b       	or	r24, r20
     188:	82 2b       	or	r24, r18
     18a:	83 0f       	add	r24, r19
     18c:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	08 95       	ret



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
     19c:	61 50       	subi	r22, 0x01	; 1
     19e:	71 09       	sbc	r23, r1
     1a0:	6e 6f       	ori	r22, 0xFE	; 254
     1a2:	7f 6f       	ori	r23, 0xFF	; 255
     1a4:	6f 5f       	subi	r22, 0xFF	; 255
     1a6:	7f 4f       	sbci	r23, 0xFF	; 255
     1a8:	92 cf       	rjmp	.-220    	; 0xce <writeChar+0x20>
} GUI;



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
     1aa:	11 96       	adiw	r26, 0x01	; 1
     1ac:	8a cf       	rjmp	.-236    	; 0xc2 <writeChar+0x14>
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset));
		break;
		
		case '8':
		HEAD  += (1 << (0 + offset));
     1ae:	fa 01       	movw	r30, r20
     1b0:	10 81       	ld	r17, Z
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	9c 01       	movw	r18, r24
     1b8:	06 2e       	mov	r0, r22
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <writeChar+0x110>
     1bc:	22 0f       	add	r18, r18
     1be:	0a 94       	dec	r0
     1c0:	ea f7       	brpl	.-6      	; 0x1bc <writeChar+0x10e>
     1c2:	31 2f       	mov	r19, r17
     1c4:	32 0f       	add	r19, r18
     1c6:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     1c8:	f7 01       	movw	r30, r14
     1ca:	30 81       	ld	r19, Z
     1cc:	ab 01       	movw	r20, r22
     1ce:	4e 5f       	subi	r20, 0xFE	; 254
     1d0:	5f 4f       	sbci	r21, 0xFF	; 255
     1d2:	8c 01       	movw	r16, r24
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <writeChar+0x12a>
     1d6:	00 0f       	add	r16, r16
     1d8:	4a 95       	dec	r20
     1da:	ea f7       	brpl	.-6      	; 0x1d6 <writeChar+0x128>
     1dc:	40 2f       	mov	r20, r16
     1de:	42 2b       	or	r20, r18
     1e0:	34 0f       	add	r19, r20
     1e2:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     1e4:	38 81       	ld	r19, Y
     1e6:	ab 01       	movw	r20, r22
     1e8:	4f 5f       	subi	r20, 0xFF	; 255
     1ea:	5f 4f       	sbci	r21, 0xFF	; 255
     1ec:	fc 01       	movw	r30, r24
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <writeChar+0x146>
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	4a 95       	dec	r20
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <writeChar+0x142>
     1f8:	af 01       	movw	r20, r30
     1fa:	40 2b       	or	r20, r16
     1fc:	42 2b       	or	r20, r18
     1fe:	6d 5f       	subi	r22, 0xFD	; 253
     200:	7f 4f       	sbci	r23, 0xFF	; 255
     202:	01 c0       	rjmp	.+2      	; 0x206 <writeChar+0x158>
     204:	88 0f       	add	r24, r24
     206:	6a 95       	dec	r22
     208:	ea f7       	brpl	.-6      	; 0x204 <writeChar+0x156>
     20a:	84 2b       	or	r24, r20
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     20c:	83 0f       	add	r24, r19
     20e:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     210:	8c 91       	ld	r24, X
     212:	28 0f       	add	r18, r24
     214:	2c 93       	st	X, r18
		break;
		
		default:
		break;
	}
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	08 95       	ret
	LEGS  &= (0x0F0 >> offset);
	FEET  &= (0x0F0 >> offset);
	
	switch (c){
		case '0':
		HEAD  += (1 << (0 + offset));
     224:	fa 01       	movw	r30, r20
     226:	10 81       	ld	r17, Z
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	9c 01       	movw	r18, r24
     22e:	06 2e       	mov	r0, r22
     230:	01 c0       	rjmp	.+2      	; 0x234 <writeChar+0x186>
     232:	22 0f       	add	r18, r18
     234:	0a 94       	dec	r0
     236:	ea f7       	brpl	.-6      	; 0x232 <writeChar+0x184>
     238:	31 2f       	mov	r19, r17
     23a:	32 0f       	add	r19, r18
     23c:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     23e:	f7 01       	movw	r30, r14
     240:	30 81       	ld	r19, Z
     242:	6e 5f       	subi	r22, 0xFE	; 254
     244:	7f 4f       	sbci	r23, 0xFF	; 255
     246:	01 c0       	rjmp	.+2      	; 0x24a <writeChar+0x19c>
     248:	88 0f       	add	r24, r24
     24a:	6a 95       	dec	r22
     24c:	ea f7       	brpl	.-6      	; 0x248 <writeChar+0x19a>
     24e:	82 2b       	or	r24, r18
     250:	93 2f       	mov	r25, r19
     252:	98 0f       	add	r25, r24
     254:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset)) | (1 << (2 + offset));
     256:	98 81       	ld	r25, Y
     258:	89 0f       	add	r24, r25
     25a:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     25c:	8c 91       	ld	r24, X
     25e:	28 0f       	add	r18, r24
     260:	2c 93       	st	X, r18
		break;
     262:	95 cf       	rjmp	.-214    	; 0x18e <writeChar+0xe0>
		
		case '1':
		CHEST += (1 << (0 + offset));
     264:	d7 01       	movw	r26, r14
     266:	2c 91       	ld	r18, X
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <writeChar+0x1c2>
     26e:	88 0f       	add	r24, r24
     270:	6a 95       	dec	r22
     272:	ea f7       	brpl	.-6      	; 0x26e <writeChar+0x1c0>
     274:	92 2f       	mov	r25, r18
     276:	98 0f       	add	r25, r24
     278:	9c 93       	st	X, r25
		LEGS  += (1 << (0 + offset));
     27a:	98 81       	ld	r25, Y
     27c:	89 0f       	add	r24, r25
     27e:	88 83       	st	Y, r24
		break;
     280:	86 cf       	rjmp	.-244    	; 0x18e <writeChar+0xe0>
		
		case '2':
		HEAD  += (1 << (0 + offset));
     282:	fa 01       	movw	r30, r20
     284:	10 81       	ld	r17, Z
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	9c 01       	movw	r18, r24
     28c:	06 2e       	mov	r0, r22
     28e:	01 c0       	rjmp	.+2      	; 0x292 <writeChar+0x1e4>
     290:	22 0f       	add	r18, r18
     292:	0a 94       	dec	r0
     294:	ea f7       	brpl	.-6      	; 0x290 <writeChar+0x1e2>
     296:	31 2f       	mov	r19, r17
     298:	32 0f       	add	r19, r18
     29a:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     29c:	f7 01       	movw	r30, r14
     29e:	30 81       	ld	r19, Z
     2a0:	32 0f       	add	r19, r18
     2a2:	30 83       	st	Z, r19
		LEGS  += (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     2a4:	38 81       	ld	r19, Y
     2a6:	ab 01       	movw	r20, r22
     2a8:	4f 5f       	subi	r20, 0xFF	; 255
     2aa:	5f 4f       	sbci	r21, 0xFF	; 255
     2ac:	fc 01       	movw	r30, r24
     2ae:	04 2e       	mov	r0, r20
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <writeChar+0x206>
     2b2:	ee 0f       	add	r30, r30
     2b4:	0a 94       	dec	r0
     2b6:	ea f7       	brpl	.-6      	; 0x2b2 <writeChar+0x204>
     2b8:	4f 5f       	subi	r20, 0xFF	; 255
     2ba:	5f 4f       	sbci	r21, 0xFF	; 255
     2bc:	8c 01       	movw	r16, r24
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <writeChar+0x216>
     2c0:	00 0f       	add	r16, r16
     2c2:	11 1f       	adc	r17, r17
     2c4:	4a 95       	dec	r20
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <writeChar+0x212>
     2c8:	a8 01       	movw	r20, r16
     2ca:	4e 2b       	or	r20, r30
     2cc:	6d 5f       	subi	r22, 0xFD	; 253
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <writeChar+0x226>
     2d2:	88 0f       	add	r24, r24
     2d4:	6a 95       	dec	r22
     2d6:	ea f7       	brpl	.-6      	; 0x2d2 <writeChar+0x224>
     2d8:	84 2b       	or	r24, r20
     2da:	98 cf       	rjmp	.-208    	; 0x20c <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
     2dc:	fa 01       	movw	r30, r20
     2de:	10 81       	ld	r17, Z
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	9c 01       	movw	r18, r24
     2e6:	06 2e       	mov	r0, r22
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <writeChar+0x23e>
     2ea:	22 0f       	add	r18, r18
     2ec:	0a 94       	dec	r0
     2ee:	ea f7       	brpl	.-6      	; 0x2ea <writeChar+0x23c>
     2f0:	31 2f       	mov	r19, r17
     2f2:	32 0f       	add	r19, r18
     2f4:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     2f6:	f7 01       	movw	r30, r14
     2f8:	30 81       	ld	r19, Z
     2fa:	32 0f       	add	r19, r18
     2fc:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     2fe:	38 81       	ld	r19, Y
     300:	ab 01       	movw	r20, r22
     302:	4f 5f       	subi	r20, 0xFF	; 255
     304:	5f 4f       	sbci	r21, 0xFF	; 255
     306:	8c 01       	movw	r16, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <writeChar+0x260>
     30a:	00 0f       	add	r16, r16
     30c:	11 1f       	adc	r17, r17
     30e:	4a 95       	dec	r20
     310:	e2 f7       	brpl	.-8      	; 0x30a <writeChar+0x25c>
     312:	a8 01       	movw	r20, r16
     314:	6d 5f       	subi	r22, 0xFD	; 253
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	01 c0       	rjmp	.+2      	; 0x31c <writeChar+0x26e>
     31a:	88 0f       	add	r24, r24
     31c:	6a 95       	dec	r22
     31e:	ea f7       	brpl	.-6      	; 0x31a <writeChar+0x26c>
     320:	84 2b       	or	r24, r20
     322:	82 2b       	or	r24, r18
     324:	73 cf       	rjmp	.-282    	; 0x20c <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '4':
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     326:	d7 01       	movw	r26, r14
     328:	4c 91       	ld	r20, X
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	9c 01       	movw	r18, r24
     330:	06 2e       	mov	r0, r22
     332:	01 c0       	rjmp	.+2      	; 0x336 <writeChar+0x288>
     334:	22 0f       	add	r18, r18
     336:	0a 94       	dec	r0
     338:	ea f7       	brpl	.-6      	; 0x334 <writeChar+0x286>
     33a:	fb 01       	movw	r30, r22
     33c:	32 96       	adiw	r30, 0x02	; 2
     33e:	8c 01       	movw	r16, r24
     340:	02 c0       	rjmp	.+4      	; 0x346 <writeChar+0x298>
     342:	00 0f       	add	r16, r16
     344:	11 1f       	adc	r17, r17
     346:	ea 95       	dec	r30
     348:	e2 f7       	brpl	.-8      	; 0x342 <writeChar+0x294>
     34a:	32 2f       	mov	r19, r18
     34c:	30 2b       	or	r19, r16
     34e:	34 0f       	add	r19, r20
     350:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     352:	38 81       	ld	r19, Y
     354:	ab 01       	movw	r20, r22
     356:	4f 5f       	subi	r20, 0xFF	; 255
     358:	5f 4f       	sbci	r21, 0xFF	; 255
     35a:	dc 01       	movw	r26, r24
     35c:	02 c0       	rjmp	.+4      	; 0x362 <writeChar+0x2b4>
     35e:	aa 0f       	add	r26, r26
     360:	bb 1f       	adc	r27, r27
     362:	4a 95       	dec	r20
     364:	e2 f7       	brpl	.-8      	; 0x35e <writeChar+0x2b0>
     366:	ad 01       	movw	r20, r26
     368:	08 cf       	rjmp	.-496    	; 0x17a <writeChar+0xcc>
		break;
		
		case '5':
		HEAD  += (1 << (0 + offset));
     36a:	fa 01       	movw	r30, r20
     36c:	10 81       	ld	r17, Z
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9c 01       	movw	r18, r24
     374:	06 2e       	mov	r0, r22
     376:	01 c0       	rjmp	.+2      	; 0x37a <writeChar+0x2cc>
     378:	22 0f       	add	r18, r18
     37a:	0a 94       	dec	r0
     37c:	ea f7       	brpl	.-6      	; 0x378 <writeChar+0x2ca>
     37e:	31 2f       	mov	r19, r17
     380:	32 0f       	add	r19, r18
     382:	30 83       	st	Z, r19
		CHEST += (1 << (2 + offset));
     384:	f7 01       	movw	r30, r14
     386:	30 81       	ld	r19, Z
     388:	ab 01       	movw	r20, r22
     38a:	4e 5f       	subi	r20, 0xFE	; 254
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	8c 01       	movw	r16, r24
     390:	02 c0       	rjmp	.+4      	; 0x396 <writeChar+0x2e8>
     392:	00 0f       	add	r16, r16
     394:	11 1f       	adc	r17, r17
     396:	4a 95       	dec	r20
     398:	e2 f7       	brpl	.-8      	; 0x392 <writeChar+0x2e4>
     39a:	a8 01       	movw	r20, r16
     39c:	43 0f       	add	r20, r19
     39e:	40 83       	st	Z, r20
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     3a0:	38 81       	ld	r19, Y
     3a2:	ab 01       	movw	r20, r22
     3a4:	4f 5f       	subi	r20, 0xFF	; 255
     3a6:	5f 4f       	sbci	r21, 0xFF	; 255
     3a8:	fc 01       	movw	r30, r24
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <writeChar+0x302>
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	4a 95       	dec	r20
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <writeChar+0x2fe>
     3b4:	af 01       	movw	r20, r30
     3b6:	ae cf       	rjmp	.-164    	; 0x314 <writeChar+0x266>
		FEET  += (1 << (0 + offset));
		break;
		
		case '6':
		HEAD  += (1 << (0 + offset));
     3b8:	fa 01       	movw	r30, r20
     3ba:	20 81       	ld	r18, Z
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	8c 01       	movw	r16, r24
     3c2:	06 2e       	mov	r0, r22
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <writeChar+0x31a>
     3c6:	00 0f       	add	r16, r16
     3c8:	0a 94       	dec	r0
     3ca:	ea f7       	brpl	.-6      	; 0x3c6 <writeChar+0x318>
     3cc:	20 0f       	add	r18, r16
     3ce:	20 83       	st	Z, r18
		CHEST += (1 << (2 + offset));
     3d0:	f7 01       	movw	r30, r14
     3d2:	40 81       	ld	r20, Z
     3d4:	9b 01       	movw	r18, r22
     3d6:	2e 5f       	subi	r18, 0xFE	; 254
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	fc 01       	movw	r30, r24
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <writeChar+0x334>
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	2a 95       	dec	r18
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <writeChar+0x330>
     3e6:	9f 01       	movw	r18, r30
     3e8:	34 2f       	mov	r19, r20
     3ea:	32 0f       	add	r19, r18
     3ec:	f7 01       	movw	r30, r14
     3ee:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     3f0:	38 81       	ld	r19, Y
     3f2:	ab 01       	movw	r20, r22
     3f4:	4f 5f       	subi	r20, 0xFF	; 255
     3f6:	5f 4f       	sbci	r21, 0xFF	; 255
     3f8:	fc 01       	movw	r30, r24
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	4a 95       	dec	r20
     402:	e2 f7       	brpl	.-8      	; 0x3fc <writeChar+0x34e>
     404:	2e 2b       	or	r18, r30
     406:	20 2b       	or	r18, r16
     408:	6d 5f       	subi	r22, 0xFD	; 253
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	88 0f       	add	r24, r24
     410:	6a 95       	dec	r22
     412:	ea f7       	brpl	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     414:	82 2b       	or	r24, r18
     416:	83 0f       	add	r24, r19
     418:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     41a:	8c 91       	ld	r24, X
     41c:	e0 2f       	mov	r30, r16
     41e:	e8 0f       	add	r30, r24
     420:	ec 93       	st	X, r30
		break;
     422:	b5 ce       	rjmp	.-662    	; 0x18e <writeChar+0xe0>
		
		case '7':
		HEAD  += (1 << (0 + offset));
     424:	da 01       	movw	r26, r20
     426:	2c 91       	ld	r18, X
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	88 0f       	add	r24, r24
     430:	6a 95       	dec	r22
     432:	ea f7       	brpl	.-6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     434:	92 2f       	mov	r25, r18
     436:	98 0f       	add	r25, r24
     438:	9c 93       	st	X, r25
		CHEST += (1 << (0 + offset));
     43a:	f7 01       	movw	r30, r14
     43c:	90 81       	ld	r25, Z
     43e:	98 0f       	add	r25, r24
     440:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset));
     442:	98 81       	ld	r25, Y
     444:	89 0f       	add	r24, r25
     446:	88 83       	st	Y, r24
		break;
     448:	a2 ce       	rjmp	.-700    	; 0x18e <writeChar+0xe0>

0000044a <printAt>:
		default:
		break;
	}
}

void printAt(GUI *self, int num) {
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	7b 01       	movw	r14, r22
	int pp = self->focus * 4;
     458:	fc 01       	movw	r30, r24
     45a:	c4 81       	ldd	r28, Z+4	; 0x04
     45c:	d5 81       	ldd	r29, Z+5	; 0x05
     45e:	cc 0f       	add	r28, r28
     460:	dd 1f       	adc	r29, r29
     462:	cc 0f       	add	r28, r28
     464:	dd 1f       	adc	r29, r29
	writeChar( (num % 100) / 10 + '0', pp);
     466:	cb 01       	movw	r24, r22
     468:	64 e6       	ldi	r22, 0x64	; 100
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodhi4>
     470:	0a e0       	ldi	r16, 0x0A	; 10
     472:	10 e0       	ldi	r17, 0x00	; 0
     474:	b8 01       	movw	r22, r16
     476:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodhi4>
     47a:	86 2f       	mov	r24, r22
     47c:	be 01       	movw	r22, r28
     47e:	80 5d       	subi	r24, 0xD0	; 208
     480:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     484:	21 96       	adiw	r28, 0x01	; 1
     486:	c7 01       	movw	r24, r14
     488:	b8 01       	movw	r22, r16
     48a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodhi4>
     48e:	be 01       	movw	r22, r28
     490:	80 5d       	subi	r24, 0xD0	; 208
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14

void printAt(GUI *self, int num) {
	int pp = self->focus * 4;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     49e:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

000004a2 <initLCD>:



void initLCD(){
	// LCD
	CLKPR = 0x80;
     4a2:	e1 e6       	ldi	r30, 0x61	; 97
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	80 83       	st	Z, r24
	CLKPR = 0x00;
     4aa:	10 82       	st	Z, r1

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     4ac:	90 ec       	ldi	r25, 0xC0	; 192
     4ae:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     4b2:	87 e3       	ldi	r24, 0x37	; 55
     4b4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     4b8:	87 e0       	ldi	r24, 0x07	; 7
     4ba:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     4be:	8f e0       	ldi	r24, 0x0F	; 15
     4c0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	
	
	// Button
	PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
     4c4:	85 b1       	in	r24, 0x05	; 5
     4c6:	80 6d       	ori	r24, 0xD0	; 208
     4c8:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE2)|(1<<PE3);
     4ca:	8e b1       	in	r24, 0x0e	; 14
     4cc:	8c 60       	ori	r24, 0x0C	; 12
     4ce:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
     4d0:	8f e2       	ldi	r24, 0x2F	; 47
     4d2:	84 b9       	out	0x04, r24	; 4
	//DDRE   = (1<<DDE6)|(1<<DDE4);
	
	//Insert nop for synchronization
	asm("nop");
     4d4:	00 00       	nop

	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
     4dc:	80 ed       	ldi	r24, 0xD0	; 208
     4de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
     4e2:	9d bb       	out	0x1d, r25	; 29



	// Prints startup chars
	LCDDR1 = (1 << 2);
     4e4:	84 e0       	ldi	r24, 0x04	; 4
     4e6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	writeChar('0', 0);
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	writeChar('0', 1);
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e3       	ldi	r24, 0x30	; 48
     4fa:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	writeChar('0', 4);
     4fe:	64 e0       	ldi	r22, 0x04	; 4
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	writeChar('0', 5);
     508:	65 e0       	ldi	r22, 0x05	; 5
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	80 e3       	ldi	r24, 0x30	; 48
     50e:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

00000512 <switchFocus>:
}


void switchFocus(GUI *self){
	self->focus = !self->focus;
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	24 81       	ldd	r18, Z+4	; 0x04
     51a:	35 81       	ldd	r19, Z+5	; 0x05
     51c:	23 2b       	or	r18, r19
     51e:	11 f0       	breq	.+4      	; 0x524 <switchFocus+0x12>
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	55 83       	std	Z+5, r21	; 0x05
     528:	44 83       	std	Z+4, r20	; 0x04
	LCDDR1 = (1 <<( 2 - self->focus));
     52a:	22 e0       	ldi	r18, 0x02	; 2
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	24 1b       	sub	r18, r20
     530:	35 0b       	sbc	r19, r21
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	01 c0       	rjmp	.+2      	; 0x53a <switchFocus+0x28>
     538:	88 0f       	add	r24, r24
     53a:	2a 95       	dec	r18
     53c:	ea f7       	brpl	.-6      	; 0x538 <switchFocus+0x26>
     53e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     542:	08 95       	ret

00000544 <initialize>:





void initialize(InputHandler *self){
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
	SYNC(self->gui, initLCD, NULL);
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	61 e5       	ldi	r22, 0x51	; 81
     55c:	72 e0       	ldi	r23, 0x02	; 2
     55e:	88 85       	ldd	r24, Y+8	; 0x08
     560:	99 85       	ldd	r25, Y+9	; 0x09
     562:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <sync>
	ASYNC(self->pGen[0], generatePulse, NULL);
     566:	0c 81       	ldd	r16, Y+4	; 0x04
     568:	1d 81       	ldd	r17, Y+5	; 0x05
     56a:	c1 2c       	mov	r12, r1
     56c:	d1 2c       	mov	r13, r1
     56e:	83 e9       	ldi	r24, 0x93	; 147
     570:	e8 2e       	mov	r14, r24
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	f8 2e       	mov	r15, r24
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	cb 01       	movw	r24, r22
     582:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
	ASYNC(self->pGen[1], generatePulse, NULL);
     586:	0e 81       	ldd	r16, Y+6	; 0x06
     588:	1f 81       	ldd	r17, Y+7	; 0x07
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	a9 01       	movw	r20, r18
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	cb 01       	movw	r24, r22
     596:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	df 90       	pop	r13
     5a8:	cf 90       	pop	r12
     5aa:	08 95       	ret

000005ac <joystickCrossways>:





void joystickCrossways(InputHandler *self){
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
	//#define repPeriod 150

	
	
	// Depressed
	if(!(PINB-P6-P7)){
     5be:	83 b1       	in	r24, 0x03	; 3
     5c0:	80 3c       	cpi	r24, 0xC0	; 192
     5c2:	59 f1       	breq	.+86     	; 0x61a <joystickCrossways+0x6e>
		ASYNC(SELECTED_PGEN, saveOrLoadFrequency, NULL);
		//ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);					// Print new value to screen
	}
	
	// Up
	if(!(PINB-P4-P7)){
     5c4:	83 b1       	in	r24, 0x03	; 3
     5c6:	80 39       	cpi	r24, 0x90	; 144
     5c8:	09 f4       	brne	.+2      	; 0x5cc <joystickCrossways+0x20>
     5ca:	45 c0       	rjmp	.+138    	; 0x656 <joystickCrossways+0xaa>
			
		//AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
	}
	
	// Down
	if(!(PINB-P4-P6)){
     5cc:	83 b1       	in	r24, 0x03	; 3
     5ce:	80 35       	cpi	r24, 0x50	; 80
     5d0:	49 f0       	breq	.+18     	; 0x5e4 <joystickCrossways+0x38>
		//AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
	}
	
	
	
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	08 95       	ret
		//AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
	}
	
	// Down
	if(!(PINB-P4-P6)){
		ASYNC(SELECTED_PGEN, increaseFrequency, -1);
     5e4:	e8 85       	ldd	r30, Y+8	; 0x08
     5e6:	f9 85       	ldd	r31, Y+9	; 0x09
     5e8:	84 81       	ldd	r24, Z+4	; 0x04
     5ea:	95 81       	ldd	r25, Z+5	; 0x05
     5ec:	02 96       	adiw	r24, 0x02	; 2
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	c8 0f       	add	r28, r24
     5f4:	d9 1f       	adc	r29, r25
     5f6:	08 81       	ld	r16, Y
     5f8:	19 81       	ldd	r17, Y+1	; 0x01
     5fa:	cc 24       	eor	r12, r12
     5fc:	ca 94       	dec	r12
     5fe:	dc 2c       	mov	r13, r12
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	e4 2e       	mov	r14, r20
     604:	44 e0       	ldi	r20, 0x04	; 4
     606:	f4 2e       	mov	r15, r20
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	a9 01       	movw	r20, r18
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	cb 01       	movw	r24, r22
     614:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
		//AFTER(MSEC(bl+repPeriod), self, joystickCrossways, bl+repPeriod);		// For holding down button
	}
	
	
	
}
     618:	dc cf       	rjmp	.-72     	; 0x5d2 <joystickCrossways+0x26>

	
	
	// Depressed
	if(!(PINB-P6-P7)){
		ASYNC(SELECTED_PGEN, saveOrLoadFrequency, NULL);
     61a:	e8 85       	ldd	r30, Y+8	; 0x08
     61c:	f9 85       	ldd	r31, Y+9	; 0x09
     61e:	04 80       	ldd	r0, Z+4	; 0x04
     620:	f5 81       	ldd	r31, Z+5	; 0x05
     622:	e0 2d       	mov	r30, r0
     624:	32 96       	adiw	r30, 0x02	; 2
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ec 0f       	add	r30, r28
     62c:	fd 1f       	adc	r31, r29
     62e:	00 81       	ld	r16, Z
     630:	11 81       	ldd	r17, Z+1	; 0x01
     632:	c1 2c       	mov	r12, r1
     634:	d1 2c       	mov	r13, r1
     636:	b5 e6       	ldi	r27, 0x65	; 101
     638:	eb 2e       	mov	r14, r27
     63a:	b4 e0       	ldi	r27, 0x04	; 4
     63c:	fb 2e       	mov	r15, r27
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	cb 01       	movw	r24, r22
     64a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
		//ASYNC(self->gui, printAt, SELECTED_PGEN->frequency);					// Print new value to screen
	}
	
	// Up
	if(!(PINB-P4-P7)){
     64e:	83 b1       	in	r24, 0x03	; 3
     650:	80 39       	cpi	r24, 0x90	; 144
     652:	09 f0       	breq	.+2      	; 0x656 <joystickCrossways+0xaa>
     654:	bb cf       	rjmp	.-138    	; 0x5cc <joystickCrossways+0x20>
		ASYNC(SELECTED_PGEN, increaseFrequency, 1);
     656:	e8 85       	ldd	r30, Y+8	; 0x08
     658:	f9 85       	ldd	r31, Y+9	; 0x09
     65a:	04 80       	ldd	r0, Z+4	; 0x04
     65c:	f5 81       	ldd	r31, Z+5	; 0x05
     65e:	e0 2d       	mov	r30, r0
     660:	32 96       	adiw	r30, 0x02	; 2
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ec 0f       	add	r30, r28
     668:	fd 1f       	adc	r31, r29
     66a:	00 81       	ld	r16, Z
     66c:	11 81       	ldd	r17, Z+1	; 0x01
     66e:	cc 24       	eor	r12, r12
     670:	c3 94       	inc	r12
     672:	d1 2c       	mov	r13, r1
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	e7 2e       	mov	r14, r23
     678:	74 e0       	ldi	r23, 0x04	; 4
     67a:	f7 2e       	mov	r15, r23
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	cb 01       	movw	r24, r22
     688:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
     68c:	9f cf       	rjmp	.-194    	; 0x5cc <joystickCrossways+0x20>

0000068e <joystickSideways>:
	
}



void joystickSideways(InputHandler *self, int arg){
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
	
	if(self->risingEdge){
     69a:	fc 01       	movw	r30, r24
     69c:	22 85       	ldd	r18, Z+10	; 0x0a
     69e:	21 11       	cpse	r18, r1
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <joystickSideways+0x28>
		self->risingEdge = false;
		ASYNC(self->gui, switchFocus, arg);
	}else{
		self->risingEdge = true;
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	fc 01       	movw	r30, r24
     6a6:	22 87       	std	Z+10, r18	; 0x0a
	}
	
}
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	08 95       	ret
     6b6:	6b 01       	movw	r12, r22


void joystickSideways(InputHandler *self, int arg){
	
	if(self->risingEdge){
		self->risingEdge = false;
     6b8:	12 86       	std	Z+10, r1	; 0x0a
		ASYNC(self->gui, switchFocus, arg);
     6ba:	00 85       	ldd	r16, Z+8	; 0x08
     6bc:	11 85       	ldd	r17, Z+9	; 0x09
     6be:	89 e8       	ldi	r24, 0x89	; 137
     6c0:	e8 2e       	mov	r14, r24
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	f8 2e       	mov	r15, r24
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	a9 01       	movw	r20, r18
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	cb 01       	movw	r24, r22
     6d2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
	}else{
		self->risingEdge = true;
	}
	
}
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	08 95       	ret

000006e4 <main>:

int main(void)
{
	

	INSTALL(&inputHandler, joystickCrossways, IRQ_PCINT1);	// Up, Down & Depressed
     6e4:	42 e0       	ldi	r20, 0x02	; 2
     6e6:	66 ed       	ldi	r22, 0xD6	; 214
     6e8:	72 e0       	ldi	r23, 0x02	; 2
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 ab 10 	call	0x2156	; 0x2156 <install>
	INSTALL(&inputHandler, joystickSideways, IRQ_PCINT0);	// Left & Right
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	67 e4       	ldi	r22, 0x47	; 71
     6f6:	73 e0       	ldi	r23, 0x03	; 3
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 ab 10 	call	0x2156	; 0x2156 <install>
	
	return TINYTIMBER(&inputHandler, initialize, NULL);
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	62 ea       	ldi	r22, 0xA2	; 162
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0c 94 c5 10 	jmp	0x218a	; 0x218a <tinytimber>

00000710 <writeToPin>:
	Object super;
} PortWriter;


void writeToPin(PortWriter *self, int args[]){
	PINE = (args[0] << args[1]);
     710:	fb 01       	movw	r30, r22
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	02 80       	ldd	r0, Z+2	; 0x02
     718:	02 c0       	rjmp	.+4      	; 0x71e <writeToPin+0xe>
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	0a 94       	dec	r0
     720:	e2 f7       	brpl	.-8      	; 0x71a <writeToPin+0xa>
     722:	8c b9       	out	0x0c, r24	; 12
     724:	08 95       	ret

00000726 <generatePulse>:
	
	ASYNC(self->gui, printAt, self->frequency);
}


void generatePulse(PulseGenerator *self){
     726:	af 92       	push	r10
     728:	bf 92       	push	r11
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	00 d0       	rcall	.+0      	; 0x73c <generatePulse+0x16>
     73c:	00 d0       	rcall	.+0      	; 0x73e <generatePulse+0x18>
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	5c 01       	movw	r10, r24
	
	if(self->frequency == 0){
     744:	fc 01       	movw	r30, r24
     746:	22 85       	ldd	r18, Z+10	; 0x0a
     748:	33 85       	ldd	r19, Z+11	; 0x0b
     74a:	21 15       	cp	r18, r1
     74c:	31 05       	cpc	r19, r1
     74e:	09 f4       	brne	.+2      	; 0x752 <generatePulse+0x2c>
     750:	46 c0       	rjmp	.+140    	; 0x7de <generatePulse+0xb8>
		self->isHigh = 0;
		
		AFTER(MSEC(500), self, generatePulse, NULL);
	}
	else{
		self->isHigh = !self->isHigh;
     752:	fc 01       	movw	r30, r24
     754:	96 85       	ldd	r25, Z+14	; 0x0e
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	89 27       	eor	r24, r25
     75a:	86 87       	std	Z+14, r24	; 0x0e
			
		AFTER(USEC(500000/self->frequency), self, generatePulse, NULL);	
     75c:	03 2e       	mov	r0, r19
     75e:	00 0c       	add	r0, r0
     760:	44 0b       	sbc	r20, r20
     762:	55 0b       	sbc	r21, r21
     764:	69 e0       	ldi	r22, 0x09	; 9
     766:	7d e3       	ldi	r23, 0x3D	; 61
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__divmodsi4>
     770:	ca 01       	movw	r24, r20
     772:	b9 01       	movw	r22, r18
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
     778:	23 e9       	ldi	r18, 0x93	; 147
     77a:	e2 2e       	mov	r14, r18
     77c:	23 e0       	ldi	r18, 0x03	; 3
     77e:	f2 2e       	mov	r15, r18
     780:	85 01       	movw	r16, r10
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
	}
	
	int temp[] = {self->isHigh, self->pin};
     78c:	f5 01       	movw	r30, r10
     78e:	86 85       	ldd	r24, Z+14	; 0x0e
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	80 85       	ldd	r24, Z+8	; 0x08
     798:	91 85       	ldd	r25, Z+9	; 0x09
     79a:	9c 83       	std	Y+4, r25	; 0x04
     79c:	8b 83       	std	Y+3, r24	; 0x03
	ASYNC(self->pWriter, writeToPin, temp);
     79e:	04 81       	ldd	r16, Z+4	; 0x04
     7a0:	15 81       	ldd	r17, Z+5	; 0x05
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	6c 01       	movw	r12, r24
     7a8:	88 e8       	ldi	r24, 0x88	; 136
     7aa:	e8 2e       	mov	r14, r24
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	f8 2e       	mov	r15, r24
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	a9 01       	movw	r20, r18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	08 95       	ret


void generatePulse(PulseGenerator *self){
	
	if(self->frequency == 0){
		self->isHigh = 0;
     7de:	16 86       	std	Z+14, r1	; 0x0e
		
		AFTER(MSEC(500), self, generatePulse, NULL);
     7e0:	c1 2c       	mov	r12, r1
     7e2:	d1 2c       	mov	r13, r1
     7e4:	33 e9       	ldi	r19, 0x93	; 147
     7e6:	e3 2e       	mov	r14, r19
     7e8:	33 e0       	ldi	r19, 0x03	; 3
     7ea:	f3 2e       	mov	r15, r19
     7ec:	8c 01       	movw	r16, r24
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	a9 01       	movw	r20, r18
     7f4:	69 e0       	ldi	r22, 0x09	; 9
     7f6:	7d e3       	ldi	r23, 0x3D	; 61
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
     800:	c5 cf       	rjmp	.-118    	; 0x78c <generatePulse+0x66>

00000802 <increaseFrequency>:
	bool isHigh;
} PulseGenerator;



void increaseFrequency(PulseGenerator *self, int amount){
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	ec 01       	movw	r28, r24
     818:	5b 01       	movw	r10, r22
	
	self->frequency += amount;
     81a:	ca 84       	ldd	r12, Y+10	; 0x0a
     81c:	db 84       	ldd	r13, Y+11	; 0x0b
     81e:	c6 0e       	add	r12, r22
     820:	d7 1e       	adc	r13, r23
	
	if(self->frequency < 0) { self->frequency =  0; }
     822:	d7 fc       	sbrc	r13, 7
     824:	2a c0       	rjmp	.+84     	; 0x87a <increaseFrequency+0x78>
	if(self->frequency > 99){ self->frequency = 99; }
     826:	84 e6       	ldi	r24, 0x64	; 100
     828:	c8 16       	cp	r12, r24
     82a:	d1 04       	cpc	r13, r1
     82c:	5c f1       	brlt	.+86     	; 0x884 <increaseFrequency+0x82>
     82e:	83 e6       	ldi	r24, 0x63	; 99
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9b 87       	std	Y+11, r25	; 0x0b
     834:	8a 87       	std	Y+10, r24	; 0x0a
     836:	33 e6       	ldi	r19, 0x63	; 99
     838:	c3 2e       	mov	r12, r19
     83a:	d1 2c       	mov	r13, r1
		
	
	ASYNC(self->gui, printAt, self->frequency);
     83c:	0e 81       	ldd	r16, Y+6	; 0x06
     83e:	1f 81       	ldd	r17, Y+7	; 0x07
     840:	25 e2       	ldi	r18, 0x25	; 37
     842:	e2 2e       	mov	r14, r18
     844:	22 e0       	ldi	r18, 0x02	; 2
     846:	f2 2e       	mov	r15, r18
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a9 01       	movw	r20, r18
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	cb 01       	movw	r24, r22
     854:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
	#define P7 (1<<PINB7)
	#define repPeriod 150
	
	
	// Up
	if(!(PINB-P4-P7)){
     858:	83 b1       	in	r24, 0x03	; 3
     85a:	80 39       	cpi	r24, 0x90	; 144
     85c:	31 f1       	breq	.+76     	; 0x8aa <increaseFrequency+0xa8>
		AFTER(MSEC(repPeriod), self, increaseFrequency, amount);		// For holding down button
	}
	
	// Down
	if(!(PINB-P4-P6)){
     85e:	83 b1       	in	r24, 0x03	; 3
     860:	80 35       	cpi	r24, 0x50	; 80
     862:	99 f0       	breq	.+38     	; 0x88a <increaseFrequency+0x88>
		AFTER(MSEC(repPeriod), self, increaseFrequency, amount);		// For holding down button
	}
	
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	08 95       	ret

void increaseFrequency(PulseGenerator *self, int amount){
	
	self->frequency += amount;
	
	if(self->frequency < 0) { self->frequency =  0; }
     87a:	1b 86       	std	Y+11, r1	; 0x0b
     87c:	1a 86       	std	Y+10, r1	; 0x0a
     87e:	c1 2c       	mov	r12, r1
     880:	d1 2c       	mov	r13, r1
     882:	dc cf       	rjmp	.-72     	; 0x83c <increaseFrequency+0x3a>



void increaseFrequency(PulseGenerator *self, int amount){
	
	self->frequency += amount;
     884:	db 86       	std	Y+11, r13	; 0x0b
     886:	ca 86       	std	Y+10, r12	; 0x0a
     888:	d9 cf       	rjmp	.-78     	; 0x83c <increaseFrequency+0x3a>
		AFTER(MSEC(repPeriod), self, increaseFrequency, amount);		// For holding down button
	}
	
	// Down
	if(!(PINB-P4-P6)){
		AFTER(MSEC(repPeriod), self, increaseFrequency, amount);		// For holding down button
     88a:	65 01       	movw	r12, r10
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	e8 2e       	mov	r14, r24
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	f8 2e       	mov	r15, r24
     894:	8e 01       	movw	r16, r28
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	a9 01       	movw	r20, r18
     89c:	6f e4       	ldi	r22, 0x4F	; 79
     89e:	72 e1       	ldi	r23, 0x12	; 18
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
	}
	
}
     8a8:	dd cf       	rjmp	.-70     	; 0x864 <increaseFrequency+0x62>
	#define repPeriod 150
	
	
	// Up
	if(!(PINB-P4-P7)){
		AFTER(MSEC(repPeriod), self, increaseFrequency, amount);		// For holding down button
     8aa:	65 01       	movw	r12, r10
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	e9 2e       	mov	r14, r25
     8b0:	94 e0       	ldi	r25, 0x04	; 4
     8b2:	f9 2e       	mov	r15, r25
     8b4:	8e 01       	movw	r16, r28
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	a9 01       	movw	r20, r18
     8bc:	6f e4       	ldi	r22, 0x4F	; 79
     8be:	72 e1       	ldi	r23, 0x12	; 18
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
     8c8:	ca cf       	rjmp	.-108    	; 0x85e <increaseFrequency+0x5c>

000008ca <saveOrLoadFrequency>:
	}
	
}


void saveOrLoadFrequency(PulseGenerator *self){
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	fc 01       	movw	r30, r24
	
	if (self->frequency == 0)
     8d8:	c2 84       	ldd	r12, Z+10	; 0x0a
     8da:	d3 84       	ldd	r13, Z+11	; 0x0b
     8dc:	c1 14       	cp	r12, r1
     8de:	d1 04       	cpc	r13, r1
     8e0:	b9 f0       	breq	.+46     	; 0x910 <saveOrLoadFrequency+0x46>
	{
		self->frequency = self->savedFreq;
	}
	else{
		self->savedFreq = self->frequency; 
     8e2:	d5 86       	std	Z+13, r13	; 0x0d
     8e4:	c4 86       	std	Z+12, r12	; 0x0c
	}
	
	
	ASYNC(self->gui, printAt, self->frequency);
     8e6:	06 81       	ldd	r16, Z+6	; 0x06
     8e8:	17 81       	ldd	r17, Z+7	; 0x07
     8ea:	85 e2       	ldi	r24, 0x25	; 37
     8ec:	e8 2e       	mov	r14, r24
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	f8 2e       	mov	r15, r24
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	a9 01       	movw	r20, r18
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	cb 01       	movw	r24, r22
     8fe:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
}
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	08 95       	ret

void saveOrLoadFrequency(PulseGenerator *self){
	
	if (self->frequency == 0)
	{
		self->frequency = self->savedFreq;
     910:	c4 84       	ldd	r12, Z+12	; 0x0c
     912:	d5 84       	ldd	r13, Z+13	; 0x0d
     914:	d3 86       	std	Z+11, r13	; 0x0b
     916:	c2 86       	std	Z+10, r12	; 0x0a
     918:	e6 cf       	rjmp	.-52     	; 0x8e6 <saveOrLoadFrequency+0x1c>

0000091a <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	00 d0       	rcall	.+0      	; 0x920 <initialize+0x6>
     920:	00 d0       	rcall	.+0      	; 0x922 <initialize+0x8>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	81 e3       	ldi	r24, 0x31	; 49
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	21 e1       	ldi	r18, 0x11	; 17
     92c:	33 e0       	ldi	r19, 0x03	; 3
     92e:	fc 01       	movw	r30, r24
     930:	70 97       	sbiw	r30, 0x10	; 16
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
     936:	40 96       	adiw	r24, 0x10	; 16
     938:	82 17       	cp	r24, r18
     93a:	93 07       	cpc	r25, r19
     93c:	c1 f7       	brne	.-16     	; 0x92e <initialize+0x14>
     93e:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <messages+0xe1>
     942:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <messages+0xe0>
     946:	ec e6       	ldi	r30, 0x6C	; 108
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	89 e8       	ldi	r24, 0x89	; 137
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	80 83       	st	Z, r24
     952:	86 ea       	ldi	r24, 0xA6	; 166
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	96 8f       	std	Z+30, r25	; 0x1e
     958:	85 8f       	std	Z+29, r24	; 0x1d
     95a:	a3 ec       	ldi	r26, 0xC3	; 195
     95c:	b1 e0       	ldi	r27, 0x01	; 1
     95e:	b3 af       	std	Z+59, r27	; 0x3b
     960:	a2 af       	std	Z+58, r26	; 0x3a
     962:	1d 92       	st	X+, r1
     964:	1c 92       	st	X, r1
     966:	fa 83       	std	Y+2, r31	; 0x02
     968:	e9 83       	std	Y+1, r30	; 0x01
     96a:	ed e6       	ldi	r30, 0x6D	; 109
     96c:	f3 e0       	ldi	r31, 0x03	; 3
     96e:	fc 83       	std	Y+4, r31	; 0x04
     970:	eb 83       	std	Y+3, r30	; 0x03
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	06 96       	adiw	r24, 0x06	; 6
     978:	0e 94 50 11 	call	0x22a0	; 0x22a0 <setjmp>
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	e9 81       	ldd	r30, Y+1	; 0x01
     982:	fa 81       	ldd	r31, Y+2	; 0x02
     984:	97 8b       	std	Z+23, r25	; 0x17
     986:	86 8b       	std	Z+22, r24	; 0x16
     988:	91 8f       	std	Z+25, r25	; 0x19
     98a:	80 8f       	std	Z+24, r24	; 0x18
     98c:	80 e3       	ldi	r24, 0x30	; 48
     98e:	90 e1       	ldi	r25, 0x10	; 16
     990:	94 8f       	std	Z+28, r25	; 0x1c
     992:	83 8f       	std	Z+27, r24	; 0x1b
     994:	15 82       	std	Z+5, r1	; 0x05
     996:	14 82       	std	Z+4, r1	; 0x04
     998:	7d 96       	adiw	r30, 0x1d	; 29
     99a:	fa 83       	std	Y+2, r31	; 0x02
     99c:	e9 83       	std	Y+1, r30	; 0x01
     99e:	eb 81       	ldd	r30, Y+3	; 0x03
     9a0:	fc 81       	ldd	r31, Y+4	; 0x04
     9a2:	e0 5a       	subi	r30, 0xA0	; 160
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	fc 83       	std	Y+4, r31	; 0x04
     9a8:	eb 83       	std	Y+3, r30	; 0x03
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	80 5e       	subi	r24, 0xE0	; 224
     9b0:	91 40       	sbci	r25, 0x01	; 1
     9b2:	f9 f6       	brne	.-66     	; 0x972 <initialize+0x58>
     9b4:	e4 e0       	ldi	r30, 0x04	; 4
     9b6:	f2 e0       	ldi	r31, 0x02	; 2
     9b8:	11 82       	std	Z+1, r1	; 0x01
     9ba:	10 82       	st	Z, r1
     9bc:	15 82       	std	Z+5, r1	; 0x05
     9be:	14 82       	std	Z+4, r1	; 0x04
     9c0:	13 82       	std	Z+3, r1	; 0x03
     9c2:	12 82       	std	Z+2, r1	; 0x02
     9c4:	e1 e6       	ldi	r30, 0x61	; 97
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 e8       	ldi	r24, 0x80	; 128
     9ca:	80 83       	st	Z, r24
     9cc:	10 82       	st	Z, r1
     9ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <dispatch>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <dispatch+0x6>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
     a02:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
     a06:	06 96       	adiw	r24, 0x06	; 6
     a08:	0e 94 50 11 	call	0x22a0	; 0x22a0 <setjmp>
     a0c:	89 2b       	or	r24, r25
     a0e:	29 f0       	breq	.+10     	; 0xa1a <dispatch+0x2a>
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <current+0x1>
     a22:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <current>
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	06 96       	adiw	r24, 0x06	; 6
     a2c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <longjmp>

00000a30 <schedule>:
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <msgQ>
     a3c:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <msgQ+0x1>
     a40:	30 97       	sbiw	r30, 0x00	; 0
     a42:	f1 f0       	breq	.+60     	; 0xa80 <schedule+0x50>
     a44:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
     a48:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	c1 f0       	breq	.+48     	; 0xa80 <schedule+0x50>
     a50:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <activeStack>
     a54:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <activeStack+0x1>
     a58:	aa 81       	ldd	r26, Y+2	; 0x02
     a5a:	bb 81       	ldd	r27, Y+3	; 0x03
     a5c:	10 97       	sbiw	r26, 0x00	; 0
     a5e:	a9 f0       	breq	.+42     	; 0xa8a <schedule+0x5a>
     a60:	46 81       	ldd	r20, Z+6	; 0x06
     a62:	57 81       	ldd	r21, Z+7	; 0x07
     a64:	60 85       	ldd	r22, Z+8	; 0x08
     a66:	71 85       	ldd	r23, Z+9	; 0x09
     a68:	16 96       	adiw	r26, 0x06	; 6
     a6a:	0d 91       	ld	r16, X+
     a6c:	1d 91       	ld	r17, X+
     a6e:	2d 91       	ld	r18, X+
     a70:	3c 91       	ld	r19, X
     a72:	19 97       	sbiw	r26, 0x09	; 9
     a74:	40 1b       	sub	r20, r16
     a76:	51 0b       	sbc	r21, r17
     a78:	62 0b       	sbc	r22, r18
     a7a:	73 0b       	sbc	r23, r19
     a7c:	77 fd       	sbrc	r23, 7
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <schedule+0x5a>
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z
     a8e:	31 81       	ldd	r19, Z+1	; 0x01
     a90:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <threadPool+0x1>
     a94:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <threadPool>
     a98:	d1 83       	std	Z+1, r29	; 0x01
     a9a:	c0 83       	st	Z, r28
     a9c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <activeStack+0x1>
     aa0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <activeStack>
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <dispatch>

00000ab0 <dequeue.part.0>:
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     ab6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     aba:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	83 bf       	out	0x33, r24	; 51
     ac2:	88 95       	sleep
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <dequeue.part.0+0x10>

00000ac6 <__vector_1>:
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
     ae8:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
     aec:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
     af0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     af4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     af8:	c9 01       	movw	r24, r18
     afa:	03 2e       	mov	r0, r19
     afc:	00 0c       	add	r0, r0
     afe:	aa 0b       	sbc	r26, r26
     b00:	bb 0b       	sbc	r27, r27
     b02:	dc 01       	movw	r26, r24
     b04:	99 27       	eor	r25, r25
     b06:	88 27       	eor	r24, r24
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	84 2b       	or	r24, r20
     b0e:	95 2b       	or	r25, r21
     b10:	a6 2b       	or	r26, r22
     b12:	b7 2b       	or	r27, r23
     b14:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     b18:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     b1c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     b20:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     b24:	b0 9b       	sbis	0x16, 0	; 22
     b26:	1b c0       	rjmp	.+54     	; 0xb5e <__vector_1+0x98>
     b28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b30:	c9 01       	movw	r24, r18
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	09 2e       	mov	r0, r25
     b36:	00 0c       	add	r0, r0
     b38:	aa 0b       	sbc	r26, r26
     b3a:	bb 0b       	sbc	r27, r27
     b3c:	dc 01       	movw	r26, r24
     b3e:	99 27       	eor	r25, r25
     b40:	88 27       	eor	r24, r24
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	84 2b       	or	r24, r20
     b48:	95 2b       	or	r25, r21
     b4a:	a6 2b       	or	r26, r22
     b4c:	b7 2b       	or	r27, r23
     b4e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     b52:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     b56:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     b5a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     b5e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable>
     b62:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x1>
     b66:	30 97       	sbiw	r30, 0x00	; 0
     b68:	39 f0       	breq	.+14     	; 0xb78 <__vector_1+0xb2>
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable>
     b72:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x1>
     b76:	09 95       	icall
     b78:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_2>:
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
     bc0:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
     bc4:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
     bc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bcc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bd0:	c9 01       	movw	r24, r18
     bd2:	03 2e       	mov	r0, r19
     bd4:	00 0c       	add	r0, r0
     bd6:	aa 0b       	sbc	r26, r26
     bd8:	bb 0b       	sbc	r27, r27
     bda:	dc 01       	movw	r26, r24
     bdc:	99 27       	eor	r25, r25
     bde:	88 27       	eor	r24, r24
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	84 2b       	or	r24, r20
     be6:	95 2b       	or	r25, r21
     be8:	a6 2b       	or	r26, r22
     bea:	b7 2b       	or	r27, r23
     bec:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     bf0:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     bf4:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     bf8:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     bfc:	b0 9b       	sbis	0x16, 0	; 22
     bfe:	1b c0       	rjmp	.+54     	; 0xc36 <__vector_2+0x98>
     c00:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c04:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c08:	c9 01       	movw	r24, r18
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	09 2e       	mov	r0, r25
     c0e:	00 0c       	add	r0, r0
     c10:	aa 0b       	sbc	r26, r26
     c12:	bb 0b       	sbc	r27, r27
     c14:	dc 01       	movw	r26, r24
     c16:	99 27       	eor	r25, r25
     c18:	88 27       	eor	r24, r24
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	84 2b       	or	r24, r20
     c20:	95 2b       	or	r25, r21
     c22:	a6 2b       	or	r26, r22
     c24:	b7 2b       	or	r27, r23
     c26:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     c2a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     c2e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     c32:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     c36:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x2>
     c3a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x3>
     c3e:	30 97       	sbiw	r30, 0x00	; 0
     c40:	39 f0       	breq	.+14     	; 0xc50 <__vector_2+0xb2>
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x2>
     c4a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x3>
     c4e:	09 95       	icall
     c50:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_3>:
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
     c98:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
     c9c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
     ca0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ca4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ca8:	c9 01       	movw	r24, r18
     caa:	03 2e       	mov	r0, r19
     cac:	00 0c       	add	r0, r0
     cae:	aa 0b       	sbc	r26, r26
     cb0:	bb 0b       	sbc	r27, r27
     cb2:	dc 01       	movw	r26, r24
     cb4:	99 27       	eor	r25, r25
     cb6:	88 27       	eor	r24, r24
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	84 2b       	or	r24, r20
     cbe:	95 2b       	or	r25, r21
     cc0:	a6 2b       	or	r26, r22
     cc2:	b7 2b       	or	r27, r23
     cc4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     cc8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     ccc:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     cd0:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     cd4:	b0 9b       	sbis	0x16, 0	; 22
     cd6:	1b c0       	rjmp	.+54     	; 0xd0e <__vector_3+0x98>
     cd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cdc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ce0:	c9 01       	movw	r24, r18
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	09 2e       	mov	r0, r25
     ce6:	00 0c       	add	r0, r0
     ce8:	aa 0b       	sbc	r26, r26
     cea:	bb 0b       	sbc	r27, r27
     cec:	dc 01       	movw	r26, r24
     cee:	99 27       	eor	r25, r25
     cf0:	88 27       	eor	r24, r24
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	84 2b       	or	r24, r20
     cf8:	95 2b       	or	r25, r21
     cfa:	a6 2b       	or	r26, r22
     cfc:	b7 2b       	or	r27, r23
     cfe:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     d02:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     d06:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     d0a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     d0e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x4>
     d12:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x5>
     d16:	30 97       	sbiw	r30, 0x00	; 0
     d18:	39 f0       	breq	.+14     	; 0xd28 <__vector_3+0xb2>
     d1a:	62 e0       	ldi	r22, 0x02	; 2
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x4>
     d22:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x5>
     d26:	09 95       	icall
     d28:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_4>:
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
     d74:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
     d78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d80:	c9 01       	movw	r24, r18
     d82:	03 2e       	mov	r0, r19
     d84:	00 0c       	add	r0, r0
     d86:	aa 0b       	sbc	r26, r26
     d88:	bb 0b       	sbc	r27, r27
     d8a:	dc 01       	movw	r26, r24
     d8c:	99 27       	eor	r25, r25
     d8e:	88 27       	eor	r24, r24
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	84 2b       	or	r24, r20
     d96:	95 2b       	or	r25, r21
     d98:	a6 2b       	or	r26, r22
     d9a:	b7 2b       	or	r27, r23
     d9c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     da0:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     da4:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     da8:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     dac:	b0 9b       	sbis	0x16, 0	; 22
     dae:	1b c0       	rjmp	.+54     	; 0xde6 <__vector_4+0x98>
     db0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     db4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     db8:	c9 01       	movw	r24, r18
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	09 2e       	mov	r0, r25
     dbe:	00 0c       	add	r0, r0
     dc0:	aa 0b       	sbc	r26, r26
     dc2:	bb 0b       	sbc	r27, r27
     dc4:	dc 01       	movw	r26, r24
     dc6:	99 27       	eor	r25, r25
     dc8:	88 27       	eor	r24, r24
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	84 2b       	or	r24, r20
     dd0:	95 2b       	or	r25, r21
     dd2:	a6 2b       	or	r26, r22
     dd4:	b7 2b       	or	r27, r23
     dd6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     dda:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     dde:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     de2:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     de6:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x6>
     dea:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x7>
     dee:	30 97       	sbiw	r30, 0x00	; 0
     df0:	39 f0       	breq	.+14     	; 0xe00 <__vector_4+0xb2>
     df2:	63 e0       	ldi	r22, 0x03	; 3
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x6>
     dfa:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x7>
     dfe:	09 95       	icall
     e00:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <__vector_5>:
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
     e48:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
     e4c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
     e50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e58:	c9 01       	movw	r24, r18
     e5a:	03 2e       	mov	r0, r19
     e5c:	00 0c       	add	r0, r0
     e5e:	aa 0b       	sbc	r26, r26
     e60:	bb 0b       	sbc	r27, r27
     e62:	dc 01       	movw	r26, r24
     e64:	99 27       	eor	r25, r25
     e66:	88 27       	eor	r24, r24
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	84 2b       	or	r24, r20
     e6e:	95 2b       	or	r25, r21
     e70:	a6 2b       	or	r26, r22
     e72:	b7 2b       	or	r27, r23
     e74:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     e78:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     e7c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     e80:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     e84:	b0 9b       	sbis	0x16, 0	; 22
     e86:	1b c0       	rjmp	.+54     	; 0xebe <__vector_5+0x98>
     e88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e90:	c9 01       	movw	r24, r18
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	09 2e       	mov	r0, r25
     e96:	00 0c       	add	r0, r0
     e98:	aa 0b       	sbc	r26, r26
     e9a:	bb 0b       	sbc	r27, r27
     e9c:	dc 01       	movw	r26, r24
     e9e:	99 27       	eor	r25, r25
     ea0:	88 27       	eor	r24, r24
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	84 2b       	or	r24, r20
     ea8:	95 2b       	or	r25, r21
     eaa:	a6 2b       	or	r26, r22
     eac:	b7 2b       	or	r27, r23
     eae:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     eb2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     eb6:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     eba:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     ebe:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x8>
     ec2:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x9>
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	39 f0       	breq	.+14     	; 0xed8 <__vector_5+0xb2>
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x8>
     ed2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x9>
     ed6:	09 95       	icall
     ed8:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_10>:
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
     f24:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
     f28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f30:	c9 01       	movw	r24, r18
     f32:	03 2e       	mov	r0, r19
     f34:	00 0c       	add	r0, r0
     f36:	aa 0b       	sbc	r26, r26
     f38:	bb 0b       	sbc	r27, r27
     f3a:	dc 01       	movw	r26, r24
     f3c:	99 27       	eor	r25, r25
     f3e:	88 27       	eor	r24, r24
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	84 2b       	or	r24, r20
     f46:	95 2b       	or	r25, r21
     f48:	a6 2b       	or	r26, r22
     f4a:	b7 2b       	or	r27, r23
     f4c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     f50:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     f54:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     f58:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     f5c:	b0 9b       	sbis	0x16, 0	; 22
     f5e:	1b c0       	rjmp	.+54     	; 0xf96 <__vector_10+0x98>
     f60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f68:	c9 01       	movw	r24, r18
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	09 2e       	mov	r0, r25
     f6e:	00 0c       	add	r0, r0
     f70:	aa 0b       	sbc	r26, r26
     f72:	bb 0b       	sbc	r27, r27
     f74:	dc 01       	movw	r26, r24
     f76:	99 27       	eor	r25, r25
     f78:	88 27       	eor	r24, r24
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	84 2b       	or	r24, r20
     f80:	95 2b       	or	r25, r21
     f82:	a6 2b       	or	r26, r22
     f84:	b7 2b       	or	r27, r23
     f86:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     f8a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     f8e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     f92:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     f96:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0xa>
     f9a:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0xb>
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <__vector_10+0xb2>
     fa2:	65 e0       	ldi	r22, 0x05	; 5
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0xa>
     faa:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0xb>
     fae:	09 95       	icall
     fb0:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_11>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
     ffc:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1008:	c9 01       	movw	r24, r18
    100a:	03 2e       	mov	r0, r19
    100c:	00 0c       	add	r0, r0
    100e:	aa 0b       	sbc	r26, r26
    1010:	bb 0b       	sbc	r27, r27
    1012:	dc 01       	movw	r26, r24
    1014:	99 27       	eor	r25, r25
    1016:	88 27       	eor	r24, r24
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	84 2b       	or	r24, r20
    101e:	95 2b       	or	r25, r21
    1020:	a6 2b       	or	r26, r22
    1022:	b7 2b       	or	r27, r23
    1024:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1028:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    102c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1030:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1034:	b0 9b       	sbis	0x16, 0	; 22
    1036:	1b c0       	rjmp	.+54     	; 0x106e <__vector_11+0x98>
    1038:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    103c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1040:	c9 01       	movw	r24, r18
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	09 2e       	mov	r0, r25
    1046:	00 0c       	add	r0, r0
    1048:	aa 0b       	sbc	r26, r26
    104a:	bb 0b       	sbc	r27, r27
    104c:	dc 01       	movw	r26, r24
    104e:	99 27       	eor	r25, r25
    1050:	88 27       	eor	r24, r24
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	84 2b       	or	r24, r20
    1058:	95 2b       	or	r25, r21
    105a:	a6 2b       	or	r26, r22
    105c:	b7 2b       	or	r27, r23
    105e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1062:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1066:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    106a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    106e:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0xc>
    1072:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0xd>
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	39 f0       	breq	.+14     	; 0x1088 <__vector_11+0xb2>
    107a:	66 e0       	ldi	r22, 0x06	; 6
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0xc>
    1082:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0xd>
    1086:	09 95       	icall
    1088:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_12>:
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    10d4:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    10d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10e0:	c9 01       	movw	r24, r18
    10e2:	03 2e       	mov	r0, r19
    10e4:	00 0c       	add	r0, r0
    10e6:	aa 0b       	sbc	r26, r26
    10e8:	bb 0b       	sbc	r27, r27
    10ea:	dc 01       	movw	r26, r24
    10ec:	99 27       	eor	r25, r25
    10ee:	88 27       	eor	r24, r24
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	84 2b       	or	r24, r20
    10f6:	95 2b       	or	r25, r21
    10f8:	a6 2b       	or	r26, r22
    10fa:	b7 2b       	or	r27, r23
    10fc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1100:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1104:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1108:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    110c:	b0 9b       	sbis	0x16, 0	; 22
    110e:	1b c0       	rjmp	.+54     	; 0x1146 <__vector_12+0x98>
    1110:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1114:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1118:	c9 01       	movw	r24, r18
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	09 2e       	mov	r0, r25
    111e:	00 0c       	add	r0, r0
    1120:	aa 0b       	sbc	r26, r26
    1122:	bb 0b       	sbc	r27, r27
    1124:	dc 01       	movw	r26, r24
    1126:	99 27       	eor	r25, r25
    1128:	88 27       	eor	r24, r24
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	84 2b       	or	r24, r20
    1130:	95 2b       	or	r25, r21
    1132:	a6 2b       	or	r26, r22
    1134:	b7 2b       	or	r27, r23
    1136:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    113a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    113e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1142:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1146:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0xe>
    114a:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0xf>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	39 f0       	breq	.+14     	; 0x1160 <__vector_12+0xb2>
    1152:	67 e0       	ldi	r22, 0x07	; 7
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0xe>
    115a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0xf>
    115e:	09 95       	icall
    1160:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_13>:
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    11ac:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    11b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11b8:	c9 01       	movw	r24, r18
    11ba:	03 2e       	mov	r0, r19
    11bc:	00 0c       	add	r0, r0
    11be:	aa 0b       	sbc	r26, r26
    11c0:	bb 0b       	sbc	r27, r27
    11c2:	dc 01       	movw	r26, r24
    11c4:	99 27       	eor	r25, r25
    11c6:	88 27       	eor	r24, r24
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	84 2b       	or	r24, r20
    11ce:	95 2b       	or	r25, r21
    11d0:	a6 2b       	or	r26, r22
    11d2:	b7 2b       	or	r27, r23
    11d4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    11d8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    11dc:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    11e0:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    11e4:	b0 9b       	sbis	0x16, 0	; 22
    11e6:	1b c0       	rjmp	.+54     	; 0x121e <__vector_13+0x98>
    11e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11f0:	c9 01       	movw	r24, r18
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	09 2e       	mov	r0, r25
    11f6:	00 0c       	add	r0, r0
    11f8:	aa 0b       	sbc	r26, r26
    11fa:	bb 0b       	sbc	r27, r27
    11fc:	dc 01       	movw	r26, r24
    11fe:	99 27       	eor	r25, r25
    1200:	88 27       	eor	r24, r24
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	84 2b       	or	r24, r20
    1208:	95 2b       	or	r25, r21
    120a:	a6 2b       	or	r26, r22
    120c:	b7 2b       	or	r27, r23
    120e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1212:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1216:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    121a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    121e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x10>
    1222:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x11>
    1226:	30 97       	sbiw	r30, 0x00	; 0
    1228:	39 f0       	breq	.+14     	; 0x1238 <__vector_13+0xb2>
    122a:	68 e0       	ldi	r22, 0x08	; 8
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x10>
    1232:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x11>
    1236:	09 95       	icall
    1238:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_14>:
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    1284:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1288:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    128c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1290:	c9 01       	movw	r24, r18
    1292:	03 2e       	mov	r0, r19
    1294:	00 0c       	add	r0, r0
    1296:	aa 0b       	sbc	r26, r26
    1298:	bb 0b       	sbc	r27, r27
    129a:	dc 01       	movw	r26, r24
    129c:	99 27       	eor	r25, r25
    129e:	88 27       	eor	r24, r24
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	84 2b       	or	r24, r20
    12a6:	95 2b       	or	r25, r21
    12a8:	a6 2b       	or	r26, r22
    12aa:	b7 2b       	or	r27, r23
    12ac:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    12b0:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    12b4:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    12b8:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    12bc:	b0 9b       	sbis	0x16, 0	; 22
    12be:	1b c0       	rjmp	.+54     	; 0x12f6 <__vector_14+0x98>
    12c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12c8:	c9 01       	movw	r24, r18
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	09 2e       	mov	r0, r25
    12ce:	00 0c       	add	r0, r0
    12d0:	aa 0b       	sbc	r26, r26
    12d2:	bb 0b       	sbc	r27, r27
    12d4:	dc 01       	movw	r26, r24
    12d6:	99 27       	eor	r25, r25
    12d8:	88 27       	eor	r24, r24
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	84 2b       	or	r24, r20
    12e0:	95 2b       	or	r25, r21
    12e2:	a6 2b       	or	r26, r22
    12e4:	b7 2b       	or	r27, r23
    12e6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    12ea:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    12ee:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    12f2:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    12f6:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x12>
    12fa:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x13>
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	39 f0       	breq	.+14     	; 0x1310 <__vector_14+0xb2>
    1302:	69 e0       	ldi	r22, 0x09	; 9
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x12>
    130a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x13>
    130e:	09 95       	icall
    1310:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_15>:
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
    1358:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    135c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1360:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1364:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1368:	c9 01       	movw	r24, r18
    136a:	03 2e       	mov	r0, r19
    136c:	00 0c       	add	r0, r0
    136e:	aa 0b       	sbc	r26, r26
    1370:	bb 0b       	sbc	r27, r27
    1372:	dc 01       	movw	r26, r24
    1374:	99 27       	eor	r25, r25
    1376:	88 27       	eor	r24, r24
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	84 2b       	or	r24, r20
    137e:	95 2b       	or	r25, r21
    1380:	a6 2b       	or	r26, r22
    1382:	b7 2b       	or	r27, r23
    1384:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1388:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    138c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1390:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1394:	b0 9b       	sbis	0x16, 0	; 22
    1396:	1b c0       	rjmp	.+54     	; 0x13ce <__vector_15+0x98>
    1398:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    139c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13a0:	c9 01       	movw	r24, r18
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	09 2e       	mov	r0, r25
    13a6:	00 0c       	add	r0, r0
    13a8:	aa 0b       	sbc	r26, r26
    13aa:	bb 0b       	sbc	r27, r27
    13ac:	dc 01       	movw	r26, r24
    13ae:	99 27       	eor	r25, r25
    13b0:	88 27       	eor	r24, r24
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	84 2b       	or	r24, r20
    13b8:	95 2b       	or	r25, r21
    13ba:	a6 2b       	or	r26, r22
    13bc:	b7 2b       	or	r27, r23
    13be:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    13c2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    13c6:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    13ca:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    13ce:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x14>
    13d2:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x15>
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	39 f0       	breq	.+14     	; 0x13e8 <__vector_15+0xb2>
    13da:	6a e0       	ldi	r22, 0x0A	; 10
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x14>
    13e2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x15>
    13e6:	09 95       	icall
    13e8:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_16>:
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    1434:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1438:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    143c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1440:	c9 01       	movw	r24, r18
    1442:	03 2e       	mov	r0, r19
    1444:	00 0c       	add	r0, r0
    1446:	aa 0b       	sbc	r26, r26
    1448:	bb 0b       	sbc	r27, r27
    144a:	dc 01       	movw	r26, r24
    144c:	99 27       	eor	r25, r25
    144e:	88 27       	eor	r24, r24
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	84 2b       	or	r24, r20
    1456:	95 2b       	or	r25, r21
    1458:	a6 2b       	or	r26, r22
    145a:	b7 2b       	or	r27, r23
    145c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1460:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1464:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1468:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    146c:	b0 9b       	sbis	0x16, 0	; 22
    146e:	1b c0       	rjmp	.+54     	; 0x14a6 <__vector_16+0x98>
    1470:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1474:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1478:	c9 01       	movw	r24, r18
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	09 2e       	mov	r0, r25
    147e:	00 0c       	add	r0, r0
    1480:	aa 0b       	sbc	r26, r26
    1482:	bb 0b       	sbc	r27, r27
    1484:	dc 01       	movw	r26, r24
    1486:	99 27       	eor	r25, r25
    1488:	88 27       	eor	r24, r24
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	84 2b       	or	r24, r20
    1490:	95 2b       	or	r25, r21
    1492:	a6 2b       	or	r26, r22
    1494:	b7 2b       	or	r27, r23
    1496:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    149a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    149e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    14a2:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    14a6:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x16>
    14aa:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x17>
    14ae:	30 97       	sbiw	r30, 0x00	; 0
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <__vector_16+0xb2>
    14b2:	6b e0       	ldi	r22, 0x0B	; 11
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x16>
    14ba:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x17>
    14be:	09 95       	icall
    14c0:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	bf 91       	pop	r27
    14ca:	af 91       	pop	r26
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	7f 91       	pop	r23
    14d2:	6f 91       	pop	r22
    14d4:	5f 91       	pop	r21
    14d6:	4f 91       	pop	r20
    14d8:	3f 91       	pop	r19
    14da:	2f 91       	pop	r18
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <__vector_17>:
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	2f 93       	push	r18
    14f2:	3f 93       	push	r19
    14f4:	4f 93       	push	r20
    14f6:	5f 93       	push	r21
    14f8:	6f 93       	push	r22
    14fa:	7f 93       	push	r23
    14fc:	8f 93       	push	r24
    14fe:	9f 93       	push	r25
    1500:	af 93       	push	r26
    1502:	bf 93       	push	r27
    1504:	ef 93       	push	r30
    1506:	ff 93       	push	r31
    1508:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    150c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1510:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1514:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1518:	c9 01       	movw	r24, r18
    151a:	03 2e       	mov	r0, r19
    151c:	00 0c       	add	r0, r0
    151e:	aa 0b       	sbc	r26, r26
    1520:	bb 0b       	sbc	r27, r27
    1522:	dc 01       	movw	r26, r24
    1524:	99 27       	eor	r25, r25
    1526:	88 27       	eor	r24, r24
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	84 2b       	or	r24, r20
    152e:	95 2b       	or	r25, r21
    1530:	a6 2b       	or	r26, r22
    1532:	b7 2b       	or	r27, r23
    1534:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1538:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    153c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1540:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1544:	b0 9b       	sbis	0x16, 0	; 22
    1546:	1b c0       	rjmp	.+54     	; 0x157e <__vector_17+0x98>
    1548:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    154c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1550:	c9 01       	movw	r24, r18
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	aa 0b       	sbc	r26, r26
    155a:	bb 0b       	sbc	r27, r27
    155c:	dc 01       	movw	r26, r24
    155e:	99 27       	eor	r25, r25
    1560:	88 27       	eor	r24, r24
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	84 2b       	or	r24, r20
    1568:	95 2b       	or	r25, r21
    156a:	a6 2b       	or	r26, r22
    156c:	b7 2b       	or	r27, r23
    156e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1572:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1576:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    157a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    157e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x18>
    1582:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x19>
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	39 f0       	breq	.+14     	; 0x1598 <__vector_17+0xb2>
    158a:	6c e0       	ldi	r22, 0x0C	; 12
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x18>
    1592:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x19>
    1596:	09 95       	icall
    1598:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_18>:
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    15e4:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    15e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15f0:	c9 01       	movw	r24, r18
    15f2:	03 2e       	mov	r0, r19
    15f4:	00 0c       	add	r0, r0
    15f6:	aa 0b       	sbc	r26, r26
    15f8:	bb 0b       	sbc	r27, r27
    15fa:	dc 01       	movw	r26, r24
    15fc:	99 27       	eor	r25, r25
    15fe:	88 27       	eor	r24, r24
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	84 2b       	or	r24, r20
    1606:	95 2b       	or	r25, r21
    1608:	a6 2b       	or	r26, r22
    160a:	b7 2b       	or	r27, r23
    160c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1610:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1614:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1618:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    161c:	b0 9b       	sbis	0x16, 0	; 22
    161e:	1b c0       	rjmp	.+54     	; 0x1656 <__vector_18+0x98>
    1620:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1624:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1628:	c9 01       	movw	r24, r18
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	09 2e       	mov	r0, r25
    162e:	00 0c       	add	r0, r0
    1630:	aa 0b       	sbc	r26, r26
    1632:	bb 0b       	sbc	r27, r27
    1634:	dc 01       	movw	r26, r24
    1636:	99 27       	eor	r25, r25
    1638:	88 27       	eor	r24, r24
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	84 2b       	or	r24, r20
    1640:	95 2b       	or	r25, r21
    1642:	a6 2b       	or	r26, r22
    1644:	b7 2b       	or	r27, r23
    1646:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    164a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    164e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1652:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1656:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x1a>
    165a:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x1b>
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	39 f0       	breq	.+14     	; 0x1670 <__vector_18+0xb2>
    1662:	6d e0       	ldi	r22, 0x0D	; 13
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x1a>
    166a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x1b>
    166e:	09 95       	icall
    1670:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <__vector_19>:
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	11 24       	eor	r1, r1
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
    16b8:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    16bc:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    16c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16c8:	c9 01       	movw	r24, r18
    16ca:	03 2e       	mov	r0, r19
    16cc:	00 0c       	add	r0, r0
    16ce:	aa 0b       	sbc	r26, r26
    16d0:	bb 0b       	sbc	r27, r27
    16d2:	dc 01       	movw	r26, r24
    16d4:	99 27       	eor	r25, r25
    16d6:	88 27       	eor	r24, r24
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	84 2b       	or	r24, r20
    16de:	95 2b       	or	r25, r21
    16e0:	a6 2b       	or	r26, r22
    16e2:	b7 2b       	or	r27, r23
    16e4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    16e8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    16ec:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    16f0:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    16f4:	b0 9b       	sbis	0x16, 0	; 22
    16f6:	1b c0       	rjmp	.+54     	; 0x172e <__vector_19+0x98>
    16f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1700:	c9 01       	movw	r24, r18
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	09 2e       	mov	r0, r25
    1706:	00 0c       	add	r0, r0
    1708:	aa 0b       	sbc	r26, r26
    170a:	bb 0b       	sbc	r27, r27
    170c:	dc 01       	movw	r26, r24
    170e:	99 27       	eor	r25, r25
    1710:	88 27       	eor	r24, r24
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	84 2b       	or	r24, r20
    1718:	95 2b       	or	r25, r21
    171a:	a6 2b       	or	r26, r22
    171c:	b7 2b       	or	r27, r23
    171e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1722:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1726:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    172a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    172e:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x1c>
    1732:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x1d>
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	39 f0       	breq	.+14     	; 0x1748 <__vector_19+0xb2>
    173a:	6e e0       	ldi	r22, 0x0E	; 14
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x1c>
    1742:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x1d>
    1746:	09 95       	icall
    1748:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_20>:
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    1794:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1798:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    179c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17a0:	c9 01       	movw	r24, r18
    17a2:	03 2e       	mov	r0, r19
    17a4:	00 0c       	add	r0, r0
    17a6:	aa 0b       	sbc	r26, r26
    17a8:	bb 0b       	sbc	r27, r27
    17aa:	dc 01       	movw	r26, r24
    17ac:	99 27       	eor	r25, r25
    17ae:	88 27       	eor	r24, r24
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	84 2b       	or	r24, r20
    17b6:	95 2b       	or	r25, r21
    17b8:	a6 2b       	or	r26, r22
    17ba:	b7 2b       	or	r27, r23
    17bc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    17c0:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    17c4:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    17c8:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    17cc:	b0 9b       	sbis	0x16, 0	; 22
    17ce:	1b c0       	rjmp	.+54     	; 0x1806 <__vector_20+0x98>
    17d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17d8:	c9 01       	movw	r24, r18
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	09 2e       	mov	r0, r25
    17de:	00 0c       	add	r0, r0
    17e0:	aa 0b       	sbc	r26, r26
    17e2:	bb 0b       	sbc	r27, r27
    17e4:	dc 01       	movw	r26, r24
    17e6:	99 27       	eor	r25, r25
    17e8:	88 27       	eor	r24, r24
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	84 2b       	or	r24, r20
    17f0:	95 2b       	or	r25, r21
    17f2:	a6 2b       	or	r26, r22
    17f4:	b7 2b       	or	r27, r23
    17f6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    17fa:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    17fe:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1802:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1806:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x1e>
    180a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x1f>
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	39 f0       	breq	.+14     	; 0x1820 <__vector_20+0xb2>
    1812:	6f e0       	ldi	r22, 0x0F	; 15
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x1e>
    181a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x1f>
    181e:	09 95       	icall
    1820:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1824:	ff 91       	pop	r31
    1826:	ef 91       	pop	r30
    1828:	bf 91       	pop	r27
    182a:	af 91       	pop	r26
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	7f 91       	pop	r23
    1832:	6f 91       	pop	r22
    1834:	5f 91       	pop	r21
    1836:	4f 91       	pop	r20
    1838:	3f 91       	pop	r19
    183a:	2f 91       	pop	r18
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	0f 90       	pop	r0
    1842:	1f 90       	pop	r1
    1844:	18 95       	reti

00001846 <__vector_21>:
    1846:	1f 92       	push	r1
    1848:	0f 92       	push	r0
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	0f 92       	push	r0
    184e:	11 24       	eor	r1, r1
    1850:	2f 93       	push	r18
    1852:	3f 93       	push	r19
    1854:	4f 93       	push	r20
    1856:	5f 93       	push	r21
    1858:	6f 93       	push	r22
    185a:	7f 93       	push	r23
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    186c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1870:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1874:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1878:	c9 01       	movw	r24, r18
    187a:	03 2e       	mov	r0, r19
    187c:	00 0c       	add	r0, r0
    187e:	aa 0b       	sbc	r26, r26
    1880:	bb 0b       	sbc	r27, r27
    1882:	dc 01       	movw	r26, r24
    1884:	99 27       	eor	r25, r25
    1886:	88 27       	eor	r24, r24
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	84 2b       	or	r24, r20
    188e:	95 2b       	or	r25, r21
    1890:	a6 2b       	or	r26, r22
    1892:	b7 2b       	or	r27, r23
    1894:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1898:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    189c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    18a0:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    18a4:	b0 9b       	sbis	0x16, 0	; 22
    18a6:	1b c0       	rjmp	.+54     	; 0x18de <__vector_21+0x98>
    18a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18b0:	c9 01       	movw	r24, r18
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	09 2e       	mov	r0, r25
    18b6:	00 0c       	add	r0, r0
    18b8:	aa 0b       	sbc	r26, r26
    18ba:	bb 0b       	sbc	r27, r27
    18bc:	dc 01       	movw	r26, r24
    18be:	99 27       	eor	r25, r25
    18c0:	88 27       	eor	r24, r24
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	84 2b       	or	r24, r20
    18c8:	95 2b       	or	r25, r21
    18ca:	a6 2b       	or	r26, r22
    18cc:	b7 2b       	or	r27, r23
    18ce:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    18d2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    18d6:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    18da:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    18de:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x20>
    18e2:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x21>
    18e6:	30 97       	sbiw	r30, 0x00	; 0
    18e8:	39 f0       	breq	.+14     	; 0x18f8 <__vector_21+0xb2>
    18ea:	60 e1       	ldi	r22, 0x10	; 16
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x20>
    18f2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x21>
    18f6:	09 95       	icall
    18f8:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <__vector_22>:
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	2f 93       	push	r18
    192a:	3f 93       	push	r19
    192c:	4f 93       	push	r20
    192e:	5f 93       	push	r21
    1930:	6f 93       	push	r22
    1932:	7f 93       	push	r23
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    1940:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    1944:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1948:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    194c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1950:	c9 01       	movw	r24, r18
    1952:	03 2e       	mov	r0, r19
    1954:	00 0c       	add	r0, r0
    1956:	aa 0b       	sbc	r26, r26
    1958:	bb 0b       	sbc	r27, r27
    195a:	dc 01       	movw	r26, r24
    195c:	99 27       	eor	r25, r25
    195e:	88 27       	eor	r24, r24
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	84 2b       	or	r24, r20
    1966:	95 2b       	or	r25, r21
    1968:	a6 2b       	or	r26, r22
    196a:	b7 2b       	or	r27, r23
    196c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1970:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1974:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1978:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    197c:	b0 9b       	sbis	0x16, 0	; 22
    197e:	1b c0       	rjmp	.+54     	; 0x19b6 <__vector_22+0x98>
    1980:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1984:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1988:	c9 01       	movw	r24, r18
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	09 2e       	mov	r0, r25
    198e:	00 0c       	add	r0, r0
    1990:	aa 0b       	sbc	r26, r26
    1992:	bb 0b       	sbc	r27, r27
    1994:	dc 01       	movw	r26, r24
    1996:	99 27       	eor	r25, r25
    1998:	88 27       	eor	r24, r24
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	84 2b       	or	r24, r20
    19a0:	95 2b       	or	r25, r21
    19a2:	a6 2b       	or	r26, r22
    19a4:	b7 2b       	or	r27, r23
    19a6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    19aa:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    19ae:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    19b2:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    19b6:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x22>
    19ba:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x23>
    19be:	30 97       	sbiw	r30, 0x00	; 0
    19c0:	39 f0       	breq	.+14     	; 0x19d0 <__vector_22+0xb2>
    19c2:	61 e1       	ldi	r22, 0x11	; 17
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x22>
    19ca:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x23>
    19ce:	09 95       	icall
    19d0:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    19d4:	ff 91       	pop	r31
    19d6:	ef 91       	pop	r30
    19d8:	bf 91       	pop	r27
    19da:	af 91       	pop	r26
    19dc:	9f 91       	pop	r25
    19de:	8f 91       	pop	r24
    19e0:	7f 91       	pop	r23
    19e2:	6f 91       	pop	r22
    19e4:	5f 91       	pop	r21
    19e6:	4f 91       	pop	r20
    19e8:	3f 91       	pop	r19
    19ea:	2f 91       	pop	r18
    19ec:	0f 90       	pop	r0
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	0f 90       	pop	r0
    19f2:	1f 90       	pop	r1
    19f4:	18 95       	reti

000019f6 <__vector_9>:
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
    1a14:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    1a18:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <overflows+0x1>
    1a22:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <overflows>
    1a26:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <timerQ>
    1a2a:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <timerQ+0x1>
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <__vector_9+0x4a>
    1a32:	42 81       	ldd	r20, Z+2	; 0x02
    1a34:	53 81       	ldd	r21, Z+3	; 0x03
    1a36:	64 81       	ldd	r22, Z+4	; 0x04
    1a38:	75 81       	ldd	r23, Z+5	; 0x05
    1a3a:	86 17       	cp	r24, r22
    1a3c:	97 07       	cpc	r25, r23
    1a3e:	a1 f0       	breq	.+40     	; 0x1a68 <__vector_9+0x72>
    1a40:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a44:	8d 7f       	andi	r24, 0xFD	; 253
    1a46:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a4a:	ff 91       	pop	r31
    1a4c:	ef 91       	pop	r30
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti
    1a68:	ca 01       	movw	r24, r20
    1a6a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a6e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a72:	42 1b       	sub	r20, r18
    1a74:	53 0b       	sbc	r21, r19
    1a76:	41 30       	cpi	r20, 0x01	; 1
    1a78:	51 05       	cpc	r21, r1
    1a7a:	51 f0       	breq	.+20     	; 0x1a90 <__vector_9+0x9a>
    1a7c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1a80:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1a84:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a8e:	dd cf       	rjmp	.-70     	; 0x1a4a <__vector_9+0x54>
    1a90:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a94:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	f0 cf       	rjmp	.-32     	; 0x1a7c <__vector_9+0x86>

00001a9c <__vector_7>:
    1a9c:	1f 92       	push	r1
    1a9e:	0f 92       	push	r0
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	0f 92       	push	r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	ef 93       	push	r30
    1ad4:	ff 93       	push	r31
    1ad6:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <overflows>
    1ada:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <overflows+0x1>
    1ade:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ae2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ae6:	b0 99       	sbic	0x16, 0	; 22
    1ae8:	98 c0       	rjmp	.+304    	; 0x1c1a <__vector_7+0x17e>
    1aea:	47 01       	movw	r8, r14
    1aec:	0f 2c       	mov	r0, r15
    1aee:	00 0c       	add	r0, r0
    1af0:	aa 08       	sbc	r10, r10
    1af2:	bb 08       	sbc	r11, r11
    1af4:	54 01       	movw	r10, r8
    1af6:	99 24       	eor	r9, r9
    1af8:	88 24       	eor	r8, r8
    1afa:	a0 e0       	ldi	r26, 0x00	; 0
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	88 2a       	or	r8, r24
    1b00:	99 2a       	or	r9, r25
    1b02:	aa 2a       	or	r10, r26
    1b04:	bb 2a       	or	r11, r27
    1b06:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <timerQ>
    1b0a:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <timerQ+0x1>
    1b0e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <msgQ>
    1b12:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <msgQ+0x1>
    1b16:	20 97       	sbiw	r28, 0x00	; 0
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <__vector_7+0x80>
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <__vector_7+0xfe>
    1b1c:	4a 81       	ldd	r20, Y+2	; 0x02
    1b1e:	5b 81       	ldd	r21, Y+3	; 0x03
    1b20:	6c 81       	ldd	r22, Y+4	; 0x04
    1b22:	7d 81       	ldd	r23, Y+5	; 0x05
    1b24:	8a 01       	movw	r16, r20
    1b26:	9b 01       	movw	r18, r22
    1b28:	08 19       	sub	r16, r8
    1b2a:	19 09       	sbc	r17, r9
    1b2c:	2a 09       	sbc	r18, r10
    1b2e:	3b 09       	sbc	r19, r11
    1b30:	10 16       	cp	r1, r16
    1b32:	11 06       	cpc	r1, r17
    1b34:	12 06       	cpc	r1, r18
    1b36:	13 06       	cpc	r1, r19
    1b38:	0c f4       	brge	.+2      	; 0x1b3c <__vector_7+0xa0>
    1b3a:	40 c0       	rjmp	.+128    	; 0x1bbc <__vector_7+0x120>
    1b3c:	d8 80       	ld	r13, Y
    1b3e:	c9 80       	ldd	r12, Y+1	; 0x01
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	b9 f1       	breq	.+110    	; 0x1bb2 <__vector_7+0x116>
    1b44:	0e 81       	ldd	r16, Y+6	; 0x06
    1b46:	1f 81       	ldd	r17, Y+7	; 0x07
    1b48:	28 85       	ldd	r18, Y+8	; 0x08
    1b4a:	39 85       	ldd	r19, Y+9	; 0x09
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	46 81       	ldd	r20, Z+6	; 0x06
    1b50:	57 81       	ldd	r21, Z+7	; 0x07
    1b52:	60 85       	ldd	r22, Z+8	; 0x08
    1b54:	71 85       	ldd	r23, Z+9	; 0x09
    1b56:	04 17       	cp	r16, r20
    1b58:	15 07       	cpc	r17, r21
    1b5a:	26 07       	cpc	r18, r22
    1b5c:	37 07       	cpc	r19, r23
    1b5e:	4c f1       	brlt	.+82     	; 0x1bb2 <__vector_7+0x116>
    1b60:	dc 01       	movw	r26, r24
    1b62:	0a c0       	rjmp	.+20     	; 0x1b78 <__vector_7+0xdc>
    1b64:	46 81       	ldd	r20, Z+6	; 0x06
    1b66:	57 81       	ldd	r21, Z+7	; 0x07
    1b68:	60 85       	ldd	r22, Z+8	; 0x08
    1b6a:	71 85       	ldd	r23, Z+9	; 0x09
    1b6c:	04 17       	cp	r16, r20
    1b6e:	15 07       	cpc	r17, r21
    1b70:	26 07       	cpc	r18, r22
    1b72:	37 07       	cpc	r19, r23
    1b74:	dc f0       	brlt	.+54     	; 0x1bac <__vector_7+0x110>
    1b76:	df 01       	movw	r26, r30
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	11 97       	sbiw	r26, 0x01	; 1
    1b7e:	30 97       	sbiw	r30, 0x00	; 0
    1b80:	89 f7       	brne	.-30     	; 0x1b64 <__vector_7+0xc8>
    1b82:	19 82       	std	Y+1, r1	; 0x01
    1b84:	18 82       	st	Y, r1
    1b86:	cd 93       	st	X+, r28
    1b88:	dc 93       	st	X, r29
    1b8a:	38 2f       	mov	r19, r24
    1b8c:	29 2f       	mov	r18, r25
    1b8e:	cd 2d       	mov	r28, r13
    1b90:	dc 2d       	mov	r29, r12
    1b92:	83 2f       	mov	r24, r19
    1b94:	92 2f       	mov	r25, r18
    1b96:	20 97       	sbiw	r28, 0x00	; 0
    1b98:	09 f6       	brne	.-126    	; 0x1b1c <__vector_7+0x80>
    1b9a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <timerQ+0x1>
    1b9e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <timerQ>
    1ba2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <msgQ+0x1>
    1ba6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <msgQ>
    1baa:	13 c0       	rjmp	.+38     	; 0x1bd2 <__vector_7+0x136>
    1bac:	f9 83       	std	Y+1, r31	; 0x01
    1bae:	e8 83       	st	Y, r30
    1bb0:	ea cf       	rjmp	.-44     	; 0x1b86 <__vector_7+0xea>
    1bb2:	99 83       	std	Y+1, r25	; 0x01
    1bb4:	88 83       	st	Y, r24
    1bb6:	3c 2f       	mov	r19, r28
    1bb8:	2d 2f       	mov	r18, r29
    1bba:	e9 cf       	rjmp	.-46     	; 0x1b8e <__vector_7+0xf2>
    1bbc:	d0 93 45 01 	sts	0x0145, r29	; 0x800145 <timerQ+0x1>
    1bc0:	c0 93 44 01 	sts	0x0144, r28	; 0x800144 <timerQ>
    1bc4:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <msgQ+0x1>
    1bc8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <msgQ>
    1bcc:	e6 16       	cp	r14, r22
    1bce:	f7 06       	cpc	r15, r23
    1bd0:	d9 f1       	breq	.+118    	; 0x1c48 <__vector_7+0x1ac>
    1bd2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1bdc:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti
    1c1a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c1e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c22:	47 01       	movw	r8, r14
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	88 1a       	sub	r8, r24
    1c28:	98 0a       	sbc	r9, r24
    1c2a:	09 2c       	mov	r0, r9
    1c2c:	00 0c       	add	r0, r0
    1c2e:	aa 08       	sbc	r10, r10
    1c30:	bb 08       	sbc	r11, r11
    1c32:	d4 01       	movw	r26, r8
    1c34:	99 27       	eor	r25, r25
    1c36:	88 27       	eor	r24, r24
    1c38:	49 01       	movw	r8, r18
    1c3a:	a1 2c       	mov	r10, r1
    1c3c:	b1 2c       	mov	r11, r1
    1c3e:	88 2a       	or	r8, r24
    1c40:	99 2a       	or	r9, r25
    1c42:	aa 2a       	or	r10, r26
    1c44:	bb 2a       	or	r11, r27
    1c46:	5f cf       	rjmp	.-322    	; 0x1b06 <__vector_7+0x6a>
    1c48:	ca 01       	movw	r24, r20
    1c4a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c4e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c52:	42 1b       	sub	r20, r18
    1c54:	53 0b       	sbc	r21, r19
    1c56:	41 30       	cpi	r20, 0x01	; 1
    1c58:	51 05       	cpc	r21, r1
    1c5a:	51 f0       	breq	.+20     	; 0x1c70 <__vector_7+0x1d4>
    1c5c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c60:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c64:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c68:	82 60       	ori	r24, 0x02	; 2
    1c6a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c6e:	b6 cf       	rjmp	.-148    	; 0x1bdc <__vector_7+0x140>
    1c70:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c74:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	f0 cf       	rjmp	.-32     	; 0x1c5c <__vector_7+0x1c0>

00001c7c <async>:
    1c7c:	3f 92       	push	r3
    1c7e:	4f 92       	push	r4
    1c80:	5f 92       	push	r5
    1c82:	6f 92       	push	r6
    1c84:	7f 92       	push	r7
    1c86:	8f 92       	push	r8
    1c88:	9f 92       	push	r9
    1c8a:	af 92       	push	r10
    1c8c:	bf 92       	push	r11
    1c8e:	cf 92       	push	r12
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ef b7       	in	r30, 0x3f	; 63
    1ca0:	e0 78       	andi	r30, 0x80	; 128
    1ca2:	3e 2e       	mov	r3, r30
    1ca4:	f8 94       	cli
    1ca6:	c0 91 32 01 	lds	r28, 0x0132	; 0x800132 <msgPool>
    1caa:	d0 91 33 01 	lds	r29, 0x0133	; 0x800133 <msgPool+0x1>
    1cae:	20 97       	sbiw	r28, 0x00	; 0
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <async+0x38>
    1cb2:	52 c1       	rjmp	.+676    	; 0x1f58 <async+0x2dc>
    1cb4:	e8 81       	ld	r30, Y
    1cb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cb8:	f0 93 33 01 	sts	0x0133, r31	; 0x800133 <msgPool+0x1>
    1cbc:	e0 93 32 01 	sts	0x0132, r30	; 0x800132 <msgPool>
    1cc0:	1b 87       	std	Y+11, r17	; 0x0b
    1cc2:	0a 87       	std	Y+10, r16	; 0x0a
    1cc4:	fd 86       	std	Y+13, r15	; 0x0d
    1cc6:	ec 86       	std	Y+12, r14	; 0x0c
    1cc8:	df 86       	std	Y+15, r13	; 0x0f
    1cca:	ce 86       	std	Y+14, r12	; 0x0e
    1ccc:	33 20       	and	r3, r3
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <async+0x56>
    1cd0:	6f c0       	rjmp	.+222    	; 0x1db0 <async+0x134>
    1cd2:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    1cd6:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    1cda:	02 80       	ldd	r0, Z+2	; 0x02
    1cdc:	f3 81       	ldd	r31, Z+3	; 0x03
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	c2 80       	ldd	r12, Z+2	; 0x02
    1ce2:	d3 80       	ldd	r13, Z+3	; 0x03
    1ce4:	e4 80       	ldd	r14, Z+4	; 0x04
    1ce6:	f5 80       	ldd	r15, Z+5	; 0x05
    1ce8:	c6 0e       	add	r12, r22
    1cea:	d7 1e       	adc	r13, r23
    1cec:	e8 1e       	adc	r14, r24
    1cee:	f9 1e       	adc	r15, r25
    1cf0:	ca 82       	std	Y+2, r12	; 0x02
    1cf2:	db 82       	std	Y+3, r13	; 0x03
    1cf4:	ec 82       	std	Y+4, r14	; 0x04
    1cf6:	fd 82       	std	Y+5, r15	; 0x05
    1cf8:	12 16       	cp	r1, r18
    1cfa:	13 06       	cpc	r1, r19
    1cfc:	14 06       	cpc	r1, r20
    1cfe:	15 06       	cpc	r1, r21
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <async+0x88>
    1d02:	f8 c0       	rjmp	.+496    	; 0x1ef4 <async+0x278>
    1d04:	da 01       	movw	r26, r20
    1d06:	c9 01       	movw	r24, r18
    1d08:	8c 01       	movw	r16, r24
    1d0a:	9d 01       	movw	r18, r26
    1d0c:	0c 0d       	add	r16, r12
    1d0e:	1d 1d       	adc	r17, r13
    1d10:	2e 1d       	adc	r18, r14
    1d12:	3f 1d       	adc	r19, r15
    1d14:	0e 83       	std	Y+6, r16	; 0x06
    1d16:	1f 83       	std	Y+7, r17	; 0x07
    1d18:	28 87       	std	Y+8, r18	; 0x08
    1d1a:	39 87       	std	Y+9, r19	; 0x09
    1d1c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    1d20:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1d24:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d28:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d2c:	b0 99       	sbic	0x16, 0	; 22
    1d2e:	49 c0       	rjmp	.+146    	; 0x1dc2 <async+0x146>
    1d30:	2c 01       	movw	r4, r24
    1d32:	09 2e       	mov	r0, r25
    1d34:	00 0c       	add	r0, r0
    1d36:	66 08       	sbc	r6, r6
    1d38:	77 08       	sbc	r7, r7
    1d3a:	52 01       	movw	r10, r4
    1d3c:	99 24       	eor	r9, r9
    1d3e:	88 24       	eor	r8, r8
    1d40:	2b 01       	movw	r4, r22
    1d42:	61 2c       	mov	r6, r1
    1d44:	71 2c       	mov	r7, r1
    1d46:	48 28       	or	r4, r8
    1d48:	59 28       	or	r5, r9
    1d4a:	6a 28       	or	r6, r10
    1d4c:	7b 28       	or	r7, r11
    1d4e:	b7 01       	movw	r22, r14
    1d50:	a6 01       	movw	r20, r12
    1d52:	44 19       	sub	r20, r4
    1d54:	55 09       	sbc	r21, r5
    1d56:	66 09       	sbc	r22, r6
    1d58:	77 09       	sbc	r23, r7
    1d5a:	14 16       	cp	r1, r20
    1d5c:	15 06       	cpc	r1, r21
    1d5e:	16 06       	cpc	r1, r22
    1d60:	17 06       	cpc	r1, r23
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <async+0xea>
    1d64:	68 c0       	rjmp	.+208    	; 0x1e36 <async+0x1ba>
    1d66:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <timerQ>
    1d6a:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <timerQ+0x1>
    1d6e:	10 97       	sbiw	r26, 0x00	; 0
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <async+0xf8>
    1d72:	dc c0       	rjmp	.+440    	; 0x1f2c <async+0x2b0>
    1d74:	12 96       	adiw	r26, 0x02	; 2
    1d76:	0d 91       	ld	r16, X+
    1d78:	1d 91       	ld	r17, X+
    1d7a:	2d 91       	ld	r18, X+
    1d7c:	3c 91       	ld	r19, X
    1d7e:	15 97       	sbiw	r26, 0x05	; 5
    1d80:	c0 16       	cp	r12, r16
    1d82:	d1 06       	cpc	r13, r17
    1d84:	e2 06       	cpc	r14, r18
    1d86:	f3 06       	cpc	r15, r19
    1d88:	5c f4       	brge	.+22     	; 0x1da0 <async+0x124>
    1d8a:	d0 c0       	rjmp	.+416    	; 0x1f2c <async+0x2b0>
    1d8c:	42 81       	ldd	r20, Z+2	; 0x02
    1d8e:	53 81       	ldd	r21, Z+3	; 0x03
    1d90:	64 81       	ldd	r22, Z+4	; 0x04
    1d92:	75 81       	ldd	r23, Z+5	; 0x05
    1d94:	c4 16       	cp	r12, r20
    1d96:	d5 06       	cpc	r13, r21
    1d98:	e6 06       	cpc	r14, r22
    1d9a:	f7 06       	cpc	r15, r23
    1d9c:	4c f1       	brlt	.+82     	; 0x1df0 <async+0x174>
    1d9e:	df 01       	movw	r26, r30
    1da0:	ed 91       	ld	r30, X+
    1da2:	fc 91       	ld	r31, X
    1da4:	11 97       	sbiw	r26, 0x01	; 1
    1da6:	30 97       	sbiw	r30, 0x00	; 0
    1da8:	89 f7       	brne	.-30     	; 0x1d8c <async+0x110>
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	18 82       	st	Y, r1
    1dae:	22 c0       	rjmp	.+68     	; 0x1df4 <async+0x178>
    1db0:	c0 90 40 01 	lds	r12, 0x0140	; 0x800140 <timestamp>
    1db4:	d0 90 41 01 	lds	r13, 0x0141	; 0x800141 <timestamp+0x1>
    1db8:	e0 90 42 01 	lds	r14, 0x0142	; 0x800142 <timestamp+0x2>
    1dbc:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <timestamp+0x3>
    1dc0:	93 cf       	rjmp	.-218    	; 0x1ce8 <async+0x6c>
    1dc2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1dc6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1dca:	2c 01       	movw	r4, r24
    1dcc:	4f ef       	ldi	r20, 0xFF	; 255
    1dce:	44 1a       	sub	r4, r20
    1dd0:	54 0a       	sbc	r5, r20
    1dd2:	05 2c       	mov	r0, r5
    1dd4:	00 0c       	add	r0, r0
    1dd6:	66 08       	sbc	r6, r6
    1dd8:	77 08       	sbc	r7, r7
    1dda:	b2 01       	movw	r22, r4
    1ddc:	55 27       	eor	r21, r21
    1dde:	44 27       	eor	r20, r20
    1de0:	2f 01       	movw	r4, r30
    1de2:	61 2c       	mov	r6, r1
    1de4:	71 2c       	mov	r7, r1
    1de6:	44 2a       	or	r4, r20
    1de8:	55 2a       	or	r5, r21
    1dea:	66 2a       	or	r6, r22
    1dec:	77 2a       	or	r7, r23
    1dee:	af cf       	rjmp	.-162    	; 0x1d4e <async+0xd2>
    1df0:	f9 83       	std	Y+1, r31	; 0x01
    1df2:	e8 83       	st	Y, r30
    1df4:	cd 93       	st	X+, r28
    1df6:	dc 93       	st	X, r29
    1df8:	82 17       	cp	r24, r18
    1dfa:	93 07       	cpc	r25, r19
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <async+0x184>
    1dfe:	7f c0       	rjmp	.+254    	; 0x1efe <async+0x282>
    1e00:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1e04:	8d 7f       	andi	r24, 0xFD	; 253
    1e06:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1e0a:	33 20       	and	r3, r3
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <async+0x194>
    1e0e:	78 94       	sei
    1e10:	ce 01       	movw	r24, r28
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	9f 90       	pop	r9
    1e28:	8f 90       	pop	r8
    1e2a:	7f 90       	pop	r7
    1e2c:	6f 90       	pop	r6
    1e2e:	5f 90       	pop	r5
    1e30:	4f 90       	pop	r4
    1e32:	3f 90       	pop	r3
    1e34:	08 95       	ret
    1e36:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <msgQ>
    1e3a:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <msgQ+0x1>
    1e3e:	10 97       	sbiw	r26, 0x00	; 0
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <async+0x1c8>
    1e42:	83 c0       	rjmp	.+262    	; 0x1f4a <async+0x2ce>
    1e44:	16 96       	adiw	r26, 0x06	; 6
    1e46:	cd 90       	ld	r12, X+
    1e48:	dd 90       	ld	r13, X+
    1e4a:	ed 90       	ld	r14, X+
    1e4c:	fc 90       	ld	r15, X
    1e4e:	19 97       	sbiw	r26, 0x09	; 9
    1e50:	0c 15       	cp	r16, r12
    1e52:	1d 05       	cpc	r17, r13
    1e54:	2e 05       	cpc	r18, r14
    1e56:	3f 05       	cpc	r19, r15
    1e58:	64 f4       	brge	.+24     	; 0x1e72 <async+0x1f6>
    1e5a:	77 c0       	rjmp	.+238    	; 0x1f4a <async+0x2ce>
    1e5c:	c6 80       	ldd	r12, Z+6	; 0x06
    1e5e:	d7 80       	ldd	r13, Z+7	; 0x07
    1e60:	e0 84       	ldd	r14, Z+8	; 0x08
    1e62:	f1 84       	ldd	r15, Z+9	; 0x09
    1e64:	0c 15       	cp	r16, r12
    1e66:	1d 05       	cpc	r17, r13
    1e68:	2e 05       	cpc	r18, r14
    1e6a:	3f 05       	cpc	r19, r15
    1e6c:	0c f4       	brge	.+2      	; 0x1e70 <async+0x1f4>
    1e6e:	5b c0       	rjmp	.+182    	; 0x1f26 <async+0x2aa>
    1e70:	df 01       	movw	r26, r30
    1e72:	ed 91       	ld	r30, X+
    1e74:	fc 91       	ld	r31, X
    1e76:	11 97       	sbiw	r26, 0x01	; 1
    1e78:	30 97       	sbiw	r30, 0x00	; 0
    1e7a:	81 f7       	brne	.-32     	; 0x1e5c <async+0x1e0>
    1e7c:	19 82       	std	Y+1, r1	; 0x01
    1e7e:	18 82       	st	Y, r1
    1e80:	cd 93       	st	X+, r28
    1e82:	dc 93       	st	X, r29
    1e84:	33 20       	and	r3, r3
    1e86:	21 f2       	breq	.-120    	; 0x1e10 <async+0x194>
    1e88:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
    1e8c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <async+0x21a>
    1e94:	bc cf       	rjmp	.-136    	; 0x1e0e <async+0x192>
    1e96:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
    1e9a:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
    1e9e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <msgQ>
    1ea2:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <msgQ+0x1>
    1ea6:	02 81       	ldd	r16, Z+2	; 0x02
    1ea8:	13 81       	ldd	r17, Z+3	; 0x03
    1eaa:	d9 01       	movw	r26, r18
    1eac:	16 96       	adiw	r26, 0x06	; 6
    1eae:	4d 91       	ld	r20, X+
    1eb0:	5d 91       	ld	r21, X+
    1eb2:	6d 91       	ld	r22, X+
    1eb4:	7c 91       	ld	r23, X
    1eb6:	19 97       	sbiw	r26, 0x09	; 9
    1eb8:	d8 01       	movw	r26, r16
    1eba:	16 96       	adiw	r26, 0x06	; 6
    1ebc:	0d 91       	ld	r16, X+
    1ebe:	1d 91       	ld	r17, X+
    1ec0:	2d 91       	ld	r18, X+
    1ec2:	3c 91       	ld	r19, X
    1ec4:	19 97       	sbiw	r26, 0x09	; 9
    1ec6:	40 1b       	sub	r20, r16
    1ec8:	51 0b       	sbc	r21, r17
    1eca:	62 0b       	sbc	r22, r18
    1ecc:	73 0b       	sbc	r23, r19
    1ece:	77 ff       	sbrs	r23, 7
    1ed0:	9e cf       	rjmp	.-196    	; 0x1e0e <async+0x192>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	2d 91       	ld	r18, X+
    1ed6:	3c 91       	ld	r19, X
    1ed8:	11 97       	sbiw	r26, 0x01	; 1
    1eda:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <threadPool+0x1>
    1ede:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <threadPool>
    1ee2:	ed 93       	st	X+, r30
    1ee4:	fc 93       	st	X, r31
    1ee6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <activeStack+0x1>
    1eea:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <activeStack>
    1eee:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    1ef2:	8d cf       	rjmp	.-230    	; 0x1e0e <async+0x192>
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255
    1ef8:	af ef       	ldi	r26, 0xFF	; 255
    1efa:	bf e7       	ldi	r27, 0x7F	; 127
    1efc:	05 cf       	rjmp	.-502    	; 0x1d08 <async+0x8c>
    1efe:	c8 01       	movw	r24, r16
    1f00:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f04:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f08:	04 1b       	sub	r16, r20
    1f0a:	15 0b       	sbc	r17, r21
    1f0c:	01 30       	cpi	r16, 0x01	; 1
    1f0e:	11 05       	cpc	r17, r1
    1f10:	b1 f0       	breq	.+44     	; 0x1f3e <async+0x2c2>
    1f12:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f16:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1f1a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1f1e:	82 60       	ori	r24, 0x02	; 2
    1f20:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1f24:	72 cf       	rjmp	.-284    	; 0x1e0a <async+0x18e>
    1f26:	f9 83       	std	Y+1, r31	; 0x01
    1f28:	e8 83       	st	Y, r30
    1f2a:	aa cf       	rjmp	.-172    	; 0x1e80 <async+0x204>
    1f2c:	b9 83       	std	Y+1, r27	; 0x01
    1f2e:	a8 83       	st	Y, r26
    1f30:	d0 93 45 01 	sts	0x0145, r29	; 0x800145 <timerQ+0x1>
    1f34:	c0 93 44 01 	sts	0x0144, r28	; 0x800144 <timerQ>
    1f38:	97 01       	movw	r18, r14
    1f3a:	86 01       	movw	r16, r12
    1f3c:	5d cf       	rjmp	.-326    	; 0x1df8 <async+0x17c>
    1f3e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f42:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	e4 cf       	rjmp	.-56     	; 0x1f12 <async+0x296>
    1f4a:	b9 83       	std	Y+1, r27	; 0x01
    1f4c:	a8 83       	st	Y, r26
    1f4e:	d0 93 47 01 	sts	0x0147, r29	; 0x800147 <msgQ+0x1>
    1f52:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <msgQ>
    1f56:	96 cf       	rjmp	.-212    	; 0x1e84 <async+0x208>
    1f58:	0e 94 58 05 	call	0xab0	; 0xab0 <dequeue.part.0>

00001f5c <sync>:
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	ec 01       	movw	r28, r24
    1f6e:	7b 01       	movw	r14, r22
    1f70:	6a 01       	movw	r12, r20
    1f72:	1f b7       	in	r17, 0x3f	; 63
    1f74:	10 78       	andi	r17, 0x80	; 128
    1f76:	f8 94       	cli
    1f78:	a8 81       	ld	r26, Y
    1f7a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f7c:	10 97       	sbiw	r26, 0x00	; 0
    1f7e:	19 f4       	brne	.+6      	; 0x1f86 <sync+0x2a>
    1f80:	62 c0       	rjmp	.+196    	; 0x2046 <sync+0xea>
    1f82:	a0 81       	ld	r26, Z
    1f84:	b1 81       	ldd	r27, Z+1	; 0x01
    1f86:	14 96       	adiw	r26, 0x04	; 4
    1f88:	ed 91       	ld	r30, X+
    1f8a:	fc 91       	ld	r31, X
    1f8c:	15 97       	sbiw	r26, 0x05	; 5
    1f8e:	30 97       	sbiw	r30, 0x00	; 0
    1f90:	c1 f7       	brne	.-16     	; 0x1f82 <sync+0x26>
    1f92:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <current>
    1f96:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <current+0x1>
    1f9a:	2a 17       	cp	r18, r26
    1f9c:	3b 07       	cpc	r19, r27
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <sync+0x46>
    1fa0:	4c c0       	rjmp	.+152    	; 0x203a <sync+0xde>
    1fa2:	11 23       	and	r17, r17
    1fa4:	a1 f1       	breq	.+104    	; 0x200e <sync+0xb2>
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	19 f0       	breq	.+6      	; 0x1fb4 <sync+0x58>
    1fae:	fc 01       	movw	r30, r24
    1fb0:	15 82       	std	Z+5, r1	; 0x05
    1fb2:	14 82       	std	Z+4, r1	; 0x04
    1fb4:	3b 83       	std	Y+3, r19	; 0x03
    1fb6:	2a 83       	std	Y+2, r18	; 0x02
    1fb8:	f9 01       	movw	r30, r18
    1fba:	d5 83       	std	Z+5, r29	; 0x05
    1fbc:	c4 83       	std	Z+4, r28	; 0x04
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    1fc4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    1fc8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	89 2b       	or	r24, r25
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <sync+0x7a>
    1fd4:	41 c0       	rjmp	.+130    	; 0x2058 <sync+0xfc>
    1fd6:	f9 83       	std	Y+1, r31	; 0x01
    1fd8:	e8 83       	st	Y, r30
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <sync+0x88>
    1fe2:	78 94       	sei
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	f7 01       	movw	r30, r14
    1fea:	09 95       	icall
    1fec:	f8 2e       	mov	r15, r24
    1fee:	09 2f       	mov	r16, r25
    1ff0:	8f b7       	in	r24, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	19 82       	std	Y+1, r1	; 0x01
    1ff6:	18 82       	st	Y, r1
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	91 05       	cpc	r25, r1
    2000:	a0 f4       	brcc	.+40     	; 0x202a <sync+0xce>
    2002:	11 23       	and	r17, r17
    2004:	79 f0       	breq	.+30     	; 0x2024 <sync+0xc8>
    2006:	78 94       	sei
    2008:	8f 2d       	mov	r24, r15
    200a:	90 2f       	mov	r25, r16
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <sync+0xb6>
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	9f ef       	ldi	r25, 0xFF	; 255
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	df 90       	pop	r13
    2020:	cf 90       	pop	r12
    2022:	08 95       	ret
    2024:	8f 2d       	mov	r24, r15
    2026:	90 2f       	mov	r25, r16
    2028:	f4 cf       	rjmp	.-24     	; 0x2012 <sync+0xb6>
    202a:	1b 82       	std	Y+3, r1	; 0x03
    202c:	1a 82       	std	Y+2, r1	; 0x02
    202e:	fc 01       	movw	r30, r24
    2030:	15 82       	std	Z+5, r1	; 0x05
    2032:	14 82       	std	Z+4, r1	; 0x04
    2034:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    2038:	e4 cf       	rjmp	.-56     	; 0x2002 <sync+0xa6>
    203a:	11 23       	and	r17, r17
    203c:	41 f3       	breq	.-48     	; 0x200e <sync+0xb2>
    203e:	78 94       	sei
    2040:	8f ef       	ldi	r24, 0xFF	; 255
    2042:	9f ef       	ldi	r25, 0xFF	; 255
    2044:	e6 cf       	rjmp	.-52     	; 0x2012 <sync+0xb6>
    2046:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
    204a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
    204e:	99 83       	std	Y+1, r25	; 0x01
    2050:	88 83       	st	Y, r24
    2052:	11 23       	and	r17, r17
    2054:	39 f2       	breq	.-114    	; 0x1fe4 <sync+0x88>
    2056:	c1 cf       	rjmp	.-126    	; 0x1fda <sync+0x7e>
    2058:	78 94       	sei
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	d9 cf       	rjmp	.-78     	; 0x2012 <sync+0xb6>

00002060 <run>:
    2060:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <msgQ>
    2064:	d0 91 47 01 	lds	r29, 0x0147	; 0x800147 <msgQ+0x1>
    2068:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    206c:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    2070:	20 97       	sbiw	r28, 0x00	; 0
    2072:	09 f4       	brne	.+2      	; 0x2076 <run+0x16>
    2074:	6e c0       	rjmp	.+220    	; 0x2152 <run+0xf2>
    2076:	88 81       	ld	r24, Y
    2078:	99 81       	ldd	r25, Y+1	; 0x01
    207a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <msgQ+0x1>
    207e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <msgQ>
    2082:	d3 83       	std	Z+3, r29	; 0x03
    2084:	c2 83       	std	Z+2, r28	; 0x02
    2086:	78 94       	sei
    2088:	4e 85       	ldd	r20, Y+14	; 0x0e
    208a:	5f 85       	ldd	r21, Y+15	; 0x0f
    208c:	6c 85       	ldd	r22, Y+12	; 0x0c
    208e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2090:	8a 85       	ldd	r24, Y+10	; 0x0a
    2092:	9b 85       	ldd	r25, Y+11	; 0x0b
    2094:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <sync>
    2098:	8f b7       	in	r24, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <msgPool>
    20a0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <msgPool+0x1>
    20a4:	99 83       	std	Y+1, r25	; 0x01
    20a6:	88 83       	st	Y, r24
    20a8:	d0 93 33 01 	sts	0x0133, r29	; 0x800133 <msgPool+0x1>
    20ac:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <msgPool>
    20b0:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <activeStack>
    20b4:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <activeStack+0x1>
    20b8:	f7 01       	movw	r30, r14
    20ba:	a0 81       	ld	r26, Z
    20bc:	b1 81       	ldd	r27, Z+1	; 0x01
    20be:	12 96       	adiw	r26, 0x02	; 2
    20c0:	8d 91       	ld	r24, X+
    20c2:	9c 91       	ld	r25, X
    20c4:	13 97       	sbiw	r26, 0x03	; 3
    20c6:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <msgQ>
    20ca:	d0 91 47 01 	lds	r29, 0x0147	; 0x800147 <msgQ+0x1>
    20ce:	20 97       	sbiw	r28, 0x00	; 0
    20d0:	a9 f0       	breq	.+42     	; 0x20fc <run+0x9c>
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	49 f2       	breq	.-110    	; 0x2068 <run+0x8>
    20d6:	4e 81       	ldd	r20, Y+6	; 0x06
    20d8:	5f 81       	ldd	r21, Y+7	; 0x07
    20da:	68 85       	ldd	r22, Y+8	; 0x08
    20dc:	79 85       	ldd	r23, Y+9	; 0x09
    20de:	fc 01       	movw	r30, r24
    20e0:	06 81       	ldd	r16, Z+6	; 0x06
    20e2:	17 81       	ldd	r17, Z+7	; 0x07
    20e4:	20 85       	ldd	r18, Z+8	; 0x08
    20e6:	31 85       	ldd	r19, Z+9	; 0x09
    20e8:	40 1b       	sub	r20, r16
    20ea:	51 0b       	sbc	r21, r17
    20ec:	62 0b       	sbc	r22, r18
    20ee:	73 0b       	sbc	r23, r19
    20f0:	14 16       	cp	r1, r20
    20f2:	15 06       	cpc	r1, r21
    20f4:	16 06       	cpc	r1, r22
    20f6:	17 06       	cpc	r1, r23
    20f8:	0c f0       	brlt	.+2      	; 0x20fc <run+0x9c>
    20fa:	b6 cf       	rjmp	.-148    	; 0x2068 <run+0x8>
    20fc:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <activeStack+0x1>
    2100:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <activeStack>
    2104:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
    2108:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
    210c:	f7 01       	movw	r30, r14
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	f0 92 31 01 	sts	0x0131, r15	; 0x800131 <threadPool+0x1>
    2116:	e0 92 30 01 	sts	0x0130, r14	; 0x800130 <threadPool>
    211a:	14 96       	adiw	r26, 0x04	; 4
    211c:	ed 91       	ld	r30, X+
    211e:	fc 91       	ld	r31, X
    2120:	15 97       	sbiw	r26, 0x05	; 5
    2122:	30 97       	sbiw	r30, 0x00	; 0
    2124:	41 f0       	breq	.+16     	; 0x2136 <run+0xd6>
    2126:	a0 81       	ld	r26, Z
    2128:	b1 81       	ldd	r27, Z+1	; 0x01
    212a:	14 96       	adiw	r26, 0x04	; 4
    212c:	ed 91       	ld	r30, X+
    212e:	fc 91       	ld	r31, X
    2130:	15 97       	sbiw	r26, 0x05	; 5
    2132:	30 97       	sbiw	r30, 0x00	; 0
    2134:	c1 f7       	brne	.-16     	; 0x2126 <run+0xc6>
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    213c:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <msgQ>
    2140:	d0 91 47 01 	lds	r29, 0x0147	; 0x800147 <msgQ+0x1>
    2144:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    2148:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    214c:	20 97       	sbiw	r28, 0x00	; 0
    214e:	09 f0       	breq	.+2      	; 0x2152 <run+0xf2>
    2150:	92 cf       	rjmp	.-220    	; 0x2076 <run+0x16>
    2152:	0e 94 58 05 	call	0xab0	; 0xab0 <dequeue.part.0>

00002156 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2156:	42 31       	cpi	r20, 0x12	; 18
    2158:	b8 f4       	brcc	.+46     	; 0x2188 <install+0x32>
        char status;
        DISABLE(status);
    215a:	2f b7       	in	r18, 0x3f	; 63
    215c:	f8 94       	cli
        otable[i] = obj;
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	44 0f       	add	r20, r20
    2162:	55 1f       	adc	r21, r21
    2164:	fa 01       	movw	r30, r20
    2166:	e8 5b       	subi	r30, 0xB8	; 184
    2168:	fe 4f       	sbci	r31, 0xFE	; 254
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
        mtable[i] = m;
    216e:	fa 01       	movw	r30, r20
    2170:	e0 52       	subi	r30, 0x20	; 32
    2172:	fe 4f       	sbci	r31, 0xFE	; 254
    2174:	71 83       	std	Z+1, r23	; 0x01
    2176:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	fc 01       	movw	r30, r24
    217e:	53 83       	std	Z+3, r21	; 0x03
    2180:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2182:	27 ff       	sbrs	r18, 7
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <install+0x32>
    2186:	78 94       	sei
    2188:	08 95       	ret

0000218a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    218a:	8c 01       	movw	r16, r24
    218c:	7b 01       	movw	r14, r22
    218e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2190:	8f b7       	in	r24, 0x3f	; 63
    2192:	f8 94       	cli
    initialize();
    2194:	0e 94 8d 04 	call	0x91a	; 0x91a <initialize>
    ENABLE(1);
    2198:	78 94       	sei
    if (m != NULL)
    219a:	e1 14       	cp	r14, r1
    219c:	f1 04       	cpc	r15, r1
    219e:	41 f0       	breq	.+16     	; 0x21b0 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	a9 01       	movw	r20, r18
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	cb 01       	movw	r24, r22
    21ac:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <async>
    DISABLE(status);
    21b0:	8f b7       	in	r24, 0x3f	; 63
    21b2:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    21b4:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    ENABLE(1);
    21b8:	78 94       	sei
    while (1) {
        SLEEP();
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	83 bf       	out	0x33, r24	; 51
    21be:	88 95       	sleep
    21c0:	fd cf       	rjmp	.-6      	; 0x21bc <tinytimber+0x32>

000021c2 <__divmodhi4>:
    21c2:	97 fb       	bst	r25, 7
    21c4:	07 2e       	mov	r0, r23
    21c6:	16 f4       	brtc	.+4      	; 0x21cc <__divmodhi4+0xa>
    21c8:	00 94       	com	r0
    21ca:	07 d0       	rcall	.+14     	; 0x21da <__divmodhi4_neg1>
    21cc:	77 fd       	sbrc	r23, 7
    21ce:	09 d0       	rcall	.+18     	; 0x21e2 <__divmodhi4_neg2>
    21d0:	0e 94 1a 11 	call	0x2234	; 0x2234 <__udivmodhi4>
    21d4:	07 fc       	sbrc	r0, 7
    21d6:	05 d0       	rcall	.+10     	; 0x21e2 <__divmodhi4_neg2>
    21d8:	3e f4       	brtc	.+14     	; 0x21e8 <__divmodhi4_exit>

000021da <__divmodhi4_neg1>:
    21da:	90 95       	com	r25
    21dc:	81 95       	neg	r24
    21de:	9f 4f       	sbci	r25, 0xFF	; 255
    21e0:	08 95       	ret

000021e2 <__divmodhi4_neg2>:
    21e2:	70 95       	com	r23
    21e4:	61 95       	neg	r22
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255

000021e8 <__divmodhi4_exit>:
    21e8:	08 95       	ret

000021ea <__divmodsi4>:
    21ea:	05 2e       	mov	r0, r21
    21ec:	97 fb       	bst	r25, 7
    21ee:	1e f4       	brtc	.+6      	; 0x21f6 <__divmodsi4+0xc>
    21f0:	00 94       	com	r0
    21f2:	0e 94 0c 11 	call	0x2218	; 0x2218 <__negsi2>
    21f6:	57 fd       	sbrc	r21, 7
    21f8:	07 d0       	rcall	.+14     	; 0x2208 <__divmodsi4_neg2>
    21fa:	0e 94 2e 11 	call	0x225c	; 0x225c <__udivmodsi4>
    21fe:	07 fc       	sbrc	r0, 7
    2200:	03 d0       	rcall	.+6      	; 0x2208 <__divmodsi4_neg2>
    2202:	4e f4       	brtc	.+18     	; 0x2216 <__divmodsi4_exit>
    2204:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__negsi2>

00002208 <__divmodsi4_neg2>:
    2208:	50 95       	com	r21
    220a:	40 95       	com	r20
    220c:	30 95       	com	r19
    220e:	21 95       	neg	r18
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	4f 4f       	sbci	r20, 0xFF	; 255
    2214:	5f 4f       	sbci	r21, 0xFF	; 255

00002216 <__divmodsi4_exit>:
    2216:	08 95       	ret

00002218 <__negsi2>:
    2218:	90 95       	com	r25
    221a:	80 95       	com	r24
    221c:	70 95       	com	r23
    221e:	61 95       	neg	r22
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	8f 4f       	sbci	r24, 0xFF	; 255
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	08 95       	ret

00002228 <__tablejump2__>:
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	05 90       	lpm	r0, Z+
    222e:	f4 91       	lpm	r31, Z
    2230:	e0 2d       	mov	r30, r0
    2232:	09 94       	ijmp

00002234 <__udivmodhi4>:
    2234:	aa 1b       	sub	r26, r26
    2236:	bb 1b       	sub	r27, r27
    2238:	51 e1       	ldi	r21, 0x11	; 17
    223a:	07 c0       	rjmp	.+14     	; 0x224a <__udivmodhi4_ep>

0000223c <__udivmodhi4_loop>:
    223c:	aa 1f       	adc	r26, r26
    223e:	bb 1f       	adc	r27, r27
    2240:	a6 17       	cp	r26, r22
    2242:	b7 07       	cpc	r27, r23
    2244:	10 f0       	brcs	.+4      	; 0x224a <__udivmodhi4_ep>
    2246:	a6 1b       	sub	r26, r22
    2248:	b7 0b       	sbc	r27, r23

0000224a <__udivmodhi4_ep>:
    224a:	88 1f       	adc	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	5a 95       	dec	r21
    2250:	a9 f7       	brne	.-22     	; 0x223c <__udivmodhi4_loop>
    2252:	80 95       	com	r24
    2254:	90 95       	com	r25
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	08 95       	ret

0000225c <__udivmodsi4>:
    225c:	a1 e2       	ldi	r26, 0x21	; 33
    225e:	1a 2e       	mov	r1, r26
    2260:	aa 1b       	sub	r26, r26
    2262:	bb 1b       	sub	r27, r27
    2264:	fd 01       	movw	r30, r26
    2266:	0d c0       	rjmp	.+26     	; 0x2282 <__udivmodsi4_ep>

00002268 <__udivmodsi4_loop>:
    2268:	aa 1f       	adc	r26, r26
    226a:	bb 1f       	adc	r27, r27
    226c:	ee 1f       	adc	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	a2 17       	cp	r26, r18
    2272:	b3 07       	cpc	r27, r19
    2274:	e4 07       	cpc	r30, r20
    2276:	f5 07       	cpc	r31, r21
    2278:	20 f0       	brcs	.+8      	; 0x2282 <__udivmodsi4_ep>
    227a:	a2 1b       	sub	r26, r18
    227c:	b3 0b       	sbc	r27, r19
    227e:	e4 0b       	sbc	r30, r20
    2280:	f5 0b       	sbc	r31, r21

00002282 <__udivmodsi4_ep>:
    2282:	66 1f       	adc	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	1a 94       	dec	r1
    228c:	69 f7       	brne	.-38     	; 0x2268 <__udivmodsi4_loop>
    228e:	60 95       	com	r22
    2290:	70 95       	com	r23
    2292:	80 95       	com	r24
    2294:	90 95       	com	r25
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	bd 01       	movw	r22, r26
    229c:	cf 01       	movw	r24, r30
    229e:	08 95       	ret

000022a0 <setjmp>:
    22a0:	dc 01       	movw	r26, r24
    22a2:	2d 92       	st	X+, r2
    22a4:	3d 92       	st	X+, r3
    22a6:	4d 92       	st	X+, r4
    22a8:	5d 92       	st	X+, r5
    22aa:	6d 92       	st	X+, r6
    22ac:	7d 92       	st	X+, r7
    22ae:	8d 92       	st	X+, r8
    22b0:	9d 92       	st	X+, r9
    22b2:	ad 92       	st	X+, r10
    22b4:	bd 92       	st	X+, r11
    22b6:	cd 92       	st	X+, r12
    22b8:	dd 92       	st	X+, r13
    22ba:	ed 92       	st	X+, r14
    22bc:	fd 92       	st	X+, r15
    22be:	0d 93       	st	X+, r16
    22c0:	1d 93       	st	X+, r17
    22c2:	cd 93       	st	X+, r28
    22c4:	dd 93       	st	X+, r29
    22c6:	ff 91       	pop	r31
    22c8:	ef 91       	pop	r30
    22ca:	8d b7       	in	r24, 0x3d	; 61
    22cc:	8d 93       	st	X+, r24
    22ce:	8e b7       	in	r24, 0x3e	; 62
    22d0:	8d 93       	st	X+, r24
    22d2:	8f b7       	in	r24, 0x3f	; 63
    22d4:	8d 93       	st	X+, r24
    22d6:	ed 93       	st	X+, r30
    22d8:	fd 93       	st	X+, r31
    22da:	88 27       	eor	r24, r24
    22dc:	99 27       	eor	r25, r25
    22de:	09 94       	ijmp

000022e0 <longjmp>:
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	91 05       	cpc	r25, r1
    22e8:	81 1d       	adc	r24, r1
    22ea:	2d 90       	ld	r2, X+
    22ec:	3d 90       	ld	r3, X+
    22ee:	4d 90       	ld	r4, X+
    22f0:	5d 90       	ld	r5, X+
    22f2:	6d 90       	ld	r6, X+
    22f4:	7d 90       	ld	r7, X+
    22f6:	8d 90       	ld	r8, X+
    22f8:	9d 90       	ld	r9, X+
    22fa:	ad 90       	ld	r10, X+
    22fc:	bd 90       	ld	r11, X+
    22fe:	cd 90       	ld	r12, X+
    2300:	dd 90       	ld	r13, X+
    2302:	ed 90       	ld	r14, X+
    2304:	fd 90       	ld	r15, X+
    2306:	0d 91       	ld	r16, X+
    2308:	1d 91       	ld	r17, X+
    230a:	cd 91       	ld	r28, X+
    230c:	dd 91       	ld	r29, X+
    230e:	ed 91       	ld	r30, X+
    2310:	fd 91       	ld	r31, X+
    2312:	0d 90       	ld	r0, X+
    2314:	f8 94       	cli
    2316:	fe bf       	out	0x3e, r31	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	ed bf       	out	0x3d, r30	; 61
    231c:	ed 91       	ld	r30, X+
    231e:	fd 91       	ld	r31, X+
    2320:	09 94       	ijmp

00002322 <_exit>:
    2322:	f8 94       	cli

00002324 <__stop_program>:
    2324:	ff cf       	rjmp	.-2      	; 0x2324 <__stop_program>
