
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00002290  00002324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  0080013c  0080013c  00002360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000303c  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f2  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000170e  00000000  00000000  0000698e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c80  00000000  00000000  0000809c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d9  00000000  00000000  00008d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f2a  00000000  00000000  000096f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c61f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_1>
       8:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_2>
       c:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_3>
      10:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__vector_4>
      14:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_9>
      28:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_10>
      2c:	0c 94 77 07 	jmp	0xeee	; 0xeee <__vector_11>
      30:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_12>
      34:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_13>
      38:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_14>
      3c:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_15>
      40:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_16>
      44:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_17>
      48:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_18>
      4c:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_19>
      50:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_20>
      54:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__vector_21>
      58:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_22>
      5c:	03 02       	muls	r16, r19
      5e:	23 02       	muls	r18, r19
      60:	32 02       	muls	r19, r18
      62:	5f 02       	muls	r21, r31
      64:	84 02       	muls	r24, r20
      66:	a6 02       	muls	r26, r22
      68:	cd 02       	muls	r28, r29
      6a:	03 03       	mulsu	r16, r19
      6c:	c8 01       	movw	r24, r16
      6e:	87 01       	movw	r16, r14

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e9       	ldi	r30, 0x90	; 144
      84:	f2 e2       	ldi	r31, 0x22	; 34
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 33       	cpi	r26, 0x3C	; 60
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	ac e3       	ldi	r26, 0x3C	; 60
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a7 39       	cpi	r26, 0x97	; 151
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <main>
      a6:	0c 94 46 11 	jmp	0x228c	; 0x228c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <removeCarFromBridge>:
} Bridge;




void removeCarFromBridge(Bridge *self){
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	fc 01       	movw	r30, r24
	--(self->carsOnBridge);
      bc:	c6 80       	ldd	r12, Z+6	; 0x06
      be:	d7 80       	ldd	r13, Z+7	; 0x07
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	c8 1a       	sub	r12, r24
      c4:	d1 08       	sbc	r13, r1
      c6:	d7 82       	std	Z+7, r13	; 0x07
      c8:	c6 82       	std	Z+6, r12	; 0x06
	ASYNC(self->gui, carsOnBridge, self->carsOnBridge);
      ca:	04 81       	ldd	r16, Z+4	; 0x04
      cc:	15 81       	ldd	r17, Z+5	; 0x05
      ce:	8b e6       	ldi	r24, 0x6B	; 107
      d0:	e8 2e       	mov	r14, r24
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	f8 2e       	mov	r15, r24
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	a9 01       	movw	r20, r18
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	cb 01       	movw	r24, r22
      e2:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
}
      e6:	1f 91       	pop	r17
      e8:	0f 91       	pop	r16
      ea:	ff 90       	pop	r15
      ec:	ef 90       	pop	r14
      ee:	df 90       	pop	r13
      f0:	cf 90       	pop	r12
      f2:	08 95       	ret

000000f4 <addCarToBridge>:


void addCarToBridge(Bridge *self){
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	ec 01       	movw	r28, r24
	++(self->carsOnBridge);
     106:	ce 80       	ldd	r12, Y+6	; 0x06
     108:	df 80       	ldd	r13, Y+7	; 0x07
     10a:	8f ef       	ldi	r24, 0xFF	; 255
     10c:	c8 1a       	sub	r12, r24
     10e:	d8 0a       	sbc	r13, r24
     110:	df 82       	std	Y+7, r13	; 0x07
     112:	ce 82       	std	Y+6, r12	; 0x06
	ASYNC(self->gui, carsOnBridge, self->carsOnBridge);
     114:	0c 81       	ldd	r16, Y+4	; 0x04
     116:	1d 81       	ldd	r17, Y+5	; 0x05
     118:	8b e6       	ldi	r24, 0x6B	; 107
     11a:	e8 2e       	mov	r14, r24
     11c:	83 e0       	ldi	r24, 0x03	; 3
     11e:	f8 2e       	mov	r15, r24
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	a9 01       	movw	r20, r18
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	cb 01       	movw	r24, r22
     12c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
	
	
	#define TRAVEL_TIME 5
	
	AFTER(SEC(TRAVEL_TIME), self, removeCarFromBridge, NULL);
     130:	c1 2c       	mov	r12, r1
     132:	d1 2c       	mov	r13, r1
     134:	97 e5       	ldi	r25, 0x57	; 87
     136:	e9 2e       	mov	r14, r25
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	f9 2e       	mov	r15, r25
     13c:	8e 01       	movw	r16, r28
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	a9 01       	movw	r20, r18
     144:	6a e5       	ldi	r22, 0x5A	; 90
     146:	72 e6       	ldi	r23, 0x62	; 98
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
}
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	1f 91       	pop	r17
     156:	0f 91       	pop	r16
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	df 90       	pop	r13
     15e:	cf 90       	pop	r12
     160:	08 95       	ret

00000162 <updateGUI>:





void updateGUI(CarQueue *self){
     162:	cf 92       	push	r12
     164:	df 92       	push	r13
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	fc 01       	movw	r30, r24
	
	
	switch(self->dirr){
     170:	82 85       	ldd	r24, Z+10	; 0x0a
     172:	93 85       	ldd	r25, Z+11	; 0x0b
     174:	00 97       	sbiw	r24, 0x00	; 0
     176:	c9 f0       	breq	.+50     	; 0x1aa <updateGUI+0x48>
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	81 f4       	brne	.+32     	; 0x19c <updateGUI+0x3a>
		case 0:
			ASYNC(self->gui, carsInNorthQueue, self->carsInQueue);
		break;
		
		case 1:
			ASYNC(self->gui, carsInSouthQueue, self->carsInQueue);
     17c:	c0 84       	ldd	r12, Z+8	; 0x08
     17e:	d1 84       	ldd	r13, Z+9	; 0x09
     180:	06 81       	ldd	r16, Z+6	; 0x06
     182:	17 81       	ldd	r17, Z+7	; 0x07
     184:	83 e7       	ldi	r24, 0x73	; 115
     186:	e8 2e       	mov	r14, r24
     188:	83 e0       	ldi	r24, 0x03	; 3
     18a:	f8 2e       	mov	r15, r24
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	a9 01       	movw	r20, r18
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	cb 01       	movw	r24, r22
     198:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
		break;
		
		default:
		break;
	}
}
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	df 90       	pop	r13
     1a6:	cf 90       	pop	r12
     1a8:	08 95       	ret
void updateGUI(CarQueue *self){
	
	
	switch(self->dirr){
		case 0:
			ASYNC(self->gui, carsInNorthQueue, self->carsInQueue);
     1aa:	c0 84       	ldd	r12, Z+8	; 0x08
     1ac:	d1 84       	ldd	r13, Z+9	; 0x09
     1ae:	06 81       	ldd	r16, Z+6	; 0x06
     1b0:	17 81       	ldd	r17, Z+7	; 0x07
     1b2:	9f e6       	ldi	r25, 0x6F	; 111
     1b4:	e9 2e       	mov	r14, r25
     1b6:	93 e0       	ldi	r25, 0x03	; 3
     1b8:	f9 2e       	mov	r15, r25
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	a9 01       	movw	r20, r18
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	cb 01       	movw	r24, r22
     1c6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
		break;
		
		default:
		break;
	}
}
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	df 90       	pop	r13
     1d4:	cf 90       	pop	r12
     1d6:	08 95       	ret

000001d8 <addCar>:


void addCar(CarQueue *self){
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
	++(self->carsInQueue);
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 85       	ldd	r18, Z+8	; 0x08
     1e8:	31 85       	ldd	r19, Z+9	; 0x09
     1ea:	2f 5f       	subi	r18, 0xFF	; 255
     1ec:	3f 4f       	sbci	r19, 0xFF	; 255
     1ee:	31 87       	std	Z+9, r19	; 0x09
     1f0:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateGUI, NULL);
     1f2:	c1 2c       	mov	r12, r1
     1f4:	d1 2c       	mov	r13, r1
     1f6:	21 eb       	ldi	r18, 0xB1	; 177
     1f8:	e2 2e       	mov	r14, r18
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	f2 2e       	mov	r15, r18
     1fe:	8c 01       	movw	r16, r24
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	a9 01       	movw	r20, r18
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	cb 01       	movw	r24, r22
     20c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
}
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	08 95       	ret

0000021e <sendCar>:



void sendCar(CarQueue *self){
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	ec 01       	movw	r28, r24
	if(self->carsInQueue > 0){
     230:	88 85       	ldd	r24, Y+8	; 0x08
     232:	99 85       	ldd	r25, Y+9	; 0x09
     234:	18 16       	cp	r1, r24
     236:	19 06       	cpc	r1, r25
     238:	9c f4       	brge	.+38     	; 0x260 <sendCar+0x42>
		--(self->carsInQueue);
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	99 87       	std	Y+9, r25	; 0x09
     23e:	88 87       	std	Y+8, r24	; 0x08
		ASYNC(self->bridge, addCarToBridge, NULL);
     240:	0c 81       	ldd	r16, Y+4	; 0x04
     242:	1d 81       	ldd	r17, Y+5	; 0x05
     244:	c1 2c       	mov	r12, r1
     246:	d1 2c       	mov	r13, r1
     248:	9a e7       	ldi	r25, 0x7A	; 122
     24a:	e9 2e       	mov	r14, r25
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	f9 2e       	mov	r15, r25
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	a9 01       	movw	r20, r18
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	cb 01       	movw	r24, r22
     25c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
	}
	
	ASYNC(self, updateGUI, NULL);
     260:	c1 2c       	mov	r12, r1
     262:	d1 2c       	mov	r13, r1
     264:	81 eb       	ldi	r24, 0xB1	; 177
     266:	e8 2e       	mov	r14, r24
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	f8 2e       	mov	r15, r24
     26c:	8e 01       	movw	r16, r28
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a9 01       	movw	r20, r18
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	cb 01       	movw	r24, r22
     27a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	08 95       	ret

00000290 <writeChar>:
	Object super;
} GUI;



static void writeChar(char c, int pos){
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
     29e:	db 01       	movw	r26, r22
     2a0:	77 fd       	sbrc	r23, 7
     2a2:	74 c0       	rjmp	.+232    	; 0x38c <writeChar+0xfc>
     2a4:	b5 95       	asr	r27
     2a6:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
     2a8:	61 70       	andi	r22, 0x01	; 1
     2aa:	70 78       	andi	r23, 0x80	; 128
     2ac:	77 fd       	sbrc	r23, 7
     2ae:	67 c0       	rjmp	.+206    	; 0x37e <writeChar+0xee>
     2b0:	66 0f       	add	r22, r22
     2b2:	77 1f       	adc	r23, r23
     2b4:	66 0f       	add	r22, r22
     2b6:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
     2b8:	ad 01       	movw	r20, r26
     2ba:	44 51       	subi	r20, 0x14	; 20
     2bc:	5f 4f       	sbci	r21, 0xFF	; 255
     2be:	ea 01       	movw	r28, r20
     2c0:	88 81       	ld	r24, Y
     2c2:	20 ef       	ldi	r18, 0xF0	; 240
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	06 2e       	mov	r0, r22
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <writeChar+0x3e>
     2ca:	35 95       	asr	r19
     2cc:	27 95       	ror	r18
     2ce:	0a 94       	dec	r0
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <writeChar+0x3a>
     2d2:	82 23       	and	r24, r18
     2d4:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
     2d6:	7d 01       	movw	r14, r26
     2d8:	d1 ef       	ldi	r29, 0xF1	; 241
     2da:	ed 0e       	add	r14, r29
     2dc:	f1 1c       	adc	r15, r1
     2de:	e7 01       	movw	r28, r14
     2e0:	88 81       	ld	r24, Y
     2e2:	82 23       	and	r24, r18
     2e4:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
     2e6:	25 96       	adiw	r28, 0x05	; 5
     2e8:	88 81       	ld	r24, Y
     2ea:	82 23       	and	r24, r18
     2ec:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
     2ee:	a5 50       	subi	r26, 0x05	; 5
     2f0:	bf 4f       	sbci	r27, 0xFF	; 255
     2f2:	8c 91       	ld	r24, X
     2f4:	28 23       	and	r18, r24
     2f6:	2c 93       	st	X, r18
	
	switch (c){
     2f8:	0e 2f       	mov	r16, r30
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	f8 01       	movw	r30, r16
     2fe:	f0 97       	sbiw	r30, 0x30	; 48
     300:	ea 30       	cpi	r30, 0x0A	; 10
     302:	f1 05       	cpc	r31, r1
     304:	a8 f5       	brcc	.+106    	; 0x370 <writeChar+0xe0>
     306:	e2 5d       	subi	r30, 0xD2	; 210
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__tablejump2__>
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
		FEET  += (1 << (0 + offset));
		break;
		
		case '9':
		HEAD  += (1 << (0 + offset));
     30e:	da 01       	movw	r26, r20
     310:	ec 91       	ld	r30, X
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9c 01       	movw	r18, r24
     318:	06 2e       	mov	r0, r22
     31a:	01 c0       	rjmp	.+2      	; 0x31e <writeChar+0x8e>
     31c:	22 0f       	add	r18, r18
     31e:	0a 94       	dec	r0
     320:	ea f7       	brpl	.-6      	; 0x31c <writeChar+0x8c>
     322:	3e 2f       	mov	r19, r30
     324:	32 0f       	add	r19, r18
     326:	3c 93       	st	X, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     328:	f7 01       	movw	r30, r14
     32a:	40 81       	ld	r20, Z
     32c:	fb 01       	movw	r30, r22
     32e:	32 96       	adiw	r30, 0x02	; 2
     330:	8c 01       	movw	r16, r24
     332:	02 c0       	rjmp	.+4      	; 0x338 <writeChar+0xa8>
     334:	00 0f       	add	r16, r16
     336:	11 1f       	adc	r17, r17
     338:	ea 95       	dec	r30
     33a:	e2 f7       	brpl	.-8      	; 0x334 <writeChar+0xa4>
     33c:	32 2f       	mov	r19, r18
     33e:	30 2b       	or	r19, r16
     340:	34 0f       	add	r19, r20
     342:	d7 01       	movw	r26, r14
     344:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     346:	38 81       	ld	r19, Y
     348:	ab 01       	movw	r20, r22
     34a:	4f 5f       	subi	r20, 0xFF	; 255
     34c:	5f 4f       	sbci	r21, 0xFF	; 255
     34e:	fc 01       	movw	r30, r24
     350:	02 c0       	rjmp	.+4      	; 0x356 <writeChar+0xc6>
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	4a 95       	dec	r20
     358:	e2 f7       	brpl	.-8      	; 0x352 <writeChar+0xc2>
     35a:	af 01       	movw	r20, r30
     35c:	6d 5f       	subi	r22, 0xFD	; 253
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	01 c0       	rjmp	.+2      	; 0x364 <writeChar+0xd4>
     362:	88 0f       	add	r24, r24
     364:	6a 95       	dec	r22
     366:	ea f7       	brpl	.-6      	; 0x362 <writeChar+0xd2>
     368:	84 2b       	or	r24, r20
     36a:	82 2b       	or	r24, r18
     36c:	83 0f       	add	r24, r19
     36e:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	08 95       	ret



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
     37e:	61 50       	subi	r22, 0x01	; 1
     380:	71 09       	sbc	r23, r1
     382:	6e 6f       	ori	r22, 0xFE	; 254
     384:	7f 6f       	ori	r23, 0xFF	; 255
     386:	6f 5f       	subi	r22, 0xFF	; 255
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	92 cf       	rjmp	.-220    	; 0x2b0 <writeChar+0x20>
} GUI;



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	8a cf       	rjmp	.-236    	; 0x2a4 <writeChar+0x14>
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset));
		break;
		
		case '8':
		HEAD  += (1 << (0 + offset));
     390:	fa 01       	movw	r30, r20
     392:	10 81       	ld	r17, Z
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	9c 01       	movw	r18, r24
     39a:	06 2e       	mov	r0, r22
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <writeChar+0x110>
     39e:	22 0f       	add	r18, r18
     3a0:	0a 94       	dec	r0
     3a2:	ea f7       	brpl	.-6      	; 0x39e <writeChar+0x10e>
     3a4:	31 2f       	mov	r19, r17
     3a6:	32 0f       	add	r19, r18
     3a8:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     3aa:	f7 01       	movw	r30, r14
     3ac:	30 81       	ld	r19, Z
     3ae:	ab 01       	movw	r20, r22
     3b0:	4e 5f       	subi	r20, 0xFE	; 254
     3b2:	5f 4f       	sbci	r21, 0xFF	; 255
     3b4:	8c 01       	movw	r16, r24
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <writeChar+0x12a>
     3b8:	00 0f       	add	r16, r16
     3ba:	4a 95       	dec	r20
     3bc:	ea f7       	brpl	.-6      	; 0x3b8 <writeChar+0x128>
     3be:	40 2f       	mov	r20, r16
     3c0:	42 2b       	or	r20, r18
     3c2:	34 0f       	add	r19, r20
     3c4:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     3c6:	38 81       	ld	r19, Y
     3c8:	ab 01       	movw	r20, r22
     3ca:	4f 5f       	subi	r20, 0xFF	; 255
     3cc:	5f 4f       	sbci	r21, 0xFF	; 255
     3ce:	fc 01       	movw	r30, r24
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <writeChar+0x146>
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	4a 95       	dec	r20
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <writeChar+0x142>
     3da:	af 01       	movw	r20, r30
     3dc:	40 2b       	or	r20, r16
     3de:	42 2b       	or	r20, r18
     3e0:	6d 5f       	subi	r22, 0xFD	; 253
     3e2:	7f 4f       	sbci	r23, 0xFF	; 255
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <writeChar+0x158>
     3e6:	88 0f       	add	r24, r24
     3e8:	6a 95       	dec	r22
     3ea:	ea f7       	brpl	.-6      	; 0x3e6 <writeChar+0x156>
     3ec:	84 2b       	or	r24, r20
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     3ee:	83 0f       	add	r24, r19
     3f0:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     3f2:	8c 91       	ld	r24, X
     3f4:	28 0f       	add	r18, r24
     3f6:	2c 93       	st	X, r18
		break;
		
		default:
		break;
	}
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	08 95       	ret
	LEGS  &= (0x0F0 >> offset);
	FEET  &= (0x0F0 >> offset);
	
	switch (c){
		case '0':
		HEAD  += (1 << (0 + offset));
     406:	fa 01       	movw	r30, r20
     408:	10 81       	ld	r17, Z
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	9c 01       	movw	r18, r24
     410:	06 2e       	mov	r0, r22
     412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	22 0f       	add	r18, r18
     416:	0a 94       	dec	r0
     418:	ea f7       	brpl	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41a:	31 2f       	mov	r19, r17
     41c:	32 0f       	add	r19, r18
     41e:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     420:	f7 01       	movw	r30, r14
     422:	30 81       	ld	r19, Z
     424:	6e 5f       	subi	r22, 0xFE	; 254
     426:	7f 4f       	sbci	r23, 0xFF	; 255
     428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	88 0f       	add	r24, r24
     42c:	6a 95       	dec	r22
     42e:	ea f7       	brpl	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     430:	82 2b       	or	r24, r18
     432:	93 2f       	mov	r25, r19
     434:	98 0f       	add	r25, r24
     436:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset)) | (1 << (2 + offset));
     438:	98 81       	ld	r25, Y
     43a:	89 0f       	add	r24, r25
     43c:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     43e:	8c 91       	ld	r24, X
     440:	28 0f       	add	r18, r24
     442:	2c 93       	st	X, r18
		break;
     444:	95 cf       	rjmp	.-214    	; 0x370 <writeChar+0xe0>
		
		case '1':
		CHEST += (1 << (0 + offset));
     446:	d7 01       	movw	r26, r14
     448:	2c 91       	ld	r18, X
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	01 c0       	rjmp	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     450:	88 0f       	add	r24, r24
     452:	6a 95       	dec	r22
     454:	ea f7       	brpl	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     456:	92 2f       	mov	r25, r18
     458:	98 0f       	add	r25, r24
     45a:	9c 93       	st	X, r25
		LEGS  += (1 << (0 + offset));
     45c:	98 81       	ld	r25, Y
     45e:	89 0f       	add	r24, r25
     460:	88 83       	st	Y, r24
		break;
     462:	86 cf       	rjmp	.-244    	; 0x370 <writeChar+0xe0>
		
		case '2':
		HEAD  += (1 << (0 + offset));
     464:	fa 01       	movw	r30, r20
     466:	10 81       	ld	r17, Z
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9c 01       	movw	r18, r24
     46e:	06 2e       	mov	r0, r22
     470:	01 c0       	rjmp	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	22 0f       	add	r18, r18
     474:	0a 94       	dec	r0
     476:	ea f7       	brpl	.-6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     478:	31 2f       	mov	r19, r17
     47a:	32 0f       	add	r19, r18
     47c:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     47e:	f7 01       	movw	r30, r14
     480:	30 81       	ld	r19, Z
     482:	32 0f       	add	r19, r18
     484:	30 83       	st	Z, r19
		LEGS  += (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     486:	38 81       	ld	r19, Y
     488:	ab 01       	movw	r20, r22
     48a:	4f 5f       	subi	r20, 0xFF	; 255
     48c:	5f 4f       	sbci	r21, 0xFF	; 255
     48e:	fc 01       	movw	r30, r24
     490:	04 2e       	mov	r0, r20
     492:	01 c0       	rjmp	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     494:	ee 0f       	add	r30, r30
     496:	0a 94       	dec	r0
     498:	ea f7       	brpl	.-6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     49a:	4f 5f       	subi	r20, 0xFF	; 255
     49c:	5f 4f       	sbci	r21, 0xFF	; 255
     49e:	8c 01       	movw	r16, r24
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a2:	00 0f       	add	r16, r16
     4a4:	11 1f       	adc	r17, r17
     4a6:	4a 95       	dec	r20
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4aa:	a8 01       	movw	r20, r16
     4ac:	4e 2b       	or	r20, r30
     4ae:	6d 5f       	subi	r22, 0xFD	; 253
     4b0:	7f 4f       	sbci	r23, 0xFF	; 255
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b4:	88 0f       	add	r24, r24
     4b6:	6a 95       	dec	r22
     4b8:	ea f7       	brpl	.-6      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4ba:	84 2b       	or	r24, r20
     4bc:	98 cf       	rjmp	.-208    	; 0x3ee <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
     4be:	fa 01       	movw	r30, r20
     4c0:	10 81       	ld	r17, Z
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9c 01       	movw	r18, r24
     4c8:	06 2e       	mov	r0, r22
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	22 0f       	add	r18, r18
     4ce:	0a 94       	dec	r0
     4d0:	ea f7       	brpl	.-6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4d2:	31 2f       	mov	r19, r17
     4d4:	32 0f       	add	r19, r18
     4d6:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     4d8:	f7 01       	movw	r30, r14
     4da:	30 81       	ld	r19, Z
     4dc:	32 0f       	add	r19, r18
     4de:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     4e0:	38 81       	ld	r19, Y
     4e2:	ab 01       	movw	r20, r22
     4e4:	4f 5f       	subi	r20, 0xFF	; 255
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	8c 01       	movw	r16, r24
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ec:	00 0f       	add	r16, r16
     4ee:	11 1f       	adc	r17, r17
     4f0:	4a 95       	dec	r20
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4f4:	a8 01       	movw	r20, r16
     4f6:	6d 5f       	subi	r22, 0xFD	; 253
     4f8:	7f 4f       	sbci	r23, 0xFF	; 255
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	88 0f       	add	r24, r24
     4fe:	6a 95       	dec	r22
     500:	ea f7       	brpl	.-6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     502:	84 2b       	or	r24, r20
     504:	82 2b       	or	r24, r18
     506:	73 cf       	rjmp	.-282    	; 0x3ee <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '4':
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     508:	d7 01       	movw	r26, r14
     50a:	4c 91       	ld	r20, X
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9c 01       	movw	r18, r24
     512:	06 2e       	mov	r0, r22
     514:	01 c0       	rjmp	.+2      	; 0x518 <__stack+0x19>
     516:	22 0f       	add	r18, r18
     518:	0a 94       	dec	r0
     51a:	ea f7       	brpl	.-6      	; 0x516 <__stack+0x17>
     51c:	fb 01       	movw	r30, r22
     51e:	32 96       	adiw	r30, 0x02	; 2
     520:	8c 01       	movw	r16, r24
     522:	02 c0       	rjmp	.+4      	; 0x528 <__stack+0x29>
     524:	00 0f       	add	r16, r16
     526:	11 1f       	adc	r17, r17
     528:	ea 95       	dec	r30
     52a:	e2 f7       	brpl	.-8      	; 0x524 <__stack+0x25>
     52c:	32 2f       	mov	r19, r18
     52e:	30 2b       	or	r19, r16
     530:	34 0f       	add	r19, r20
     532:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     534:	38 81       	ld	r19, Y
     536:	ab 01       	movw	r20, r22
     538:	4f 5f       	subi	r20, 0xFF	; 255
     53a:	5f 4f       	sbci	r21, 0xFF	; 255
     53c:	dc 01       	movw	r26, r24
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__stack+0x45>
     540:	aa 0f       	add	r26, r26
     542:	bb 1f       	adc	r27, r27
     544:	4a 95       	dec	r20
     546:	e2 f7       	brpl	.-8      	; 0x540 <__stack+0x41>
     548:	ad 01       	movw	r20, r26
     54a:	08 cf       	rjmp	.-496    	; 0x35c <writeChar+0xcc>
		break;
		
		case '5':
		HEAD  += (1 << (0 + offset));
     54c:	fa 01       	movw	r30, r20
     54e:	10 81       	ld	r17, Z
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9c 01       	movw	r18, r24
     556:	06 2e       	mov	r0, r22
     558:	01 c0       	rjmp	.+2      	; 0x55c <__stack+0x5d>
     55a:	22 0f       	add	r18, r18
     55c:	0a 94       	dec	r0
     55e:	ea f7       	brpl	.-6      	; 0x55a <__stack+0x5b>
     560:	31 2f       	mov	r19, r17
     562:	32 0f       	add	r19, r18
     564:	30 83       	st	Z, r19
		CHEST += (1 << (2 + offset));
     566:	f7 01       	movw	r30, r14
     568:	30 81       	ld	r19, Z
     56a:	ab 01       	movw	r20, r22
     56c:	4e 5f       	subi	r20, 0xFE	; 254
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	8c 01       	movw	r16, r24
     572:	02 c0       	rjmp	.+4      	; 0x578 <__stack+0x79>
     574:	00 0f       	add	r16, r16
     576:	11 1f       	adc	r17, r17
     578:	4a 95       	dec	r20
     57a:	e2 f7       	brpl	.-8      	; 0x574 <__stack+0x75>
     57c:	a8 01       	movw	r20, r16
     57e:	43 0f       	add	r20, r19
     580:	40 83       	st	Z, r20
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     582:	38 81       	ld	r19, Y
     584:	ab 01       	movw	r20, r22
     586:	4f 5f       	subi	r20, 0xFF	; 255
     588:	5f 4f       	sbci	r21, 0xFF	; 255
     58a:	fc 01       	movw	r30, r24
     58c:	02 c0       	rjmp	.+4      	; 0x592 <__stack+0x93>
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	4a 95       	dec	r20
     594:	e2 f7       	brpl	.-8      	; 0x58e <__stack+0x8f>
     596:	af 01       	movw	r20, r30
     598:	ae cf       	rjmp	.-164    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		FEET  += (1 << (0 + offset));
		break;
		
		case '6':
		HEAD  += (1 << (0 + offset));
     59a:	fa 01       	movw	r30, r20
     59c:	20 81       	ld	r18, Z
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	8c 01       	movw	r16, r24
     5a4:	06 2e       	mov	r0, r22
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <__stack+0xab>
     5a8:	00 0f       	add	r16, r16
     5aa:	0a 94       	dec	r0
     5ac:	ea f7       	brpl	.-6      	; 0x5a8 <__stack+0xa9>
     5ae:	20 0f       	add	r18, r16
     5b0:	20 83       	st	Z, r18
		CHEST += (1 << (2 + offset));
     5b2:	f7 01       	movw	r30, r14
     5b4:	40 81       	ld	r20, Z
     5b6:	9b 01       	movw	r18, r22
     5b8:	2e 5f       	subi	r18, 0xFE	; 254
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	fc 01       	movw	r30, r24
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__stack+0xc5>
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	2a 95       	dec	r18
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <__stack+0xc1>
     5c8:	9f 01       	movw	r18, r30
     5ca:	34 2f       	mov	r19, r20
     5cc:	32 0f       	add	r19, r18
     5ce:	f7 01       	movw	r30, r14
     5d0:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     5d2:	38 81       	ld	r19, Y
     5d4:	ab 01       	movw	r20, r22
     5d6:	4f 5f       	subi	r20, 0xFF	; 255
     5d8:	5f 4f       	sbci	r21, 0xFF	; 255
     5da:	fc 01       	movw	r30, r24
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__stack+0xe3>
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	4a 95       	dec	r20
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <__stack+0xdf>
     5e6:	2e 2b       	or	r18, r30
     5e8:	20 2b       	or	r18, r16
     5ea:	6d 5f       	subi	r22, 0xFD	; 253
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <__stack+0xf3>
     5f0:	88 0f       	add	r24, r24
     5f2:	6a 95       	dec	r22
     5f4:	ea f7       	brpl	.-6      	; 0x5f0 <__stack+0xf1>
     5f6:	82 2b       	or	r24, r18
     5f8:	83 0f       	add	r24, r19
     5fa:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     5fc:	8c 91       	ld	r24, X
     5fe:	e0 2f       	mov	r30, r16
     600:	e8 0f       	add	r30, r24
     602:	ec 93       	st	X, r30
		break;
     604:	b5 ce       	rjmp	.-662    	; 0x370 <writeChar+0xe0>
		
		case '7':
		HEAD  += (1 << (0 + offset));
     606:	da 01       	movw	r26, r20
     608:	2c 91       	ld	r18, X
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 c0       	rjmp	.+2      	; 0x612 <__stack+0x113>
     610:	88 0f       	add	r24, r24
     612:	6a 95       	dec	r22
     614:	ea f7       	brpl	.-6      	; 0x610 <__stack+0x111>
     616:	92 2f       	mov	r25, r18
     618:	98 0f       	add	r25, r24
     61a:	9c 93       	st	X, r25
		CHEST += (1 << (0 + offset));
     61c:	f7 01       	movw	r30, r14
     61e:	90 81       	ld	r25, Z
     620:	98 0f       	add	r25, r24
     622:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset));
     624:	98 81       	ld	r25, Y
     626:	89 0f       	add	r24, r25
     628:	88 83       	st	Y, r24
		break;
     62a:	a2 ce       	rjmp	.-700    	; 0x370 <writeChar+0xe0>

0000062c <printAt>:
		default:
		break;
	}
}

void printAt(int pos, int num) {
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
     63a:	7b 01       	movw	r14, r22
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     63c:	cb 01       	movw	r24, r22
     63e:	64 e6       	ldi	r22, 0x64	; 100
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__divmodhi4>
     646:	0a e0       	ldi	r16, 0x0A	; 10
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	b8 01       	movw	r22, r16
     64c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__divmodhi4>
     650:	86 2f       	mov	r24, r22
     652:	be 01       	movw	r22, r28
     654:	80 5d       	subi	r24, 0xD0	; 208
     656:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     65a:	21 96       	adiw	r28, 0x01	; 1
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__divmodhi4>
     664:	be 01       	movw	r22, r28
     666:	80 5d       	subi	r24, 0xD0	; 208
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14

void printAt(int pos, int num) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     674:	0c 94 48 01 	jmp	0x290	; 0x290 <writeChar>

00000678 <initLCD>:



void initLCD(){
	// LCD
	CLKPR = 0x80;
     678:	e1 e6       	ldi	r30, 0x61	; 97
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 e8       	ldi	r24, 0x80	; 128
     67e:	80 83       	st	Z, r24
	CLKPR = 0x00;
     680:	10 82       	st	Z, r1

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     682:	80 ec       	ldi	r24, 0xC0	; 192
     684:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     688:	87 e3       	ldi	r24, 0x37	; 55
     68a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     694:	8f e0       	ldi	r24, 0x0F	; 15
     696:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>


*/
	// Prints startup chars
//	LCDDR1 = (1 << 2);
	writeChar('0', 0);
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e3       	ldi	r24, 0x30	; 48
     6a0:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 1);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e3       	ldi	r24, 0x30	; 48
     6aa:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 2);
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e3       	ldi	r24, 0x30	; 48
     6b4:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 3);
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e3       	ldi	r24, 0x30	; 48
     6be:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 4);
     6c2:	64 e0       	ldi	r22, 0x04	; 4
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e3       	ldi	r24, 0x30	; 48
     6c8:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 5);
     6cc:	65 e0       	ldi	r22, 0x05	; 5
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e3       	ldi	r24, 0x30	; 48
     6d2:	0c 94 48 01 	jmp	0x290	; 0x290 <writeChar>

000006d6 <carsOnBridge>:
}



void carsOnBridge(GUI *self, int amount){
	printAt(2, amount);
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0c 94 16 03 	jmp	0x62c	; 0x62c <printAt>

000006de <carsInNorthQueue>:
}


void carsInNorthQueue(GUI *self, int amount){
	printAt(0, amount);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0c 94 16 03 	jmp	0x62c	; 0x62c <printAt>

000006e6 <carsInSouthQueue>:
}

void carsInSouthQueue(GUI *self, int amount){
	printAt(4, amount);
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0c 94 16 03 	jmp	0x62c	; 0x62c <printAt>

000006ee <test>:





void test(InputHandler *self){
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	5c 01       	movw	r10, r24
	
	char ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     702:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	
	
	
	
	if ( ReceivedByte & (1 << NORTHBOUND_CAR_ARRIVE) ) {
     706:	c0 fd       	sbrc	r28, 0
     708:	45 c0       	rjmp	.+138    	; 0x794 <test+0xa6>
		ASYNC(self->northQueue, addCar, NULL);
		
	}
	
	if ( ReceivedByte & (1 << NORTHBOUND_BRIDGE_ENTRY) ) {
     70a:	c1 fd       	sbrc	r28, 1
     70c:	31 c0       	rjmp	.+98     	; 0x770 <test+0x82>
		ASYNC(self->northQueue, sendCar, NULL);
	}
	
	if ( ReceivedByte & (1 << SOUTHBOUND_CAR_ARRIVE) ) {
     70e:	c2 fd       	sbrc	r28, 2
     710:	1d c0       	rjmp	.+58     	; 0x74c <test+0x5e>
		ASYNC(self->southQueue, addCar, NULL);
	}
	
	
	if ( ReceivedByte & (1 << SOUTHBOUND_BRIDGE_ENTRY)) {
     712:	c3 ff       	sbrs	r28, 3
     714:	11 c0       	rjmp	.+34     	; 0x738 <test+0x4a>
		ASYNC(self->southQueue, sendCar, NULL);
     716:	f5 01       	movw	r30, r10
     718:	00 85       	ldd	r16, Z+8	; 0x08
     71a:	11 85       	ldd	r17, Z+9	; 0x09
     71c:	c1 2c       	mov	r12, r1
     71e:	d1 2c       	mov	r13, r1
     720:	8f e0       	ldi	r24, 0x0F	; 15
     722:	e8 2e       	mov	r14, r24
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	f8 2e       	mov	r15, r24
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	a9 01       	movw	r20, r18
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	cb 01       	movw	r24, r22
     734:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
	
	/*
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
	UDR0 = ReceivedByte; // Echo back the received byte back to the computer
*/
}
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	08 95       	ret
	if ( ReceivedByte & (1 << NORTHBOUND_BRIDGE_ENTRY) ) {
		ASYNC(self->northQueue, sendCar, NULL);
	}
	
	if ( ReceivedByte & (1 << SOUTHBOUND_CAR_ARRIVE) ) {
		ASYNC(self->southQueue, addCar, NULL);
     74c:	f5 01       	movw	r30, r10
     74e:	00 85       	ldd	r16, Z+8	; 0x08
     750:	11 85       	ldd	r17, Z+9	; 0x09
     752:	c1 2c       	mov	r12, r1
     754:	d1 2c       	mov	r13, r1
     756:	9c ee       	ldi	r25, 0xEC	; 236
     758:	e9 2e       	mov	r14, r25
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	f9 2e       	mov	r15, r25
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	cb 01       	movw	r24, r22
     76a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
     76e:	d1 cf       	rjmp	.-94     	; 0x712 <test+0x24>
		ASYNC(self->northQueue, addCar, NULL);
		
	}
	
	if ( ReceivedByte & (1 << NORTHBOUND_BRIDGE_ENTRY) ) {
		ASYNC(self->northQueue, sendCar, NULL);
     770:	f5 01       	movw	r30, r10
     772:	06 81       	ldd	r16, Z+6	; 0x06
     774:	17 81       	ldd	r17, Z+7	; 0x07
     776:	c1 2c       	mov	r12, r1
     778:	d1 2c       	mov	r13, r1
     77a:	2f e0       	ldi	r18, 0x0F	; 15
     77c:	e2 2e       	mov	r14, r18
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	f2 2e       	mov	r15, r18
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	cb 01       	movw	r24, r22
     78e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
     792:	bd cf       	rjmp	.-134    	; 0x70e <test+0x20>
	
	
	
	
	if ( ReceivedByte & (1 << NORTHBOUND_CAR_ARRIVE) ) {
		ASYNC(self->northQueue, addCar, NULL);
     794:	fc 01       	movw	r30, r24
     796:	06 81       	ldd	r16, Z+6	; 0x06
     798:	17 81       	ldd	r17, Z+7	; 0x07
     79a:	c1 2c       	mov	r12, r1
     79c:	d1 2c       	mov	r13, r1
     79e:	3c ee       	ldi	r19, 0xEC	; 236
     7a0:	e3 2e       	mov	r14, r19
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f3 2e       	mov	r15, r19
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	cb 01       	movw	r24, r22
     7b2:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
     7b6:	a9 cf       	rjmp	.-174    	; 0x70a <test+0x1c>

000007b8 <main>:



void USART_Init( unsigned int ubrr){
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     7b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
     7bc:	83 e3       	ldi	r24, 0x33	; 51
     7be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     7c2:	88 e9       	ldi	r24, 0x98	; 152
     7c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     7c8:	86 e0       	ldi	r24, 0x06	; 6
     7ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

void main( void ){
	

	USART_Init(MYUBRR);
	initLCD();
     7ce:	0e 94 3c 03 	call	0x678	; 0x678 <initLCD>

	
	INSTALL(&inputHandler, test, IRQ_USART0_RX);
     7d2:	48 e0       	ldi	r20, 0x08	; 8
     7d4:	67 e7       	ldi	r22, 0x77	; 119
     7d6:	73 e0       	ldi	r23, 0x03	; 3
     7d8:	88 e0       	ldi	r24, 0x08	; 8
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 37 10 	call	0x206e	; 0x206e <install>
	
	sei();
     7e0:	78 94       	sei
	
	
	return TINYTIMBER(&trafficLight, trafficLightFunc, NULL);
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	6d e6       	ldi	r22, 0x6D	; 109
     7e8:	70 e1       	ldi	r23, 0x10	; 16
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <tinytimber>

000007f2 <northboundGreenLight>:

*/


void northboundGreenLight(SimWriter *self){
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     7f2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     7f6:	85 ff       	sbrs	r24, 5
     7f8:	fc cf       	rjmp	.-8      	; 0x7f2 <northboundGreenLight>
	UDR0 = 1; // Echo back the received byte back to the computer
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     800:	08 95       	ret

00000802 <northboundRedLight>:
}

void northboundRedLight(SimWriter *self){
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     802:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     806:	85 ff       	sbrs	r24, 5
     808:	fc cf       	rjmp	.-8      	; 0x802 <northboundRedLight>
	UDR0 = 2; // Echo back the received byte back to the computer
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     810:	08 95       	ret

00000812 <southboundGreenLight>:
}

void southboundGreenLight(SimWriter *self){
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     812:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     816:	85 ff       	sbrs	r24, 5
     818:	fc cf       	rjmp	.-8      	; 0x812 <southboundGreenLight>
	UDR0 = 4; // Echo back the received byte back to the computer
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     820:	08 95       	ret

00000822 <southboundRedLight>:
}

void southboundRedLight(SimWriter *self){
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     822:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     826:	85 ff       	sbrs	r24, 5
     828:	fc cf       	rjmp	.-8      	; 0x822 <southboundRedLight>
	UDR0 = 8; // Echo back the received byte back to the computer
     82a:	88 e0       	ldi	r24, 0x08	; 8
     82c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     830:	08 95       	ret

00000832 <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	00 d0       	rcall	.+0      	; 0x838 <initialize+0x6>
     838:	00 d0       	rcall	.+0      	; 0x83a <initialize+0x8>
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	87 e3       	ldi	r24, 0x37	; 55
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	27 e1       	ldi	r18, 0x17	; 23
     844:	33 e0       	ldi	r19, 0x03	; 3
     846:	fc 01       	movw	r30, r24
     848:	70 97       	sbiw	r30, 0x10	; 16
     84a:	91 83       	std	Z+1, r25	; 0x01
     84c:	80 83       	st	Z, r24
     84e:	40 96       	adiw	r24, 0x10	; 16
     850:	82 17       	cp	r24, r18
     852:	93 07       	cpc	r25, r19
     854:	c1 f7       	brne	.-16     	; 0x846 <initialize+0x14>
     856:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <messages+0xe1>
     85a:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <messages+0xe0>
     85e:	e2 e7       	ldi	r30, 0x72	; 114
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	8f e8       	ldi	r24, 0x8F	; 143
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24
     86a:	8c ea       	ldi	r24, 0xAC	; 172
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	96 8f       	std	Z+30, r25	; 0x1e
     870:	85 8f       	std	Z+29, r24	; 0x1d
     872:	a9 ec       	ldi	r26, 0xC9	; 201
     874:	b1 e0       	ldi	r27, 0x01	; 1
     876:	b3 af       	std	Z+59, r27	; 0x3b
     878:	a2 af       	std	Z+58, r26	; 0x3a
     87a:	1d 92       	st	X+, r1
     87c:	1c 92       	st	X, r1
     87e:	fa 83       	std	Y+2, r31	; 0x02
     880:	e9 83       	std	Y+1, r30	; 0x01
     882:	e3 e7       	ldi	r30, 0x73	; 115
     884:	f3 e0       	ldi	r31, 0x03	; 3
     886:	fc 83       	std	Y+4, r31	; 0x04
     888:	eb 83       	std	Y+3, r30	; 0x03
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	06 96       	adiw	r24, 0x06	; 6
     890:	0e 94 05 11 	call	0x220a	; 0x220a <setjmp>
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	e9 81       	ldd	r30, Y+1	; 0x01
     89a:	fa 81       	ldd	r31, Y+2	; 0x02
     89c:	97 8b       	std	Z+23, r25	; 0x17
     89e:	86 8b       	std	Z+22, r24	; 0x16
     8a0:	91 8f       	std	Z+25, r25	; 0x19
     8a2:	80 8f       	std	Z+24, r24	; 0x18
     8a4:	8c eb       	ldi	r24, 0xBC	; 188
     8a6:	9f e0       	ldi	r25, 0x0F	; 15
     8a8:	94 8f       	std	Z+28, r25	; 0x1c
     8aa:	83 8f       	std	Z+27, r24	; 0x1b
     8ac:	15 82       	std	Z+5, r1	; 0x05
     8ae:	14 82       	std	Z+4, r1	; 0x04
     8b0:	7d 96       	adiw	r30, 0x1d	; 29
     8b2:	fa 83       	std	Y+2, r31	; 0x02
     8b4:	e9 83       	std	Y+1, r30	; 0x01
     8b6:	eb 81       	ldd	r30, Y+3	; 0x03
     8b8:	fc 81       	ldd	r31, Y+4	; 0x04
     8ba:	e0 5a       	subi	r30, 0xA0	; 160
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	fc 83       	std	Y+4, r31	; 0x04
     8c0:	eb 83       	std	Y+3, r30	; 0x03
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	9a 81       	ldd	r25, Y+2	; 0x02
     8c6:	86 5e       	subi	r24, 0xE6	; 230
     8c8:	91 40       	sbci	r25, 0x01	; 1
     8ca:	f9 f6       	brne	.-66     	; 0x88a <initialize+0x58>
     8cc:	ea e0       	ldi	r30, 0x0A	; 10
     8ce:	f2 e0       	ldi	r31, 0x02	; 2
     8d0:	11 82       	std	Z+1, r1	; 0x01
     8d2:	10 82       	st	Z, r1
     8d4:	15 82       	std	Z+5, r1	; 0x05
     8d6:	14 82       	std	Z+4, r1	; 0x04
     8d8:	13 82       	std	Z+3, r1	; 0x03
     8da:	12 82       	std	Z+2, r1	; 0x02
     8dc:	e1 e6       	ldi	r30, 0x61	; 97
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 e8       	ldi	r24, 0x80	; 128
     8e2:	80 83       	st	Z, r24
     8e4:	10 82       	st	Z, r1
     8e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <dispatch>:
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	00 d0       	rcall	.+0      	; 0x90e <dispatch+0x6>
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current>
     91a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current+0x1>
     91e:	06 96       	adiw	r24, 0x06	; 6
     920:	0e 94 05 11 	call	0x220a	; 0x220a <setjmp>
     924:	89 2b       	or	r24, r25
     926:	29 f0       	breq	.+10     	; 0x932 <dispatch+0x2a>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <current+0x1>
     93a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current>
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	06 96       	adiw	r24, 0x06	; 6
     944:	0e 94 25 11 	call	0x224a	; 0x224a <longjmp>

00000948 <schedule>:
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <msgQ>
     954:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <msgQ+0x1>
     958:	30 97       	sbiw	r30, 0x00	; 0
     95a:	f1 f0       	breq	.+60     	; 0x998 <schedule+0x50>
     95c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
     960:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	c1 f0       	breq	.+48     	; 0x998 <schedule+0x50>
     968:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <activeStack>
     96c:	d0 91 37 01 	lds	r29, 0x0137	; 0x800137 <activeStack+0x1>
     970:	aa 81       	ldd	r26, Y+2	; 0x02
     972:	bb 81       	ldd	r27, Y+3	; 0x03
     974:	10 97       	sbiw	r26, 0x00	; 0
     976:	a9 f0       	breq	.+42     	; 0x9a2 <schedule+0x5a>
     978:	46 81       	ldd	r20, Z+6	; 0x06
     97a:	57 81       	ldd	r21, Z+7	; 0x07
     97c:	60 85       	ldd	r22, Z+8	; 0x08
     97e:	71 85       	ldd	r23, Z+9	; 0x09
     980:	16 96       	adiw	r26, 0x06	; 6
     982:	0d 91       	ld	r16, X+
     984:	1d 91       	ld	r17, X+
     986:	2d 91       	ld	r18, X+
     988:	3c 91       	ld	r19, X
     98a:	19 97       	sbiw	r26, 0x09	; 9
     98c:	40 1b       	sub	r20, r16
     98e:	51 0b       	sbc	r21, r17
     990:	62 0b       	sbc	r22, r18
     992:	73 0b       	sbc	r23, r19
     994:	77 fd       	sbrc	r23, 7
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <schedule+0x5a>
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	08 95       	ret
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 81       	ld	r18, Z
     9a6:	31 81       	ldd	r19, Z+1	; 0x01
     9a8:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <threadPool+0x1>
     9ac:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <threadPool>
     9b0:	d1 83       	std	Z+1, r29	; 0x01
     9b2:	c0 83       	st	Z, r28
     9b4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <activeStack+0x1>
     9b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <activeStack>
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	0c 94 84 04 	jmp	0x908	; 0x908 <dispatch>

000009c8 <dequeue.part.0>:
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     9ce:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     9d2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	83 bf       	out	0x33, r24	; 51
     9da:	88 95       	sleep
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <dequeue.part.0+0x10>

000009de <__vector_1>:
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
     a00:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     a04:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     a08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a10:	c9 01       	movw	r24, r18
     a12:	03 2e       	mov	r0, r19
     a14:	00 0c       	add	r0, r0
     a16:	aa 0b       	sbc	r26, r26
     a18:	bb 0b       	sbc	r27, r27
     a1a:	dc 01       	movw	r26, r24
     a1c:	99 27       	eor	r25, r25
     a1e:	88 27       	eor	r24, r24
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	84 2b       	or	r24, r20
     a26:	95 2b       	or	r25, r21
     a28:	a6 2b       	or	r26, r22
     a2a:	b7 2b       	or	r27, r23
     a2c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     a30:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     a34:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     a38:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     a3c:	b0 9b       	sbis	0x16, 0	; 22
     a3e:	1b c0       	rjmp	.+54     	; 0xa76 <__vector_1+0x98>
     a40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a48:	c9 01       	movw	r24, r18
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	09 2e       	mov	r0, r25
     a4e:	00 0c       	add	r0, r0
     a50:	aa 0b       	sbc	r26, r26
     a52:	bb 0b       	sbc	r27, r27
     a54:	dc 01       	movw	r26, r24
     a56:	99 27       	eor	r25, r25
     a58:	88 27       	eor	r24, r24
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	84 2b       	or	r24, r20
     a60:	95 2b       	or	r25, r21
     a62:	a6 2b       	or	r26, r22
     a64:	b7 2b       	or	r27, r23
     a66:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     a6a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     a6e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     a72:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     a76:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable>
     a7a:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x1>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	39 f0       	breq	.+14     	; 0xa90 <__vector_1+0xb2>
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable>
     a8a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x1>
     a8e:	09 95       	icall
     a90:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	bf 91       	pop	r27
     a9a:	af 91       	pop	r26
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	7f 91       	pop	r23
     aa2:	6f 91       	pop	r22
     aa4:	5f 91       	pop	r21
     aa6:	4f 91       	pop	r20
     aa8:	3f 91       	pop	r19
     aaa:	2f 91       	pop	r18
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_2>:
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
     ad8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     adc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     ae0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ae4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ae8:	c9 01       	movw	r24, r18
     aea:	03 2e       	mov	r0, r19
     aec:	00 0c       	add	r0, r0
     aee:	aa 0b       	sbc	r26, r26
     af0:	bb 0b       	sbc	r27, r27
     af2:	dc 01       	movw	r26, r24
     af4:	99 27       	eor	r25, r25
     af6:	88 27       	eor	r24, r24
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	84 2b       	or	r24, r20
     afe:	95 2b       	or	r25, r21
     b00:	a6 2b       	or	r26, r22
     b02:	b7 2b       	or	r27, r23
     b04:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     b08:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     b0c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     b10:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     b14:	b0 9b       	sbis	0x16, 0	; 22
     b16:	1b c0       	rjmp	.+54     	; 0xb4e <__vector_2+0x98>
     b18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b20:	c9 01       	movw	r24, r18
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	09 2e       	mov	r0, r25
     b26:	00 0c       	add	r0, r0
     b28:	aa 0b       	sbc	r26, r26
     b2a:	bb 0b       	sbc	r27, r27
     b2c:	dc 01       	movw	r26, r24
     b2e:	99 27       	eor	r25, r25
     b30:	88 27       	eor	r24, r24
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	84 2b       	or	r24, r20
     b38:	95 2b       	or	r25, r21
     b3a:	a6 2b       	or	r26, r22
     b3c:	b7 2b       	or	r27, r23
     b3e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     b42:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     b46:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     b4a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     b4e:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x2>
     b52:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x3>
     b56:	30 97       	sbiw	r30, 0x00	; 0
     b58:	39 f0       	breq	.+14     	; 0xb68 <__vector_2+0xb2>
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x2>
     b62:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x3>
     b66:	09 95       	icall
     b68:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
     b6c:	ff 91       	pop	r31
     b6e:	ef 91       	pop	r30
     b70:	bf 91       	pop	r27
     b72:	af 91       	pop	r26
     b74:	9f 91       	pop	r25
     b76:	8f 91       	pop	r24
     b78:	7f 91       	pop	r23
     b7a:	6f 91       	pop	r22
     b7c:	5f 91       	pop	r21
     b7e:	4f 91       	pop	r20
     b80:	3f 91       	pop	r19
     b82:	2f 91       	pop	r18
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <__vector_3>:
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	4f 93       	push	r20
     b9e:	5f 93       	push	r21
     ba0:	6f 93       	push	r22
     ba2:	7f 93       	push	r23
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
     bb0:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     bb4:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     bb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bbc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bc0:	c9 01       	movw	r24, r18
     bc2:	03 2e       	mov	r0, r19
     bc4:	00 0c       	add	r0, r0
     bc6:	aa 0b       	sbc	r26, r26
     bc8:	bb 0b       	sbc	r27, r27
     bca:	dc 01       	movw	r26, r24
     bcc:	99 27       	eor	r25, r25
     bce:	88 27       	eor	r24, r24
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	84 2b       	or	r24, r20
     bd6:	95 2b       	or	r25, r21
     bd8:	a6 2b       	or	r26, r22
     bda:	b7 2b       	or	r27, r23
     bdc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     be0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     be4:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     be8:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     bec:	b0 9b       	sbis	0x16, 0	; 22
     bee:	1b c0       	rjmp	.+54     	; 0xc26 <__vector_3+0x98>
     bf0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bf4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bf8:	c9 01       	movw	r24, r18
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	09 2e       	mov	r0, r25
     bfe:	00 0c       	add	r0, r0
     c00:	aa 0b       	sbc	r26, r26
     c02:	bb 0b       	sbc	r27, r27
     c04:	dc 01       	movw	r26, r24
     c06:	99 27       	eor	r25, r25
     c08:	88 27       	eor	r24, r24
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	84 2b       	or	r24, r20
     c10:	95 2b       	or	r25, r21
     c12:	a6 2b       	or	r26, r22
     c14:	b7 2b       	or	r27, r23
     c16:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     c1a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     c1e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     c22:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     c26:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x4>
     c2a:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x5>
     c2e:	30 97       	sbiw	r30, 0x00	; 0
     c30:	39 f0       	breq	.+14     	; 0xc40 <__vector_3+0xb2>
     c32:	62 e0       	ldi	r22, 0x02	; 2
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x4>
     c3a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x5>
     c3e:	09 95       	icall
     c40:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	bf 91       	pop	r27
     c4a:	af 91       	pop	r26
     c4c:	9f 91       	pop	r25
     c4e:	8f 91       	pop	r24
     c50:	7f 91       	pop	r23
     c52:	6f 91       	pop	r22
     c54:	5f 91       	pop	r21
     c56:	4f 91       	pop	r20
     c58:	3f 91       	pop	r19
     c5a:	2f 91       	pop	r18
     c5c:	0f 90       	pop	r0
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	0f 90       	pop	r0
     c62:	1f 90       	pop	r1
     c64:	18 95       	reti

00000c66 <__vector_4>:
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
     c88:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     c8c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     c90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c98:	c9 01       	movw	r24, r18
     c9a:	03 2e       	mov	r0, r19
     c9c:	00 0c       	add	r0, r0
     c9e:	aa 0b       	sbc	r26, r26
     ca0:	bb 0b       	sbc	r27, r27
     ca2:	dc 01       	movw	r26, r24
     ca4:	99 27       	eor	r25, r25
     ca6:	88 27       	eor	r24, r24
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	84 2b       	or	r24, r20
     cae:	95 2b       	or	r25, r21
     cb0:	a6 2b       	or	r26, r22
     cb2:	b7 2b       	or	r27, r23
     cb4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     cb8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     cbc:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     cc0:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     cc4:	b0 9b       	sbis	0x16, 0	; 22
     cc6:	1b c0       	rjmp	.+54     	; 0xcfe <__vector_4+0x98>
     cc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ccc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     cd0:	c9 01       	movw	r24, r18
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	09 2e       	mov	r0, r25
     cd6:	00 0c       	add	r0, r0
     cd8:	aa 0b       	sbc	r26, r26
     cda:	bb 0b       	sbc	r27, r27
     cdc:	dc 01       	movw	r26, r24
     cde:	99 27       	eor	r25, r25
     ce0:	88 27       	eor	r24, r24
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	84 2b       	or	r24, r20
     ce8:	95 2b       	or	r25, r21
     cea:	a6 2b       	or	r26, r22
     cec:	b7 2b       	or	r27, r23
     cee:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     cf2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     cf6:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     cfa:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     cfe:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x6>
     d02:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x7>
     d06:	30 97       	sbiw	r30, 0x00	; 0
     d08:	39 f0       	breq	.+14     	; 0xd18 <__vector_4+0xb2>
     d0a:	63 e0       	ldi	r22, 0x03	; 3
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x6>
     d12:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x7>
     d16:	09 95       	icall
     d18:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <__vector_5>:
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     d64:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     d68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d70:	c9 01       	movw	r24, r18
     d72:	03 2e       	mov	r0, r19
     d74:	00 0c       	add	r0, r0
     d76:	aa 0b       	sbc	r26, r26
     d78:	bb 0b       	sbc	r27, r27
     d7a:	dc 01       	movw	r26, r24
     d7c:	99 27       	eor	r25, r25
     d7e:	88 27       	eor	r24, r24
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	84 2b       	or	r24, r20
     d86:	95 2b       	or	r25, r21
     d88:	a6 2b       	or	r26, r22
     d8a:	b7 2b       	or	r27, r23
     d8c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     d90:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     d94:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     d98:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     d9c:	b0 9b       	sbis	0x16, 0	; 22
     d9e:	1b c0       	rjmp	.+54     	; 0xdd6 <__vector_5+0x98>
     da0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     da4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     da8:	c9 01       	movw	r24, r18
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	09 2e       	mov	r0, r25
     dae:	00 0c       	add	r0, r0
     db0:	aa 0b       	sbc	r26, r26
     db2:	bb 0b       	sbc	r27, r27
     db4:	dc 01       	movw	r26, r24
     db6:	99 27       	eor	r25, r25
     db8:	88 27       	eor	r24, r24
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	84 2b       	or	r24, r20
     dc0:	95 2b       	or	r25, r21
     dc2:	a6 2b       	or	r26, r22
     dc4:	b7 2b       	or	r27, r23
     dc6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     dca:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     dce:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     dd2:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     dd6:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x8>
     dda:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x9>
     dde:	30 97       	sbiw	r30, 0x00	; 0
     de0:	39 f0       	breq	.+14     	; 0xdf0 <__vector_5+0xb2>
     de2:	64 e0       	ldi	r22, 0x04	; 4
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x8>
     dea:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x9>
     dee:	09 95       	icall
     df0:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_10>:
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     e3c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     e40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e48:	c9 01       	movw	r24, r18
     e4a:	03 2e       	mov	r0, r19
     e4c:	00 0c       	add	r0, r0
     e4e:	aa 0b       	sbc	r26, r26
     e50:	bb 0b       	sbc	r27, r27
     e52:	dc 01       	movw	r26, r24
     e54:	99 27       	eor	r25, r25
     e56:	88 27       	eor	r24, r24
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	84 2b       	or	r24, r20
     e5e:	95 2b       	or	r25, r21
     e60:	a6 2b       	or	r26, r22
     e62:	b7 2b       	or	r27, r23
     e64:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     e68:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     e6c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     e70:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     e74:	b0 9b       	sbis	0x16, 0	; 22
     e76:	1b c0       	rjmp	.+54     	; 0xeae <__vector_10+0x98>
     e78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e80:	c9 01       	movw	r24, r18
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	09 2e       	mov	r0, r25
     e86:	00 0c       	add	r0, r0
     e88:	aa 0b       	sbc	r26, r26
     e8a:	bb 0b       	sbc	r27, r27
     e8c:	dc 01       	movw	r26, r24
     e8e:	99 27       	eor	r25, r25
     e90:	88 27       	eor	r24, r24
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	84 2b       	or	r24, r20
     e98:	95 2b       	or	r25, r21
     e9a:	a6 2b       	or	r26, r22
     e9c:	b7 2b       	or	r27, r23
     e9e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     ea2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     ea6:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     eaa:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     eae:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0xa>
     eb2:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0xb>
     eb6:	30 97       	sbiw	r30, 0x00	; 0
     eb8:	39 f0       	breq	.+14     	; 0xec8 <__vector_10+0xb2>
     eba:	65 e0       	ldi	r22, 0x05	; 5
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0xa>
     ec2:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0xb>
     ec6:	09 95       	icall
     ec8:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <__vector_11>:
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     f14:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     f18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f20:	c9 01       	movw	r24, r18
     f22:	03 2e       	mov	r0, r19
     f24:	00 0c       	add	r0, r0
     f26:	aa 0b       	sbc	r26, r26
     f28:	bb 0b       	sbc	r27, r27
     f2a:	dc 01       	movw	r26, r24
     f2c:	99 27       	eor	r25, r25
     f2e:	88 27       	eor	r24, r24
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	84 2b       	or	r24, r20
     f36:	95 2b       	or	r25, r21
     f38:	a6 2b       	or	r26, r22
     f3a:	b7 2b       	or	r27, r23
     f3c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     f40:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     f44:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     f48:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     f4c:	b0 9b       	sbis	0x16, 0	; 22
     f4e:	1b c0       	rjmp	.+54     	; 0xf86 <__vector_11+0x98>
     f50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f58:	c9 01       	movw	r24, r18
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	09 2e       	mov	r0, r25
     f5e:	00 0c       	add	r0, r0
     f60:	aa 0b       	sbc	r26, r26
     f62:	bb 0b       	sbc	r27, r27
     f64:	dc 01       	movw	r26, r24
     f66:	99 27       	eor	r25, r25
     f68:	88 27       	eor	r24, r24
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	84 2b       	or	r24, r20
     f70:	95 2b       	or	r25, r21
     f72:	a6 2b       	or	r26, r22
     f74:	b7 2b       	or	r27, r23
     f76:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
     f7a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
     f7e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
     f82:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
     f86:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0xc>
     f8a:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0xd>
     f8e:	30 97       	sbiw	r30, 0x00	; 0
     f90:	39 f0       	breq	.+14     	; 0xfa0 <__vector_11+0xb2>
     f92:	66 e0       	ldi	r22, 0x06	; 6
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0xc>
     f9a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0xd>
     f9e:	09 95       	icall
     fa0:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_12>:
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
     fec:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
     ff0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ff4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ff8:	c9 01       	movw	r24, r18
     ffa:	03 2e       	mov	r0, r19
     ffc:	00 0c       	add	r0, r0
     ffe:	aa 0b       	sbc	r26, r26
    1000:	bb 0b       	sbc	r27, r27
    1002:	dc 01       	movw	r26, r24
    1004:	99 27       	eor	r25, r25
    1006:	88 27       	eor	r24, r24
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	84 2b       	or	r24, r20
    100e:	95 2b       	or	r25, r21
    1010:	a6 2b       	or	r26, r22
    1012:	b7 2b       	or	r27, r23
    1014:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1018:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    101c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1020:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    1024:	b0 9b       	sbis	0x16, 0	; 22
    1026:	1b c0       	rjmp	.+54     	; 0x105e <__vector_12+0x98>
    1028:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    102c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1030:	c9 01       	movw	r24, r18
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	09 2e       	mov	r0, r25
    1036:	00 0c       	add	r0, r0
    1038:	aa 0b       	sbc	r26, r26
    103a:	bb 0b       	sbc	r27, r27
    103c:	dc 01       	movw	r26, r24
    103e:	99 27       	eor	r25, r25
    1040:	88 27       	eor	r24, r24
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	84 2b       	or	r24, r20
    1048:	95 2b       	or	r25, r21
    104a:	a6 2b       	or	r26, r22
    104c:	b7 2b       	or	r27, r23
    104e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1052:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    1056:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    105a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    105e:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0xe>
    1062:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0xf>
    1066:	30 97       	sbiw	r30, 0x00	; 0
    1068:	39 f0       	breq	.+14     	; 0x1078 <__vector_12+0xb2>
    106a:	67 e0       	ldi	r22, 0x07	; 7
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0xe>
    1072:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0xf>
    1076:	09 95       	icall
    1078:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_13>:
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	6f 93       	push	r22
    10b2:	7f 93       	push	r23
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31
    10c0:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    10c4:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    10c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    10cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10d0:	c9 01       	movw	r24, r18
    10d2:	03 2e       	mov	r0, r19
    10d4:	00 0c       	add	r0, r0
    10d6:	aa 0b       	sbc	r26, r26
    10d8:	bb 0b       	sbc	r27, r27
    10da:	dc 01       	movw	r26, r24
    10dc:	99 27       	eor	r25, r25
    10de:	88 27       	eor	r24, r24
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	84 2b       	or	r24, r20
    10e6:	95 2b       	or	r25, r21
    10e8:	a6 2b       	or	r26, r22
    10ea:	b7 2b       	or	r27, r23
    10ec:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    10f0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    10f4:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    10f8:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    10fc:	b0 9b       	sbis	0x16, 0	; 22
    10fe:	1b c0       	rjmp	.+54     	; 0x1136 <__vector_13+0x98>
    1100:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1104:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1108:	c9 01       	movw	r24, r18
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	09 2e       	mov	r0, r25
    110e:	00 0c       	add	r0, r0
    1110:	aa 0b       	sbc	r26, r26
    1112:	bb 0b       	sbc	r27, r27
    1114:	dc 01       	movw	r26, r24
    1116:	99 27       	eor	r25, r25
    1118:	88 27       	eor	r24, r24
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	84 2b       	or	r24, r20
    1120:	95 2b       	or	r25, r21
    1122:	a6 2b       	or	r26, r22
    1124:	b7 2b       	or	r27, r23
    1126:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    112a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    112e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1132:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    1136:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x10>
    113a:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x11>
    113e:	30 97       	sbiw	r30, 0x00	; 0
    1140:	39 f0       	breq	.+14     	; 0x1150 <__vector_13+0xb2>
    1142:	68 e0       	ldi	r22, 0x08	; 8
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x10>
    114a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x11>
    114e:	09 95       	icall
    1150:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_14>:
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    1198:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    119c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    11a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    11a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11a8:	c9 01       	movw	r24, r18
    11aa:	03 2e       	mov	r0, r19
    11ac:	00 0c       	add	r0, r0
    11ae:	aa 0b       	sbc	r26, r26
    11b0:	bb 0b       	sbc	r27, r27
    11b2:	dc 01       	movw	r26, r24
    11b4:	99 27       	eor	r25, r25
    11b6:	88 27       	eor	r24, r24
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	84 2b       	or	r24, r20
    11be:	95 2b       	or	r25, r21
    11c0:	a6 2b       	or	r26, r22
    11c2:	b7 2b       	or	r27, r23
    11c4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    11c8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    11cc:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    11d0:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    11d4:	b0 9b       	sbis	0x16, 0	; 22
    11d6:	1b c0       	rjmp	.+54     	; 0x120e <__vector_14+0x98>
    11d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    11dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11e0:	c9 01       	movw	r24, r18
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	09 2e       	mov	r0, r25
    11e6:	00 0c       	add	r0, r0
    11e8:	aa 0b       	sbc	r26, r26
    11ea:	bb 0b       	sbc	r27, r27
    11ec:	dc 01       	movw	r26, r24
    11ee:	99 27       	eor	r25, r25
    11f0:	88 27       	eor	r24, r24
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	84 2b       	or	r24, r20
    11f8:	95 2b       	or	r25, r21
    11fa:	a6 2b       	or	r26, r22
    11fc:	b7 2b       	or	r27, r23
    11fe:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1202:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    1206:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    120a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    120e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x12>
    1212:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x13>
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	39 f0       	breq	.+14     	; 0x1228 <__vector_14+0xb2>
    121a:	69 e0       	ldi	r22, 0x09	; 9
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x12>
    1222:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x13>
    1226:	09 95       	icall
    1228:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	bf 91       	pop	r27
    1232:	af 91       	pop	r26
    1234:	9f 91       	pop	r25
    1236:	8f 91       	pop	r24
    1238:	7f 91       	pop	r23
    123a:	6f 91       	pop	r22
    123c:	5f 91       	pop	r21
    123e:	4f 91       	pop	r20
    1240:	3f 91       	pop	r19
    1242:	2f 91       	pop	r18
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_15>:
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
    1270:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    1274:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    1278:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    127c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1280:	c9 01       	movw	r24, r18
    1282:	03 2e       	mov	r0, r19
    1284:	00 0c       	add	r0, r0
    1286:	aa 0b       	sbc	r26, r26
    1288:	bb 0b       	sbc	r27, r27
    128a:	dc 01       	movw	r26, r24
    128c:	99 27       	eor	r25, r25
    128e:	88 27       	eor	r24, r24
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	84 2b       	or	r24, r20
    1296:	95 2b       	or	r25, r21
    1298:	a6 2b       	or	r26, r22
    129a:	b7 2b       	or	r27, r23
    129c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    12a0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    12a4:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    12a8:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    12ac:	b0 9b       	sbis	0x16, 0	; 22
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <__vector_15+0x98>
    12b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    12b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    12b8:	c9 01       	movw	r24, r18
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	09 2e       	mov	r0, r25
    12be:	00 0c       	add	r0, r0
    12c0:	aa 0b       	sbc	r26, r26
    12c2:	bb 0b       	sbc	r27, r27
    12c4:	dc 01       	movw	r26, r24
    12c6:	99 27       	eor	r25, r25
    12c8:	88 27       	eor	r24, r24
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	84 2b       	or	r24, r20
    12d0:	95 2b       	or	r25, r21
    12d2:	a6 2b       	or	r26, r22
    12d4:	b7 2b       	or	r27, r23
    12d6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    12da:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    12de:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    12e2:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    12e6:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x14>
    12ea:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x15>
    12ee:	30 97       	sbiw	r30, 0x00	; 0
    12f0:	39 f0       	breq	.+14     	; 0x1300 <__vector_15+0xb2>
    12f2:	6a e0       	ldi	r22, 0x0A	; 10
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x14>
    12fa:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x15>
    12fe:	09 95       	icall
    1300:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_16>:
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
    1348:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    134c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    1350:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1354:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1358:	c9 01       	movw	r24, r18
    135a:	03 2e       	mov	r0, r19
    135c:	00 0c       	add	r0, r0
    135e:	aa 0b       	sbc	r26, r26
    1360:	bb 0b       	sbc	r27, r27
    1362:	dc 01       	movw	r26, r24
    1364:	99 27       	eor	r25, r25
    1366:	88 27       	eor	r24, r24
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	84 2b       	or	r24, r20
    136e:	95 2b       	or	r25, r21
    1370:	a6 2b       	or	r26, r22
    1372:	b7 2b       	or	r27, r23
    1374:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1378:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    137c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1380:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    1384:	b0 9b       	sbis	0x16, 0	; 22
    1386:	1b c0       	rjmp	.+54     	; 0x13be <__vector_16+0x98>
    1388:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    138c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1390:	c9 01       	movw	r24, r18
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	09 2e       	mov	r0, r25
    1396:	00 0c       	add	r0, r0
    1398:	aa 0b       	sbc	r26, r26
    139a:	bb 0b       	sbc	r27, r27
    139c:	dc 01       	movw	r26, r24
    139e:	99 27       	eor	r25, r25
    13a0:	88 27       	eor	r24, r24
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	84 2b       	or	r24, r20
    13a8:	95 2b       	or	r25, r21
    13aa:	a6 2b       	or	r26, r22
    13ac:	b7 2b       	or	r27, r23
    13ae:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    13b2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    13b6:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    13ba:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    13be:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x16>
    13c2:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x17>
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	39 f0       	breq	.+14     	; 0x13d8 <__vector_16+0xb2>
    13ca:	6b e0       	ldi	r22, 0x0B	; 11
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x16>
    13d2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x17>
    13d6:	09 95       	icall
    13d8:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <__vector_17>:
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	2f 93       	push	r18
    140a:	3f 93       	push	r19
    140c:	4f 93       	push	r20
    140e:	5f 93       	push	r21
    1410:	6f 93       	push	r22
    1412:	7f 93       	push	r23
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
    1420:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    1424:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    1428:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    142c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1430:	c9 01       	movw	r24, r18
    1432:	03 2e       	mov	r0, r19
    1434:	00 0c       	add	r0, r0
    1436:	aa 0b       	sbc	r26, r26
    1438:	bb 0b       	sbc	r27, r27
    143a:	dc 01       	movw	r26, r24
    143c:	99 27       	eor	r25, r25
    143e:	88 27       	eor	r24, r24
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	84 2b       	or	r24, r20
    1446:	95 2b       	or	r25, r21
    1448:	a6 2b       	or	r26, r22
    144a:	b7 2b       	or	r27, r23
    144c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1450:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    1454:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1458:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    145c:	b0 9b       	sbis	0x16, 0	; 22
    145e:	1b c0       	rjmp	.+54     	; 0x1496 <__vector_17+0x98>
    1460:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1464:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1468:	c9 01       	movw	r24, r18
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	09 2e       	mov	r0, r25
    146e:	00 0c       	add	r0, r0
    1470:	aa 0b       	sbc	r26, r26
    1472:	bb 0b       	sbc	r27, r27
    1474:	dc 01       	movw	r26, r24
    1476:	99 27       	eor	r25, r25
    1478:	88 27       	eor	r24, r24
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	84 2b       	or	r24, r20
    1480:	95 2b       	or	r25, r21
    1482:	a6 2b       	or	r26, r22
    1484:	b7 2b       	or	r27, r23
    1486:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    148a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    148e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1492:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    1496:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x18>
    149a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x19>
    149e:	30 97       	sbiw	r30, 0x00	; 0
    14a0:	39 f0       	breq	.+14     	; 0x14b0 <__vector_17+0xb2>
    14a2:	6c e0       	ldi	r22, 0x0C	; 12
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x18>
    14aa:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x19>
    14ae:	09 95       	icall
    14b0:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_18>:
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
    14f8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    14fc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    1500:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1504:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1508:	c9 01       	movw	r24, r18
    150a:	03 2e       	mov	r0, r19
    150c:	00 0c       	add	r0, r0
    150e:	aa 0b       	sbc	r26, r26
    1510:	bb 0b       	sbc	r27, r27
    1512:	dc 01       	movw	r26, r24
    1514:	99 27       	eor	r25, r25
    1516:	88 27       	eor	r24, r24
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	84 2b       	or	r24, r20
    151e:	95 2b       	or	r25, r21
    1520:	a6 2b       	or	r26, r22
    1522:	b7 2b       	or	r27, r23
    1524:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1528:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    152c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1530:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    1534:	b0 9b       	sbis	0x16, 0	; 22
    1536:	1b c0       	rjmp	.+54     	; 0x156e <__vector_18+0x98>
    1538:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    153c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1540:	c9 01       	movw	r24, r18
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	09 2e       	mov	r0, r25
    1546:	00 0c       	add	r0, r0
    1548:	aa 0b       	sbc	r26, r26
    154a:	bb 0b       	sbc	r27, r27
    154c:	dc 01       	movw	r26, r24
    154e:	99 27       	eor	r25, r25
    1550:	88 27       	eor	r24, r24
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	84 2b       	or	r24, r20
    1558:	95 2b       	or	r25, r21
    155a:	a6 2b       	or	r26, r22
    155c:	b7 2b       	or	r27, r23
    155e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1562:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    1566:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    156a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    156e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x1a>
    1572:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x1b>
    1576:	30 97       	sbiw	r30, 0x00	; 0
    1578:	39 f0       	breq	.+14     	; 0x1588 <__vector_18+0xb2>
    157a:	6d e0       	ldi	r22, 0x0D	; 13
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x1a>
    1582:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x1b>
    1586:	09 95       	icall
    1588:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_19>:
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	2f 93       	push	r18
    15ba:	3f 93       	push	r19
    15bc:	4f 93       	push	r20
    15be:	5f 93       	push	r21
    15c0:	6f 93       	push	r22
    15c2:	7f 93       	push	r23
    15c4:	8f 93       	push	r24
    15c6:	9f 93       	push	r25
    15c8:	af 93       	push	r26
    15ca:	bf 93       	push	r27
    15cc:	ef 93       	push	r30
    15ce:	ff 93       	push	r31
    15d0:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    15d4:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    15d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    15dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    15e0:	c9 01       	movw	r24, r18
    15e2:	03 2e       	mov	r0, r19
    15e4:	00 0c       	add	r0, r0
    15e6:	aa 0b       	sbc	r26, r26
    15e8:	bb 0b       	sbc	r27, r27
    15ea:	dc 01       	movw	r26, r24
    15ec:	99 27       	eor	r25, r25
    15ee:	88 27       	eor	r24, r24
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	84 2b       	or	r24, r20
    15f6:	95 2b       	or	r25, r21
    15f8:	a6 2b       	or	r26, r22
    15fa:	b7 2b       	or	r27, r23
    15fc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1600:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    1604:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1608:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    160c:	b0 9b       	sbis	0x16, 0	; 22
    160e:	1b c0       	rjmp	.+54     	; 0x1646 <__vector_19+0x98>
    1610:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1614:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1618:	c9 01       	movw	r24, r18
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	09 2e       	mov	r0, r25
    161e:	00 0c       	add	r0, r0
    1620:	aa 0b       	sbc	r26, r26
    1622:	bb 0b       	sbc	r27, r27
    1624:	dc 01       	movw	r26, r24
    1626:	99 27       	eor	r25, r25
    1628:	88 27       	eor	r24, r24
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	84 2b       	or	r24, r20
    1630:	95 2b       	or	r25, r21
    1632:	a6 2b       	or	r26, r22
    1634:	b7 2b       	or	r27, r23
    1636:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    163a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    163e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1642:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    1646:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x1c>
    164a:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1d>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	39 f0       	breq	.+14     	; 0x1660 <__vector_19+0xb2>
    1652:	6e e0       	ldi	r22, 0x0E	; 14
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x1c>
    165a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1d>
    165e:	09 95       	icall
    1660:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    1664:	ff 91       	pop	r31
    1666:	ef 91       	pop	r30
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_20>:
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	3f 93       	push	r19
    1694:	4f 93       	push	r20
    1696:	5f 93       	push	r21
    1698:	6f 93       	push	r22
    169a:	7f 93       	push	r23
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	af 93       	push	r26
    16a2:	bf 93       	push	r27
    16a4:	ef 93       	push	r30
    16a6:	ff 93       	push	r31
    16a8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    16ac:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    16b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    16b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    16b8:	c9 01       	movw	r24, r18
    16ba:	03 2e       	mov	r0, r19
    16bc:	00 0c       	add	r0, r0
    16be:	aa 0b       	sbc	r26, r26
    16c0:	bb 0b       	sbc	r27, r27
    16c2:	dc 01       	movw	r26, r24
    16c4:	99 27       	eor	r25, r25
    16c6:	88 27       	eor	r24, r24
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	84 2b       	or	r24, r20
    16ce:	95 2b       	or	r25, r21
    16d0:	a6 2b       	or	r26, r22
    16d2:	b7 2b       	or	r27, r23
    16d4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    16d8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    16dc:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    16e0:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    16e4:	b0 9b       	sbis	0x16, 0	; 22
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <__vector_20+0x98>
    16e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    16ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    16f0:	c9 01       	movw	r24, r18
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	09 2e       	mov	r0, r25
    16f6:	00 0c       	add	r0, r0
    16f8:	aa 0b       	sbc	r26, r26
    16fa:	bb 0b       	sbc	r27, r27
    16fc:	dc 01       	movw	r26, r24
    16fe:	99 27       	eor	r25, r25
    1700:	88 27       	eor	r24, r24
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	84 2b       	or	r24, r20
    1708:	95 2b       	or	r25, r21
    170a:	a6 2b       	or	r26, r22
    170c:	b7 2b       	or	r27, r23
    170e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1712:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    1716:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    171a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    171e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x1e>
    1722:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x1f>
    1726:	30 97       	sbiw	r30, 0x00	; 0
    1728:	39 f0       	breq	.+14     	; 0x1738 <__vector_20+0xb2>
    172a:	6f e0       	ldi	r22, 0x0F	; 15
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x1e>
    1732:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x1f>
    1736:	09 95       	icall
    1738:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <__vector_21>:
    175e:	1f 92       	push	r1
    1760:	0f 92       	push	r0
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	0f 92       	push	r0
    1766:	11 24       	eor	r1, r1
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
    1780:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    1784:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    1788:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    178c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1790:	c9 01       	movw	r24, r18
    1792:	03 2e       	mov	r0, r19
    1794:	00 0c       	add	r0, r0
    1796:	aa 0b       	sbc	r26, r26
    1798:	bb 0b       	sbc	r27, r27
    179a:	dc 01       	movw	r26, r24
    179c:	99 27       	eor	r25, r25
    179e:	88 27       	eor	r24, r24
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	84 2b       	or	r24, r20
    17a6:	95 2b       	or	r25, r21
    17a8:	a6 2b       	or	r26, r22
    17aa:	b7 2b       	or	r27, r23
    17ac:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    17b0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    17b4:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    17b8:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    17bc:	b0 9b       	sbis	0x16, 0	; 22
    17be:	1b c0       	rjmp	.+54     	; 0x17f6 <__vector_21+0x98>
    17c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    17c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    17c8:	c9 01       	movw	r24, r18
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	09 2e       	mov	r0, r25
    17ce:	00 0c       	add	r0, r0
    17d0:	aa 0b       	sbc	r26, r26
    17d2:	bb 0b       	sbc	r27, r27
    17d4:	dc 01       	movw	r26, r24
    17d6:	99 27       	eor	r25, r25
    17d8:	88 27       	eor	r24, r24
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	84 2b       	or	r24, r20
    17e0:	95 2b       	or	r25, r21
    17e2:	a6 2b       	or	r26, r22
    17e4:	b7 2b       	or	r27, r23
    17e6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    17ea:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    17ee:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    17f2:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    17f6:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x20>
    17fa:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x21>
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	39 f0       	breq	.+14     	; 0x1810 <__vector_21+0xb2>
    1802:	60 e1       	ldi	r22, 0x10	; 16
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x20>
    180a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x21>
    180e:	09 95       	icall
    1810:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	bf 91       	pop	r27
    181a:	af 91       	pop	r26
    181c:	9f 91       	pop	r25
    181e:	8f 91       	pop	r24
    1820:	7f 91       	pop	r23
    1822:	6f 91       	pop	r22
    1824:	5f 91       	pop	r21
    1826:	4f 91       	pop	r20
    1828:	3f 91       	pop	r19
    182a:	2f 91       	pop	r18
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	0f 90       	pop	r0
    1832:	1f 90       	pop	r1
    1834:	18 95       	reti

00001836 <__vector_22>:
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	4f 93       	push	r20
    1846:	5f 93       	push	r21
    1848:	6f 93       	push	r22
    184a:	7f 93       	push	r23
    184c:	8f 93       	push	r24
    184e:	9f 93       	push	r25
    1850:	af 93       	push	r26
    1852:	bf 93       	push	r27
    1854:	ef 93       	push	r30
    1856:	ff 93       	push	r31
    1858:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <overflows>
    185c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <overflows+0x1>
    1860:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1864:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1868:	c9 01       	movw	r24, r18
    186a:	03 2e       	mov	r0, r19
    186c:	00 0c       	add	r0, r0
    186e:	aa 0b       	sbc	r26, r26
    1870:	bb 0b       	sbc	r27, r27
    1872:	dc 01       	movw	r26, r24
    1874:	99 27       	eor	r25, r25
    1876:	88 27       	eor	r24, r24
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	84 2b       	or	r24, r20
    187e:	95 2b       	or	r25, r21
    1880:	a6 2b       	or	r26, r22
    1882:	b7 2b       	or	r27, r23
    1884:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    1888:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    188c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    1890:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    1894:	b0 9b       	sbis	0x16, 0	; 22
    1896:	1b c0       	rjmp	.+54     	; 0x18ce <__vector_22+0x98>
    1898:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    189c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    18a0:	c9 01       	movw	r24, r18
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	09 2e       	mov	r0, r25
    18a6:	00 0c       	add	r0, r0
    18a8:	aa 0b       	sbc	r26, r26
    18aa:	bb 0b       	sbc	r27, r27
    18ac:	dc 01       	movw	r26, r24
    18ae:	99 27       	eor	r25, r25
    18b0:	88 27       	eor	r24, r24
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	84 2b       	or	r24, r20
    18b8:	95 2b       	or	r25, r21
    18ba:	a6 2b       	or	r26, r22
    18bc:	b7 2b       	or	r27, r23
    18be:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timestamp>
    18c2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timestamp+0x1>
    18c6:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timestamp+0x2>
    18ca:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timestamp+0x3>
    18ce:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x22>
    18d2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x23>
    18d6:	30 97       	sbiw	r30, 0x00	; 0
    18d8:	39 f0       	breq	.+14     	; 0x18e8 <__vector_22+0xb2>
    18da:	61 e1       	ldi	r22, 0x11	; 17
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x22>
    18e2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x23>
    18e6:	09 95       	icall
    18e8:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	bf 91       	pop	r27
    18f2:	af 91       	pop	r26
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	7f 91       	pop	r23
    18fa:	6f 91       	pop	r22
    18fc:	5f 91       	pop	r21
    18fe:	4f 91       	pop	r20
    1900:	3f 91       	pop	r19
    1902:	2f 91       	pop	r18
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <__vector_9>:
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	2f 93       	push	r18
    191a:	3f 93       	push	r19
    191c:	4f 93       	push	r20
    191e:	5f 93       	push	r21
    1920:	6f 93       	push	r22
    1922:	7f 93       	push	r23
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
    192c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <overflows>
    1930:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <overflows+0x1>
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <overflows+0x1>
    193a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <overflows>
    193e:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <timerQ>
    1942:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <timerQ+0x1>
    1946:	30 97       	sbiw	r30, 0x00	; 0
    1948:	39 f0       	breq	.+14     	; 0x1958 <__vector_9+0x4a>
    194a:	42 81       	ldd	r20, Z+2	; 0x02
    194c:	53 81       	ldd	r21, Z+3	; 0x03
    194e:	64 81       	ldd	r22, Z+4	; 0x04
    1950:	75 81       	ldd	r23, Z+5	; 0x05
    1952:	86 17       	cp	r24, r22
    1954:	97 07       	cpc	r25, r23
    1956:	a1 f0       	breq	.+40     	; 0x1980 <__vector_9+0x72>
    1958:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    195c:	8d 7f       	andi	r24, 0xFD	; 253
    195e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	9f 91       	pop	r25
    1968:	8f 91       	pop	r24
    196a:	7f 91       	pop	r23
    196c:	6f 91       	pop	r22
    196e:	5f 91       	pop	r21
    1970:	4f 91       	pop	r20
    1972:	3f 91       	pop	r19
    1974:	2f 91       	pop	r18
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	0f 90       	pop	r0
    197c:	1f 90       	pop	r1
    197e:	18 95       	reti
    1980:	ca 01       	movw	r24, r20
    1982:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1986:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    198a:	42 1b       	sub	r20, r18
    198c:	53 0b       	sbc	r21, r19
    198e:	41 30       	cpi	r20, 0x01	; 1
    1990:	51 05       	cpc	r21, r1
    1992:	51 f0       	breq	.+20     	; 0x19a8 <__vector_9+0x9a>
    1994:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1998:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    199c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    19a0:	82 60       	ori	r24, 0x02	; 2
    19a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    19a6:	dd cf       	rjmp	.-70     	; 0x1962 <__vector_9+0x54>
    19a8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19ac:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	f0 cf       	rjmp	.-32     	; 0x1994 <__vector_9+0x86>

000019b4 <__vector_7>:
    19b4:	1f 92       	push	r1
    19b6:	0f 92       	push	r0
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	0f 92       	push	r0
    19bc:	11 24       	eor	r1, r1
    19be:	8f 92       	push	r8
    19c0:	9f 92       	push	r9
    19c2:	af 92       	push	r10
    19c4:	bf 92       	push	r11
    19c6:	cf 92       	push	r12
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	2f 93       	push	r18
    19d4:	3f 93       	push	r19
    19d6:	4f 93       	push	r20
    19d8:	5f 93       	push	r21
    19da:	6f 93       	push	r22
    19dc:	7f 93       	push	r23
    19de:	8f 93       	push	r24
    19e0:	9f 93       	push	r25
    19e2:	af 93       	push	r26
    19e4:	bf 93       	push	r27
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	ef 93       	push	r30
    19ec:	ff 93       	push	r31
    19ee:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <overflows>
    19f2:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <overflows+0x1>
    19f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19fe:	b0 99       	sbic	0x16, 0	; 22
    1a00:	98 c0       	rjmp	.+304    	; 0x1b32 <__vector_7+0x17e>
    1a02:	47 01       	movw	r8, r14
    1a04:	0f 2c       	mov	r0, r15
    1a06:	00 0c       	add	r0, r0
    1a08:	aa 08       	sbc	r10, r10
    1a0a:	bb 08       	sbc	r11, r11
    1a0c:	54 01       	movw	r10, r8
    1a0e:	99 24       	eor	r9, r9
    1a10:	88 24       	eor	r8, r8
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	88 2a       	or	r8, r24
    1a18:	99 2a       	or	r9, r25
    1a1a:	aa 2a       	or	r10, r26
    1a1c:	bb 2a       	or	r11, r27
    1a1e:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <timerQ>
    1a22:	d0 91 4b 01 	lds	r29, 0x014B	; 0x80014b <timerQ+0x1>
    1a26:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <msgQ>
    1a2a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <msgQ+0x1>
    1a2e:	20 97       	sbiw	r28, 0x00	; 0
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <__vector_7+0x80>
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <__vector_7+0xfe>
    1a34:	4a 81       	ldd	r20, Y+2	; 0x02
    1a36:	5b 81       	ldd	r21, Y+3	; 0x03
    1a38:	6c 81       	ldd	r22, Y+4	; 0x04
    1a3a:	7d 81       	ldd	r23, Y+5	; 0x05
    1a3c:	8a 01       	movw	r16, r20
    1a3e:	9b 01       	movw	r18, r22
    1a40:	08 19       	sub	r16, r8
    1a42:	19 09       	sbc	r17, r9
    1a44:	2a 09       	sbc	r18, r10
    1a46:	3b 09       	sbc	r19, r11
    1a48:	10 16       	cp	r1, r16
    1a4a:	11 06       	cpc	r1, r17
    1a4c:	12 06       	cpc	r1, r18
    1a4e:	13 06       	cpc	r1, r19
    1a50:	0c f4       	brge	.+2      	; 0x1a54 <__vector_7+0xa0>
    1a52:	40 c0       	rjmp	.+128    	; 0x1ad4 <__vector_7+0x120>
    1a54:	d8 80       	ld	r13, Y
    1a56:	c9 80       	ldd	r12, Y+1	; 0x01
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	b9 f1       	breq	.+110    	; 0x1aca <__vector_7+0x116>
    1a5c:	0e 81       	ldd	r16, Y+6	; 0x06
    1a5e:	1f 81       	ldd	r17, Y+7	; 0x07
    1a60:	28 85       	ldd	r18, Y+8	; 0x08
    1a62:	39 85       	ldd	r19, Y+9	; 0x09
    1a64:	fc 01       	movw	r30, r24
    1a66:	46 81       	ldd	r20, Z+6	; 0x06
    1a68:	57 81       	ldd	r21, Z+7	; 0x07
    1a6a:	60 85       	ldd	r22, Z+8	; 0x08
    1a6c:	71 85       	ldd	r23, Z+9	; 0x09
    1a6e:	04 17       	cp	r16, r20
    1a70:	15 07       	cpc	r17, r21
    1a72:	26 07       	cpc	r18, r22
    1a74:	37 07       	cpc	r19, r23
    1a76:	4c f1       	brlt	.+82     	; 0x1aca <__vector_7+0x116>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	0a c0       	rjmp	.+20     	; 0x1a90 <__vector_7+0xdc>
    1a7c:	46 81       	ldd	r20, Z+6	; 0x06
    1a7e:	57 81       	ldd	r21, Z+7	; 0x07
    1a80:	60 85       	ldd	r22, Z+8	; 0x08
    1a82:	71 85       	ldd	r23, Z+9	; 0x09
    1a84:	04 17       	cp	r16, r20
    1a86:	15 07       	cpc	r17, r21
    1a88:	26 07       	cpc	r18, r22
    1a8a:	37 07       	cpc	r19, r23
    1a8c:	dc f0       	brlt	.+54     	; 0x1ac4 <__vector_7+0x110>
    1a8e:	df 01       	movw	r26, r30
    1a90:	ed 91       	ld	r30, X+
    1a92:	fc 91       	ld	r31, X
    1a94:	11 97       	sbiw	r26, 0x01	; 1
    1a96:	30 97       	sbiw	r30, 0x00	; 0
    1a98:	89 f7       	brne	.-30     	; 0x1a7c <__vector_7+0xc8>
    1a9a:	19 82       	std	Y+1, r1	; 0x01
    1a9c:	18 82       	st	Y, r1
    1a9e:	cd 93       	st	X+, r28
    1aa0:	dc 93       	st	X, r29
    1aa2:	38 2f       	mov	r19, r24
    1aa4:	29 2f       	mov	r18, r25
    1aa6:	cd 2d       	mov	r28, r13
    1aa8:	dc 2d       	mov	r29, r12
    1aaa:	83 2f       	mov	r24, r19
    1aac:	92 2f       	mov	r25, r18
    1aae:	20 97       	sbiw	r28, 0x00	; 0
    1ab0:	09 f6       	brne	.-126    	; 0x1a34 <__vector_7+0x80>
    1ab2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <timerQ+0x1>
    1ab6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <timerQ>
    1aba:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <msgQ+0x1>
    1abe:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <msgQ>
    1ac2:	13 c0       	rjmp	.+38     	; 0x1aea <__vector_7+0x136>
    1ac4:	f9 83       	std	Y+1, r31	; 0x01
    1ac6:	e8 83       	st	Y, r30
    1ac8:	ea cf       	rjmp	.-44     	; 0x1a9e <__vector_7+0xea>
    1aca:	99 83       	std	Y+1, r25	; 0x01
    1acc:	88 83       	st	Y, r24
    1ace:	3c 2f       	mov	r19, r28
    1ad0:	2d 2f       	mov	r18, r29
    1ad2:	e9 cf       	rjmp	.-46     	; 0x1aa6 <__vector_7+0xf2>
    1ad4:	d0 93 4b 01 	sts	0x014B, r29	; 0x80014b <timerQ+0x1>
    1ad8:	c0 93 4a 01 	sts	0x014A, r28	; 0x80014a <timerQ>
    1adc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <msgQ+0x1>
    1ae0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <msgQ>
    1ae4:	e6 16       	cp	r14, r22
    1ae6:	f7 06       	cpc	r15, r23
    1ae8:	d9 f1       	breq	.+118    	; 0x1b60 <__vector_7+0x1ac>
    1aea:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1aee:	8d 7f       	andi	r24, 0xFD	; 253
    1af0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1af4:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    1af8:	ff 91       	pop	r31
    1afa:	ef 91       	pop	r30
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	df 90       	pop	r13
    1b1e:	cf 90       	pop	r12
    1b20:	bf 90       	pop	r11
    1b22:	af 90       	pop	r10
    1b24:	9f 90       	pop	r9
    1b26:	8f 90       	pop	r8
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti
    1b32:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1b36:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b3a:	47 01       	movw	r8, r14
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	88 1a       	sub	r8, r24
    1b40:	98 0a       	sbc	r9, r24
    1b42:	09 2c       	mov	r0, r9
    1b44:	00 0c       	add	r0, r0
    1b46:	aa 08       	sbc	r10, r10
    1b48:	bb 08       	sbc	r11, r11
    1b4a:	d4 01       	movw	r26, r8
    1b4c:	99 27       	eor	r25, r25
    1b4e:	88 27       	eor	r24, r24
    1b50:	49 01       	movw	r8, r18
    1b52:	a1 2c       	mov	r10, r1
    1b54:	b1 2c       	mov	r11, r1
    1b56:	88 2a       	or	r8, r24
    1b58:	99 2a       	or	r9, r25
    1b5a:	aa 2a       	or	r10, r26
    1b5c:	bb 2a       	or	r11, r27
    1b5e:	5f cf       	rjmp	.-322    	; 0x1a1e <__vector_7+0x6a>
    1b60:	ca 01       	movw	r24, r20
    1b62:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1b66:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b6a:	42 1b       	sub	r20, r18
    1b6c:	53 0b       	sbc	r21, r19
    1b6e:	41 30       	cpi	r20, 0x01	; 1
    1b70:	51 05       	cpc	r21, r1
    1b72:	51 f0       	breq	.+20     	; 0x1b88 <__vector_7+0x1d4>
    1b74:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b78:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b7c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b80:	82 60       	ori	r24, 0x02	; 2
    1b82:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b86:	b6 cf       	rjmp	.-148    	; 0x1af4 <__vector_7+0x140>
    1b88:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1b8c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	f0 cf       	rjmp	.-32     	; 0x1b74 <__vector_7+0x1c0>

00001b94 <async>:
    1b94:	3f 92       	push	r3
    1b96:	4f 92       	push	r4
    1b98:	5f 92       	push	r5
    1b9a:	6f 92       	push	r6
    1b9c:	7f 92       	push	r7
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	ef b7       	in	r30, 0x3f	; 63
    1bb8:	e0 78       	andi	r30, 0x80	; 128
    1bba:	3e 2e       	mov	r3, r30
    1bbc:	f8 94       	cli
    1bbe:	c0 91 3a 01 	lds	r28, 0x013A	; 0x80013a <msgPool>
    1bc2:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <msgPool+0x1>
    1bc6:	20 97       	sbiw	r28, 0x00	; 0
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <async+0x38>
    1bca:	52 c1       	rjmp	.+676    	; 0x1e70 <async+0x2dc>
    1bcc:	e8 81       	ld	r30, Y
    1bce:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd0:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <msgPool+0x1>
    1bd4:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <msgPool>
    1bd8:	1b 87       	std	Y+11, r17	; 0x0b
    1bda:	0a 87       	std	Y+10, r16	; 0x0a
    1bdc:	fd 86       	std	Y+13, r15	; 0x0d
    1bde:	ec 86       	std	Y+12, r14	; 0x0c
    1be0:	df 86       	std	Y+15, r13	; 0x0f
    1be2:	ce 86       	std	Y+14, r12	; 0x0e
    1be4:	33 20       	and	r3, r3
    1be6:	09 f4       	brne	.+2      	; 0x1bea <async+0x56>
    1be8:	6f c0       	rjmp	.+222    	; 0x1cc8 <async+0x134>
    1bea:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    1bee:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    1bf2:	02 80       	ldd	r0, Z+2	; 0x02
    1bf4:	f3 81       	ldd	r31, Z+3	; 0x03
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	c2 80       	ldd	r12, Z+2	; 0x02
    1bfa:	d3 80       	ldd	r13, Z+3	; 0x03
    1bfc:	e4 80       	ldd	r14, Z+4	; 0x04
    1bfe:	f5 80       	ldd	r15, Z+5	; 0x05
    1c00:	c6 0e       	add	r12, r22
    1c02:	d7 1e       	adc	r13, r23
    1c04:	e8 1e       	adc	r14, r24
    1c06:	f9 1e       	adc	r15, r25
    1c08:	ca 82       	std	Y+2, r12	; 0x02
    1c0a:	db 82       	std	Y+3, r13	; 0x03
    1c0c:	ec 82       	std	Y+4, r14	; 0x04
    1c0e:	fd 82       	std	Y+5, r15	; 0x05
    1c10:	12 16       	cp	r1, r18
    1c12:	13 06       	cpc	r1, r19
    1c14:	14 06       	cpc	r1, r20
    1c16:	15 06       	cpc	r1, r21
    1c18:	0c f0       	brlt	.+2      	; 0x1c1c <async+0x88>
    1c1a:	f8 c0       	rjmp	.+496    	; 0x1e0c <async+0x278>
    1c1c:	da 01       	movw	r26, r20
    1c1e:	c9 01       	movw	r24, r18
    1c20:	8c 01       	movw	r16, r24
    1c22:	9d 01       	movw	r18, r26
    1c24:	0c 0d       	add	r16, r12
    1c26:	1d 1d       	adc	r17, r13
    1c28:	2e 1d       	adc	r18, r14
    1c2a:	3f 1d       	adc	r19, r15
    1c2c:	0e 83       	std	Y+6, r16	; 0x06
    1c2e:	1f 83       	std	Y+7, r17	; 0x07
    1c30:	28 87       	std	Y+8, r18	; 0x08
    1c32:	39 87       	std	Y+9, r19	; 0x09
    1c34:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <overflows>
    1c38:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <overflows+0x1>
    1c3c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1c40:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1c44:	b0 99       	sbic	0x16, 0	; 22
    1c46:	49 c0       	rjmp	.+146    	; 0x1cda <async+0x146>
    1c48:	2c 01       	movw	r4, r24
    1c4a:	09 2e       	mov	r0, r25
    1c4c:	00 0c       	add	r0, r0
    1c4e:	66 08       	sbc	r6, r6
    1c50:	77 08       	sbc	r7, r7
    1c52:	52 01       	movw	r10, r4
    1c54:	99 24       	eor	r9, r9
    1c56:	88 24       	eor	r8, r8
    1c58:	2b 01       	movw	r4, r22
    1c5a:	61 2c       	mov	r6, r1
    1c5c:	71 2c       	mov	r7, r1
    1c5e:	48 28       	or	r4, r8
    1c60:	59 28       	or	r5, r9
    1c62:	6a 28       	or	r6, r10
    1c64:	7b 28       	or	r7, r11
    1c66:	b7 01       	movw	r22, r14
    1c68:	a6 01       	movw	r20, r12
    1c6a:	44 19       	sub	r20, r4
    1c6c:	55 09       	sbc	r21, r5
    1c6e:	66 09       	sbc	r22, r6
    1c70:	77 09       	sbc	r23, r7
    1c72:	14 16       	cp	r1, r20
    1c74:	15 06       	cpc	r1, r21
    1c76:	16 06       	cpc	r1, r22
    1c78:	17 06       	cpc	r1, r23
    1c7a:	0c f0       	brlt	.+2      	; 0x1c7e <async+0xea>
    1c7c:	68 c0       	rjmp	.+208    	; 0x1d4e <async+0x1ba>
    1c7e:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <timerQ>
    1c82:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <timerQ+0x1>
    1c86:	10 97       	sbiw	r26, 0x00	; 0
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <async+0xf8>
    1c8a:	dc c0       	rjmp	.+440    	; 0x1e44 <async+0x2b0>
    1c8c:	12 96       	adiw	r26, 0x02	; 2
    1c8e:	0d 91       	ld	r16, X+
    1c90:	1d 91       	ld	r17, X+
    1c92:	2d 91       	ld	r18, X+
    1c94:	3c 91       	ld	r19, X
    1c96:	15 97       	sbiw	r26, 0x05	; 5
    1c98:	c0 16       	cp	r12, r16
    1c9a:	d1 06       	cpc	r13, r17
    1c9c:	e2 06       	cpc	r14, r18
    1c9e:	f3 06       	cpc	r15, r19
    1ca0:	5c f4       	brge	.+22     	; 0x1cb8 <async+0x124>
    1ca2:	d0 c0       	rjmp	.+416    	; 0x1e44 <async+0x2b0>
    1ca4:	42 81       	ldd	r20, Z+2	; 0x02
    1ca6:	53 81       	ldd	r21, Z+3	; 0x03
    1ca8:	64 81       	ldd	r22, Z+4	; 0x04
    1caa:	75 81       	ldd	r23, Z+5	; 0x05
    1cac:	c4 16       	cp	r12, r20
    1cae:	d5 06       	cpc	r13, r21
    1cb0:	e6 06       	cpc	r14, r22
    1cb2:	f7 06       	cpc	r15, r23
    1cb4:	4c f1       	brlt	.+82     	; 0x1d08 <async+0x174>
    1cb6:	df 01       	movw	r26, r30
    1cb8:	ed 91       	ld	r30, X+
    1cba:	fc 91       	ld	r31, X
    1cbc:	11 97       	sbiw	r26, 0x01	; 1
    1cbe:	30 97       	sbiw	r30, 0x00	; 0
    1cc0:	89 f7       	brne	.-30     	; 0x1ca4 <async+0x110>
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	18 82       	st	Y, r1
    1cc6:	22 c0       	rjmp	.+68     	; 0x1d0c <async+0x178>
    1cc8:	c0 90 46 01 	lds	r12, 0x0146	; 0x800146 <timestamp>
    1ccc:	d0 90 47 01 	lds	r13, 0x0147	; 0x800147 <timestamp+0x1>
    1cd0:	e0 90 48 01 	lds	r14, 0x0148	; 0x800148 <timestamp+0x2>
    1cd4:	f0 90 49 01 	lds	r15, 0x0149	; 0x800149 <timestamp+0x3>
    1cd8:	93 cf       	rjmp	.-218    	; 0x1c00 <async+0x6c>
    1cda:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1cde:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1ce2:	2c 01       	movw	r4, r24
    1ce4:	4f ef       	ldi	r20, 0xFF	; 255
    1ce6:	44 1a       	sub	r4, r20
    1ce8:	54 0a       	sbc	r5, r20
    1cea:	05 2c       	mov	r0, r5
    1cec:	00 0c       	add	r0, r0
    1cee:	66 08       	sbc	r6, r6
    1cf0:	77 08       	sbc	r7, r7
    1cf2:	b2 01       	movw	r22, r4
    1cf4:	55 27       	eor	r21, r21
    1cf6:	44 27       	eor	r20, r20
    1cf8:	2f 01       	movw	r4, r30
    1cfa:	61 2c       	mov	r6, r1
    1cfc:	71 2c       	mov	r7, r1
    1cfe:	44 2a       	or	r4, r20
    1d00:	55 2a       	or	r5, r21
    1d02:	66 2a       	or	r6, r22
    1d04:	77 2a       	or	r7, r23
    1d06:	af cf       	rjmp	.-162    	; 0x1c66 <async+0xd2>
    1d08:	f9 83       	std	Y+1, r31	; 0x01
    1d0a:	e8 83       	st	Y, r30
    1d0c:	cd 93       	st	X+, r28
    1d0e:	dc 93       	st	X, r29
    1d10:	82 17       	cp	r24, r18
    1d12:	93 07       	cpc	r25, r19
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <async+0x184>
    1d16:	7f c0       	rjmp	.+254    	; 0x1e16 <async+0x282>
    1d18:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d1c:	8d 7f       	andi	r24, 0xFD	; 253
    1d1e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d22:	33 20       	and	r3, r3
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <async+0x194>
    1d26:	78 94       	sei
    1d28:	ce 01       	movw	r24, r28
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	df 90       	pop	r13
    1d38:	cf 90       	pop	r12
    1d3a:	bf 90       	pop	r11
    1d3c:	af 90       	pop	r10
    1d3e:	9f 90       	pop	r9
    1d40:	8f 90       	pop	r8
    1d42:	7f 90       	pop	r7
    1d44:	6f 90       	pop	r6
    1d46:	5f 90       	pop	r5
    1d48:	4f 90       	pop	r4
    1d4a:	3f 90       	pop	r3
    1d4c:	08 95       	ret
    1d4e:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <msgQ>
    1d52:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <msgQ+0x1>
    1d56:	10 97       	sbiw	r26, 0x00	; 0
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <async+0x1c8>
    1d5a:	83 c0       	rjmp	.+262    	; 0x1e62 <async+0x2ce>
    1d5c:	16 96       	adiw	r26, 0x06	; 6
    1d5e:	cd 90       	ld	r12, X+
    1d60:	dd 90       	ld	r13, X+
    1d62:	ed 90       	ld	r14, X+
    1d64:	fc 90       	ld	r15, X
    1d66:	19 97       	sbiw	r26, 0x09	; 9
    1d68:	0c 15       	cp	r16, r12
    1d6a:	1d 05       	cpc	r17, r13
    1d6c:	2e 05       	cpc	r18, r14
    1d6e:	3f 05       	cpc	r19, r15
    1d70:	64 f4       	brge	.+24     	; 0x1d8a <async+0x1f6>
    1d72:	77 c0       	rjmp	.+238    	; 0x1e62 <async+0x2ce>
    1d74:	c6 80       	ldd	r12, Z+6	; 0x06
    1d76:	d7 80       	ldd	r13, Z+7	; 0x07
    1d78:	e0 84       	ldd	r14, Z+8	; 0x08
    1d7a:	f1 84       	ldd	r15, Z+9	; 0x09
    1d7c:	0c 15       	cp	r16, r12
    1d7e:	1d 05       	cpc	r17, r13
    1d80:	2e 05       	cpc	r18, r14
    1d82:	3f 05       	cpc	r19, r15
    1d84:	0c f4       	brge	.+2      	; 0x1d88 <async+0x1f4>
    1d86:	5b c0       	rjmp	.+182    	; 0x1e3e <async+0x2aa>
    1d88:	df 01       	movw	r26, r30
    1d8a:	ed 91       	ld	r30, X+
    1d8c:	fc 91       	ld	r31, X
    1d8e:	11 97       	sbiw	r26, 0x01	; 1
    1d90:	30 97       	sbiw	r30, 0x00	; 0
    1d92:	81 f7       	brne	.-32     	; 0x1d74 <async+0x1e0>
    1d94:	19 82       	std	Y+1, r1	; 0x01
    1d96:	18 82       	st	Y, r1
    1d98:	cd 93       	st	X+, r28
    1d9a:	dc 93       	st	X, r29
    1d9c:	33 20       	and	r3, r3
    1d9e:	21 f2       	breq	.-120    	; 0x1d28 <async+0x194>
    1da0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
    1da4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	09 f4       	brne	.+2      	; 0x1dae <async+0x21a>
    1dac:	bc cf       	rjmp	.-136    	; 0x1d26 <async+0x192>
    1dae:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <activeStack>
    1db2:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <activeStack+0x1>
    1db6:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <msgQ>
    1dba:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <msgQ+0x1>
    1dbe:	02 81       	ldd	r16, Z+2	; 0x02
    1dc0:	13 81       	ldd	r17, Z+3	; 0x03
    1dc2:	d9 01       	movw	r26, r18
    1dc4:	16 96       	adiw	r26, 0x06	; 6
    1dc6:	4d 91       	ld	r20, X+
    1dc8:	5d 91       	ld	r21, X+
    1dca:	6d 91       	ld	r22, X+
    1dcc:	7c 91       	ld	r23, X
    1dce:	19 97       	sbiw	r26, 0x09	; 9
    1dd0:	d8 01       	movw	r26, r16
    1dd2:	16 96       	adiw	r26, 0x06	; 6
    1dd4:	0d 91       	ld	r16, X+
    1dd6:	1d 91       	ld	r17, X+
    1dd8:	2d 91       	ld	r18, X+
    1dda:	3c 91       	ld	r19, X
    1ddc:	19 97       	sbiw	r26, 0x09	; 9
    1dde:	40 1b       	sub	r20, r16
    1de0:	51 0b       	sbc	r21, r17
    1de2:	62 0b       	sbc	r22, r18
    1de4:	73 0b       	sbc	r23, r19
    1de6:	77 ff       	sbrs	r23, 7
    1de8:	9e cf       	rjmp	.-196    	; 0x1d26 <async+0x192>
    1dea:	dc 01       	movw	r26, r24
    1dec:	2d 91       	ld	r18, X+
    1dee:	3c 91       	ld	r19, X
    1df0:	11 97       	sbiw	r26, 0x01	; 1
    1df2:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <threadPool+0x1>
    1df6:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <threadPool>
    1dfa:	ed 93       	st	X+, r30
    1dfc:	fc 93       	st	X, r31
    1dfe:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <activeStack+0x1>
    1e02:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <activeStack>
    1e06:	0e 94 84 04 	call	0x908	; 0x908 <dispatch>
    1e0a:	8d cf       	rjmp	.-230    	; 0x1d26 <async+0x192>
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	9f ef       	ldi	r25, 0xFF	; 255
    1e10:	af ef       	ldi	r26, 0xFF	; 255
    1e12:	bf e7       	ldi	r27, 0x7F	; 127
    1e14:	05 cf       	rjmp	.-502    	; 0x1c20 <async+0x8c>
    1e16:	c8 01       	movw	r24, r16
    1e18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1e1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1e20:	04 1b       	sub	r16, r20
    1e22:	15 0b       	sbc	r17, r21
    1e24:	01 30       	cpi	r16, 0x01	; 1
    1e26:	11 05       	cpc	r17, r1
    1e28:	b1 f0       	breq	.+44     	; 0x1e56 <async+0x2c2>
    1e2a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e2e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e32:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e36:	82 60       	ori	r24, 0x02	; 2
    1e38:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e3c:	72 cf       	rjmp	.-284    	; 0x1d22 <async+0x18e>
    1e3e:	f9 83       	std	Y+1, r31	; 0x01
    1e40:	e8 83       	st	Y, r30
    1e42:	aa cf       	rjmp	.-172    	; 0x1d98 <async+0x204>
    1e44:	b9 83       	std	Y+1, r27	; 0x01
    1e46:	a8 83       	st	Y, r26
    1e48:	d0 93 4b 01 	sts	0x014B, r29	; 0x80014b <timerQ+0x1>
    1e4c:	c0 93 4a 01 	sts	0x014A, r28	; 0x80014a <timerQ>
    1e50:	97 01       	movw	r18, r14
    1e52:	86 01       	movw	r16, r12
    1e54:	5d cf       	rjmp	.-326    	; 0x1d10 <async+0x17c>
    1e56:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1e5a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	e4 cf       	rjmp	.-56     	; 0x1e2a <async+0x296>
    1e62:	b9 83       	std	Y+1, r27	; 0x01
    1e64:	a8 83       	st	Y, r26
    1e66:	d0 93 4d 01 	sts	0x014D, r29	; 0x80014d <msgQ+0x1>
    1e6a:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <msgQ>
    1e6e:	96 cf       	rjmp	.-212    	; 0x1d9c <async+0x208>
    1e70:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dequeue.part.0>

00001e74 <sync>:
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	ec 01       	movw	r28, r24
    1e86:	7b 01       	movw	r14, r22
    1e88:	6a 01       	movw	r12, r20
    1e8a:	1f b7       	in	r17, 0x3f	; 63
    1e8c:	10 78       	andi	r17, 0x80	; 128
    1e8e:	f8 94       	cli
    1e90:	a8 81       	ld	r26, Y
    1e92:	b9 81       	ldd	r27, Y+1	; 0x01
    1e94:	10 97       	sbiw	r26, 0x00	; 0
    1e96:	19 f4       	brne	.+6      	; 0x1e9e <sync+0x2a>
    1e98:	62 c0       	rjmp	.+196    	; 0x1f5e <sync+0xea>
    1e9a:	a0 81       	ld	r26, Z
    1e9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e9e:	14 96       	adiw	r26, 0x04	; 4
    1ea0:	ed 91       	ld	r30, X+
    1ea2:	fc 91       	ld	r31, X
    1ea4:	15 97       	sbiw	r26, 0x05	; 5
    1ea6:	30 97       	sbiw	r30, 0x00	; 0
    1ea8:	c1 f7       	brne	.-16     	; 0x1e9a <sync+0x26>
    1eaa:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <current>
    1eae:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <current+0x1>
    1eb2:	2a 17       	cp	r18, r26
    1eb4:	3b 07       	cpc	r19, r27
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <sync+0x46>
    1eb8:	4c c0       	rjmp	.+152    	; 0x1f52 <sync+0xde>
    1eba:	11 23       	and	r17, r17
    1ebc:	a1 f1       	breq	.+104    	; 0x1f26 <sync+0xb2>
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	19 f0       	breq	.+6      	; 0x1ecc <sync+0x58>
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	15 82       	std	Z+5, r1	; 0x05
    1eca:	14 82       	std	Z+4, r1	; 0x04
    1ecc:	3b 83       	std	Y+3, r19	; 0x03
    1ece:	2a 83       	std	Y+2, r18	; 0x02
    1ed0:	f9 01       	movw	r30, r18
    1ed2:	d5 83       	std	Z+5, r29	; 0x05
    1ed4:	c4 83       	std	Z+4, r28	; 0x04
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 84 04 	call	0x908	; 0x908 <dispatch>
    1edc:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    1ee0:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	89 2b       	or	r24, r25
    1eea:	09 f4       	brne	.+2      	; 0x1eee <sync+0x7a>
    1eec:	41 c0       	rjmp	.+130    	; 0x1f70 <sync+0xfc>
    1eee:	f9 83       	std	Y+1, r31	; 0x01
    1ef0:	e8 83       	st	Y, r30
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <sync+0x88>
    1efa:	78 94       	sei
    1efc:	b6 01       	movw	r22, r12
    1efe:	ce 01       	movw	r24, r28
    1f00:	f7 01       	movw	r30, r14
    1f02:	09 95       	icall
    1f04:	f8 2e       	mov	r15, r24
    1f06:	09 2f       	mov	r16, r25
    1f08:	8f b7       	in	r24, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	19 82       	std	Y+1, r1	; 0x01
    1f0e:	18 82       	st	Y, r1
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	91 05       	cpc	r25, r1
    1f18:	a0 f4       	brcc	.+40     	; 0x1f42 <sync+0xce>
    1f1a:	11 23       	and	r17, r17
    1f1c:	79 f0       	breq	.+30     	; 0x1f3c <sync+0xc8>
    1f1e:	78 94       	sei
    1f20:	8f 2d       	mov	r24, r15
    1f22:	90 2f       	mov	r25, r16
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <sync+0xb6>
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	9f ef       	ldi	r25, 0xFF	; 255
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	08 95       	ret
    1f3c:	8f 2d       	mov	r24, r15
    1f3e:	90 2f       	mov	r25, r16
    1f40:	f4 cf       	rjmp	.-24     	; 0x1f2a <sync+0xb6>
    1f42:	1b 82       	std	Y+3, r1	; 0x03
    1f44:	1a 82       	std	Y+2, r1	; 0x02
    1f46:	fc 01       	movw	r30, r24
    1f48:	15 82       	std	Z+5, r1	; 0x05
    1f4a:	14 82       	std	Z+4, r1	; 0x04
    1f4c:	0e 94 84 04 	call	0x908	; 0x908 <dispatch>
    1f50:	e4 cf       	rjmp	.-56     	; 0x1f1a <sync+0xa6>
    1f52:	11 23       	and	r17, r17
    1f54:	41 f3       	breq	.-48     	; 0x1f26 <sync+0xb2>
    1f56:	78 94       	sei
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	9f ef       	ldi	r25, 0xFF	; 255
    1f5c:	e6 cf       	rjmp	.-52     	; 0x1f2a <sync+0xb6>
    1f5e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current>
    1f62:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current+0x1>
    1f66:	99 83       	std	Y+1, r25	; 0x01
    1f68:	88 83       	st	Y, r24
    1f6a:	11 23       	and	r17, r17
    1f6c:	39 f2       	breq	.-114    	; 0x1efc <sync+0x88>
    1f6e:	c1 cf       	rjmp	.-126    	; 0x1ef2 <sync+0x7e>
    1f70:	78 94       	sei
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	d9 cf       	rjmp	.-78     	; 0x1f2a <sync+0xb6>

00001f78 <run>:
    1f78:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <msgQ>
    1f7c:	d0 91 4d 01 	lds	r29, 0x014D	; 0x80014d <msgQ+0x1>
    1f80:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    1f84:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    1f88:	20 97       	sbiw	r28, 0x00	; 0
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <run+0x16>
    1f8c:	6e c0       	rjmp	.+220    	; 0x206a <run+0xf2>
    1f8e:	88 81       	ld	r24, Y
    1f90:	99 81       	ldd	r25, Y+1	; 0x01
    1f92:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <msgQ+0x1>
    1f96:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <msgQ>
    1f9a:	d3 83       	std	Z+3, r29	; 0x03
    1f9c:	c2 83       	std	Z+2, r28	; 0x02
    1f9e:	78 94       	sei
    1fa0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fa2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fa4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1faa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fac:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sync>
    1fb0:	8f b7       	in	r24, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msgPool>
    1fb8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msgPool+0x1>
    1fbc:	99 83       	std	Y+1, r25	; 0x01
    1fbe:	88 83       	st	Y, r24
    1fc0:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <msgPool+0x1>
    1fc4:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <msgPool>
    1fc8:	e0 90 36 01 	lds	r14, 0x0136	; 0x800136 <activeStack>
    1fcc:	f0 90 37 01 	lds	r15, 0x0137	; 0x800137 <activeStack+0x1>
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	a0 81       	ld	r26, Z
    1fd4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fd6:	12 96       	adiw	r26, 0x02	; 2
    1fd8:	8d 91       	ld	r24, X+
    1fda:	9c 91       	ld	r25, X
    1fdc:	13 97       	sbiw	r26, 0x03	; 3
    1fde:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <msgQ>
    1fe2:	d0 91 4d 01 	lds	r29, 0x014D	; 0x80014d <msgQ+0x1>
    1fe6:	20 97       	sbiw	r28, 0x00	; 0
    1fe8:	a9 f0       	breq	.+42     	; 0x2014 <run+0x9c>
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	49 f2       	breq	.-110    	; 0x1f80 <run+0x8>
    1fee:	4e 81       	ldd	r20, Y+6	; 0x06
    1ff0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ff2:	68 85       	ldd	r22, Y+8	; 0x08
    1ff4:	79 85       	ldd	r23, Y+9	; 0x09
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	06 81       	ldd	r16, Z+6	; 0x06
    1ffa:	17 81       	ldd	r17, Z+7	; 0x07
    1ffc:	20 85       	ldd	r18, Z+8	; 0x08
    1ffe:	31 85       	ldd	r19, Z+9	; 0x09
    2000:	40 1b       	sub	r20, r16
    2002:	51 0b       	sbc	r21, r17
    2004:	62 0b       	sbc	r22, r18
    2006:	73 0b       	sbc	r23, r19
    2008:	14 16       	cp	r1, r20
    200a:	15 06       	cpc	r1, r21
    200c:	16 06       	cpc	r1, r22
    200e:	17 06       	cpc	r1, r23
    2010:	0c f0       	brlt	.+2      	; 0x2014 <run+0x9c>
    2012:	b6 cf       	rjmp	.-148    	; 0x1f80 <run+0x8>
    2014:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <activeStack+0x1>
    2018:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <activeStack>
    201c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
    2020:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
    2024:	f7 01       	movw	r30, r14
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	f0 92 39 01 	sts	0x0139, r15	; 0x800139 <threadPool+0x1>
    202e:	e0 92 38 01 	sts	0x0138, r14	; 0x800138 <threadPool>
    2032:	14 96       	adiw	r26, 0x04	; 4
    2034:	ed 91       	ld	r30, X+
    2036:	fc 91       	ld	r31, X
    2038:	15 97       	sbiw	r26, 0x05	; 5
    203a:	30 97       	sbiw	r30, 0x00	; 0
    203c:	41 f0       	breq	.+16     	; 0x204e <run+0xd6>
    203e:	a0 81       	ld	r26, Z
    2040:	b1 81       	ldd	r27, Z+1	; 0x01
    2042:	14 96       	adiw	r26, 0x04	; 4
    2044:	ed 91       	ld	r30, X+
    2046:	fc 91       	ld	r31, X
    2048:	15 97       	sbiw	r26, 0x05	; 5
    204a:	30 97       	sbiw	r30, 0x00	; 0
    204c:	c1 f7       	brne	.-16     	; 0x203e <run+0xc6>
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 84 04 	call	0x908	; 0x908 <dispatch>
    2054:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <msgQ>
    2058:	d0 91 4d 01 	lds	r29, 0x014D	; 0x80014d <msgQ+0x1>
    205c:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    2060:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    2064:	20 97       	sbiw	r28, 0x00	; 0
    2066:	09 f0       	breq	.+2      	; 0x206a <run+0xf2>
    2068:	92 cf       	rjmp	.-220    	; 0x1f8e <run+0x16>
    206a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dequeue.part.0>

0000206e <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    206e:	42 31       	cpi	r20, 0x12	; 18
    2070:	b8 f4       	brcc	.+46     	; 0x20a0 <install+0x32>
        char status;
        DISABLE(status);
    2072:	2f b7       	in	r18, 0x3f	; 63
    2074:	f8 94       	cli
        otable[i] = obj;
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	44 0f       	add	r20, r20
    207a:	55 1f       	adc	r21, r21
    207c:	fa 01       	movw	r30, r20
    207e:	e2 5b       	subi	r30, 0xB2	; 178
    2080:	fe 4f       	sbci	r31, 0xFE	; 254
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
        mtable[i] = m;
    2086:	fa 01       	movw	r30, r20
    2088:	ea 51       	subi	r30, 0x1A	; 26
    208a:	fe 4f       	sbci	r31, 0xFE	; 254
    208c:	71 83       	std	Z+1, r23	; 0x01
    208e:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	fc 01       	movw	r30, r24
    2096:	53 83       	std	Z+3, r21	; 0x03
    2098:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    209a:	27 ff       	sbrs	r18, 7
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <install+0x32>
    209e:	78 94       	sei
    20a0:	08 95       	ret

000020a2 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    20a2:	8c 01       	movw	r16, r24
    20a4:	7b 01       	movw	r14, r22
    20a6:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    20a8:	8f b7       	in	r24, 0x3f	; 63
    20aa:	f8 94       	cli
    initialize();
    20ac:	0e 94 19 04 	call	0x832	; 0x832 <initialize>
    ENABLE(1);
    20b0:	78 94       	sei
    if (m != NULL)
    20b2:	e1 14       	cp	r14, r1
    20b4:	f1 04       	cpc	r15, r1
    20b6:	41 f0       	breq	.+16     	; 0x20c8 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	a9 01       	movw	r20, r18
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	cb 01       	movw	r24, r22
    20c4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
    DISABLE(status);
    20c8:	8f b7       	in	r24, 0x3f	; 63
    20ca:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    20cc:	0e 94 a4 04 	call	0x948	; 0x948 <schedule>
    ENABLE(1);
    20d0:	78 94       	sei
    while (1) {
        SLEEP();
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	83 bf       	out	0x33, r24	; 51
    20d6:	88 95       	sleep
    20d8:	fd cf       	rjmp	.-6      	; 0x20d4 <tinytimber+0x32>

000020da <trafficLightFunc>:
	self->focus = !self->focus;
}
*/


void trafficLightFunc(TrafficLight* self){
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	ec 01       	movw	r28, r24
	
	
	switch(self->focus){
    20ec:	8e 81       	ldd	r24, Y+6	; 0x06
    20ee:	9f 81       	ldd	r25, Y+7	; 0x07
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <trafficLightFunc+0x1c>
    20f4:	40 c0       	rjmp	.+128    	; 0x2176 <trafficLightFunc+0x9c>
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f1       	breq	.+66     	; 0x213e <trafficLightFunc+0x64>
		default:
		break;
	}
	
	
	self->focus = !self->focus;
    20fc:	21 e0       	ldi	r18, 0x01	; 1
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	89 2b       	or	r24, r25
    2102:	11 f0       	breq	.+4      	; 0x2108 <trafficLightFunc+0x2e>
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	3f 83       	std	Y+7, r19	; 0x07
    210a:	2e 83       	std	Y+6, r18	; 0x06
	
	
	#define ON_TIME 3	// Time light is green
	
	AFTER(SEC(ON_TIME + 5), self, trafficLightFunc, NULL);
    210c:	c1 2c       	mov	r12, r1
    210e:	d1 2c       	mov	r13, r1
    2110:	8d e6       	ldi	r24, 0x6D	; 109
    2112:	e8 2e       	mov	r14, r24
    2114:	80 e1       	ldi	r24, 0x10	; 16
    2116:	f8 2e       	mov	r15, r24
    2118:	8e 01       	movw	r16, r28
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	a9 01       	movw	r20, r18
    2120:	60 e9       	ldi	r22, 0x90	; 144
    2122:	70 ed       	ldi	r23, 0xD0	; 208
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
	}
	SYNC(self, switchFocus, NULL);
	AFTER(SEC(i+5), self, trafficLight, NULL);
	*/
	
}
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	df 90       	pop	r13
    213a:	cf 90       	pop	r12
    213c:	08 95       	ret
			SYNC(self->simWriter, southboundRedLight, NULL);
			AFTER(SEC(5),self->simWriter, northboundGreenLight, NULL);
		break;
		
		case 1:
			SYNC(self->simWriter, northboundRedLight, NULL);
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	74 e0       	ldi	r23, 0x04	; 4
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	9d 81       	ldd	r25, Y+5	; 0x05
    214a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sync>
			AFTER(SEC(5), self->simWriter, southboundGreenLight, NULL);
    214e:	0c 81       	ldd	r16, Y+4	; 0x04
    2150:	1d 81       	ldd	r17, Y+5	; 0x05
    2152:	c1 2c       	mov	r12, r1
    2154:	d1 2c       	mov	r13, r1
    2156:	99 e0       	ldi	r25, 0x09	; 9
    2158:	e9 2e       	mov	r14, r25
    215a:	94 e0       	ldi	r25, 0x04	; 4
    215c:	f9 2e       	mov	r15, r25
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	6a e5       	ldi	r22, 0x5A	; 90
    2166:	72 e6       	ldi	r23, 0x62	; 98
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
		break;
    2174:	c3 cf       	rjmp	.-122    	; 0x20fc <trafficLightFunc+0x22>
void trafficLightFunc(TrafficLight* self){
	
	
	switch(self->focus){
		case 0:
			SYNC(self->simWriter, southboundRedLight, NULL);
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	61 e1       	ldi	r22, 0x11	; 17
    217c:	74 e0       	ldi	r23, 0x04	; 4
    217e:	8c 81       	ldd	r24, Y+4	; 0x04
    2180:	9d 81       	ldd	r25, Y+5	; 0x05
    2182:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <sync>
			AFTER(SEC(5),self->simWriter, northboundGreenLight, NULL);
    2186:	0c 81       	ldd	r16, Y+4	; 0x04
    2188:	1d 81       	ldd	r17, Y+5	; 0x05
    218a:	c1 2c       	mov	r12, r1
    218c:	d1 2c       	mov	r13, r1
    218e:	29 ef       	ldi	r18, 0xF9	; 249
    2190:	e2 2e       	mov	r14, r18
    2192:	23 e0       	ldi	r18, 0x03	; 3
    2194:	f2 2e       	mov	r15, r18
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	a9 01       	movw	r20, r18
    219c:	6a e5       	ldi	r22, 0x5A	; 90
    219e:	72 e6       	ldi	r23, 0x62	; 98
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <async>
    21a8:	8e 81       	ldd	r24, Y+6	; 0x06
    21aa:	9f 81       	ldd	r25, Y+7	; 0x07
		break;
    21ac:	a7 cf       	rjmp	.-178    	; 0x20fc <trafficLightFunc+0x22>

000021ae <__divmodhi4>:
    21ae:	97 fb       	bst	r25, 7
    21b0:	07 2e       	mov	r0, r23
    21b2:	16 f4       	brtc	.+4      	; 0x21b8 <__divmodhi4+0xa>
    21b4:	00 94       	com	r0
    21b6:	07 d0       	rcall	.+14     	; 0x21c6 <__divmodhi4_neg1>
    21b8:	77 fd       	sbrc	r23, 7
    21ba:	09 d0       	rcall	.+18     	; 0x21ce <__divmodhi4_neg2>
    21bc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodhi4>
    21c0:	07 fc       	sbrc	r0, 7
    21c2:	05 d0       	rcall	.+10     	; 0x21ce <__divmodhi4_neg2>
    21c4:	3e f4       	brtc	.+14     	; 0x21d4 <__divmodhi4_exit>

000021c6 <__divmodhi4_neg1>:
    21c6:	90 95       	com	r25
    21c8:	81 95       	neg	r24
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	08 95       	ret

000021ce <__divmodhi4_neg2>:
    21ce:	70 95       	com	r23
    21d0:	61 95       	neg	r22
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255

000021d4 <__divmodhi4_exit>:
    21d4:	08 95       	ret

000021d6 <__tablejump2__>:
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	05 90       	lpm	r0, Z+
    21dc:	f4 91       	lpm	r31, Z
    21de:	e0 2d       	mov	r30, r0
    21e0:	09 94       	ijmp

000021e2 <__udivmodhi4>:
    21e2:	aa 1b       	sub	r26, r26
    21e4:	bb 1b       	sub	r27, r27
    21e6:	51 e1       	ldi	r21, 0x11	; 17
    21e8:	07 c0       	rjmp	.+14     	; 0x21f8 <__udivmodhi4_ep>

000021ea <__udivmodhi4_loop>:
    21ea:	aa 1f       	adc	r26, r26
    21ec:	bb 1f       	adc	r27, r27
    21ee:	a6 17       	cp	r26, r22
    21f0:	b7 07       	cpc	r27, r23
    21f2:	10 f0       	brcs	.+4      	; 0x21f8 <__udivmodhi4_ep>
    21f4:	a6 1b       	sub	r26, r22
    21f6:	b7 0b       	sbc	r27, r23

000021f8 <__udivmodhi4_ep>:
    21f8:	88 1f       	adc	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	5a 95       	dec	r21
    21fe:	a9 f7       	brne	.-22     	; 0x21ea <__udivmodhi4_loop>
    2200:	80 95       	com	r24
    2202:	90 95       	com	r25
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	08 95       	ret

0000220a <setjmp>:
    220a:	dc 01       	movw	r26, r24
    220c:	2d 92       	st	X+, r2
    220e:	3d 92       	st	X+, r3
    2210:	4d 92       	st	X+, r4
    2212:	5d 92       	st	X+, r5
    2214:	6d 92       	st	X+, r6
    2216:	7d 92       	st	X+, r7
    2218:	8d 92       	st	X+, r8
    221a:	9d 92       	st	X+, r9
    221c:	ad 92       	st	X+, r10
    221e:	bd 92       	st	X+, r11
    2220:	cd 92       	st	X+, r12
    2222:	dd 92       	st	X+, r13
    2224:	ed 92       	st	X+, r14
    2226:	fd 92       	st	X+, r15
    2228:	0d 93       	st	X+, r16
    222a:	1d 93       	st	X+, r17
    222c:	cd 93       	st	X+, r28
    222e:	dd 93       	st	X+, r29
    2230:	ff 91       	pop	r31
    2232:	ef 91       	pop	r30
    2234:	8d b7       	in	r24, 0x3d	; 61
    2236:	8d 93       	st	X+, r24
    2238:	8e b7       	in	r24, 0x3e	; 62
    223a:	8d 93       	st	X+, r24
    223c:	8f b7       	in	r24, 0x3f	; 63
    223e:	8d 93       	st	X+, r24
    2240:	ed 93       	st	X+, r30
    2242:	fd 93       	st	X+, r31
    2244:	88 27       	eor	r24, r24
    2246:	99 27       	eor	r25, r25
    2248:	09 94       	ijmp

0000224a <longjmp>:
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	91 05       	cpc	r25, r1
    2252:	81 1d       	adc	r24, r1
    2254:	2d 90       	ld	r2, X+
    2256:	3d 90       	ld	r3, X+
    2258:	4d 90       	ld	r4, X+
    225a:	5d 90       	ld	r5, X+
    225c:	6d 90       	ld	r6, X+
    225e:	7d 90       	ld	r7, X+
    2260:	8d 90       	ld	r8, X+
    2262:	9d 90       	ld	r9, X+
    2264:	ad 90       	ld	r10, X+
    2266:	bd 90       	ld	r11, X+
    2268:	cd 90       	ld	r12, X+
    226a:	dd 90       	ld	r13, X+
    226c:	ed 90       	ld	r14, X+
    226e:	fd 90       	ld	r15, X+
    2270:	0d 91       	ld	r16, X+
    2272:	1d 91       	ld	r17, X+
    2274:	cd 91       	ld	r28, X+
    2276:	dd 91       	ld	r29, X+
    2278:	ed 91       	ld	r30, X+
    227a:	fd 91       	ld	r31, X+
    227c:	0d 90       	ld	r0, X+
    227e:	f8 94       	cli
    2280:	fe bf       	out	0x3e, r31	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	ed bf       	out	0x3d, r30	; 61
    2286:	ed 91       	ld	r30, X+
    2288:	fd 91       	ld	r31, X+
    228a:	09 94       	ijmp

0000228c <_exit>:
    228c:	f8 94       	cli

0000228e <__stop_program>:
    228e:	ff cf       	rjmp	.-2      	; 0x228e <__stop_program>
