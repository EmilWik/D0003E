
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000016a0  00001734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  00800106  00800106  0000173a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e8d  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e52  00000000  00000000  000037f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001289  00000000  00000000  0000464b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a28  00000000  00000000  000058d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000863  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000286a  00000000  00000000  00006b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  000093c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_1>
       8:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_2>
       c:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_3>
      10:	0c 94 8c 04 	jmp	0x918	; 0x918 <__vector_4>
      14:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_9>
      28:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_10>
      2c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_11>
      30:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_12>
      34:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_13>
      38:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_14>
      3c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_15>
      40:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_16>
      44:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_17>
      48:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_18>
      4c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_19>
      50:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__vector_20>
      54:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_21>
      58:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_22>
      5c:	12 01       	movw	r2, r4
      5e:	32 01       	movw	r6, r4
      60:	41 01       	movw	r8, r2
      62:	6e 01       	movw	r12, r28
      64:	93 01       	movw	r18, r6
      66:	b5 01       	movw	r22, r10
      68:	dc 01       	movw	r26, r24
      6a:	12 02       	muls	r17, r18
      6c:	d7 00       	.word	0x00d7	; ????
      6e:	96 00       	.word	0x0096	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 ea       	ldi	r30, 0xA0	; 160
      84:	f6 e1       	ldi	r31, 0x16	; 22
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 30       	cpi	r26, 0x06	; 6
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a6 e0       	ldi	r26, 0x06	; 6
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 35       	cpi	r26, 0x5F	; 95
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
      a6:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <writeChar>:
	int focus;
} GUI;



static void writeChar(char c, int pos){
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
      bc:	db 01       	movw	r26, r22
      be:	77 fd       	sbrc	r23, 7
      c0:	74 c0       	rjmp	.+232    	; 0x1aa <writeChar+0xfc>
      c2:	b5 95       	asr	r27
      c4:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
      c6:	61 70       	andi	r22, 0x01	; 1
      c8:	70 78       	andi	r23, 0x80	; 128
      ca:	77 fd       	sbrc	r23, 7
      cc:	67 c0       	rjmp	.+206    	; 0x19c <writeChar+0xee>
      ce:	66 0f       	add	r22, r22
      d0:	77 1f       	adc	r23, r23
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
      d6:	ad 01       	movw	r20, r26
      d8:	44 51       	subi	r20, 0x14	; 20
      da:	5f 4f       	sbci	r21, 0xFF	; 255
      dc:	ea 01       	movw	r28, r20
      de:	88 81       	ld	r24, Y
      e0:	20 ef       	ldi	r18, 0xF0	; 240
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	06 2e       	mov	r0, r22
      e6:	02 c0       	rjmp	.+4      	; 0xec <writeChar+0x3e>
      e8:	35 95       	asr	r19
      ea:	27 95       	ror	r18
      ec:	0a 94       	dec	r0
      ee:	e2 f7       	brpl	.-8      	; 0xe8 <writeChar+0x3a>
      f0:	82 23       	and	r24, r18
      f2:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
      f4:	7d 01       	movw	r14, r26
      f6:	d1 ef       	ldi	r29, 0xF1	; 241
      f8:	ed 0e       	add	r14, r29
      fa:	f1 1c       	adc	r15, r1
      fc:	e7 01       	movw	r28, r14
      fe:	88 81       	ld	r24, Y
     100:	82 23       	and	r24, r18
     102:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
     104:	25 96       	adiw	r28, 0x05	; 5
     106:	88 81       	ld	r24, Y
     108:	82 23       	and	r24, r18
     10a:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
     10c:	a5 50       	subi	r26, 0x05	; 5
     10e:	bf 4f       	sbci	r27, 0xFF	; 255
     110:	8c 91       	ld	r24, X
     112:	28 23       	and	r18, r24
     114:	2c 93       	st	X, r18
	
	switch (c){
     116:	0e 2f       	mov	r16, r30
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	f8 01       	movw	r30, r16
     11c:	f0 97       	sbiw	r30, 0x30	; 48
     11e:	ea 30       	cpi	r30, 0x0A	; 10
     120:	f1 05       	cpc	r31, r1
     122:	a8 f5       	brcc	.+106    	; 0x18e <writeChar+0xe0>
     124:	e2 5d       	subi	r30, 0xD2	; 210
     126:	ff 4f       	sbci	r31, 0xFF	; 255
     128:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__tablejump2__>
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
		FEET  += (1 << (0 + offset));
		break;
		
		case '9':
		HEAD  += (1 << (0 + offset));
     12c:	da 01       	movw	r26, r20
     12e:	ec 91       	ld	r30, X
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	9c 01       	movw	r18, r24
     136:	06 2e       	mov	r0, r22
     138:	01 c0       	rjmp	.+2      	; 0x13c <writeChar+0x8e>
     13a:	22 0f       	add	r18, r18
     13c:	0a 94       	dec	r0
     13e:	ea f7       	brpl	.-6      	; 0x13a <writeChar+0x8c>
     140:	3e 2f       	mov	r19, r30
     142:	32 0f       	add	r19, r18
     144:	3c 93       	st	X, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     146:	f7 01       	movw	r30, r14
     148:	40 81       	ld	r20, Z
     14a:	fb 01       	movw	r30, r22
     14c:	32 96       	adiw	r30, 0x02	; 2
     14e:	8c 01       	movw	r16, r24
     150:	02 c0       	rjmp	.+4      	; 0x156 <writeChar+0xa8>
     152:	00 0f       	add	r16, r16
     154:	11 1f       	adc	r17, r17
     156:	ea 95       	dec	r30
     158:	e2 f7       	brpl	.-8      	; 0x152 <writeChar+0xa4>
     15a:	32 2f       	mov	r19, r18
     15c:	30 2b       	or	r19, r16
     15e:	34 0f       	add	r19, r20
     160:	d7 01       	movw	r26, r14
     162:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     164:	38 81       	ld	r19, Y
     166:	ab 01       	movw	r20, r22
     168:	4f 5f       	subi	r20, 0xFF	; 255
     16a:	5f 4f       	sbci	r21, 0xFF	; 255
     16c:	fc 01       	movw	r30, r24
     16e:	02 c0       	rjmp	.+4      	; 0x174 <writeChar+0xc6>
     170:	ee 0f       	add	r30, r30
     172:	ff 1f       	adc	r31, r31
     174:	4a 95       	dec	r20
     176:	e2 f7       	brpl	.-8      	; 0x170 <writeChar+0xc2>
     178:	af 01       	movw	r20, r30
     17a:	6d 5f       	subi	r22, 0xFD	; 253
     17c:	7f 4f       	sbci	r23, 0xFF	; 255
     17e:	01 c0       	rjmp	.+2      	; 0x182 <writeChar+0xd4>
     180:	88 0f       	add	r24, r24
     182:	6a 95       	dec	r22
     184:	ea f7       	brpl	.-6      	; 0x180 <writeChar+0xd2>
     186:	84 2b       	or	r24, r20
     188:	82 2b       	or	r24, r18
     18a:	83 0f       	add	r24, r19
     18c:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	08 95       	ret



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
     19c:	61 50       	subi	r22, 0x01	; 1
     19e:	71 09       	sbc	r23, r1
     1a0:	6e 6f       	ori	r22, 0xFE	; 254
     1a2:	7f 6f       	ori	r23, 0xFF	; 255
     1a4:	6f 5f       	subi	r22, 0xFF	; 255
     1a6:	7f 4f       	sbci	r23, 0xFF	; 255
     1a8:	92 cf       	rjmp	.-220    	; 0xce <writeChar+0x20>
} GUI;



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
     1aa:	11 96       	adiw	r26, 0x01	; 1
     1ac:	8a cf       	rjmp	.-236    	; 0xc2 <writeChar+0x14>
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset));
		break;
		
		case '8':
		HEAD  += (1 << (0 + offset));
     1ae:	fa 01       	movw	r30, r20
     1b0:	10 81       	ld	r17, Z
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	9c 01       	movw	r18, r24
     1b8:	06 2e       	mov	r0, r22
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <writeChar+0x110>
     1bc:	22 0f       	add	r18, r18
     1be:	0a 94       	dec	r0
     1c0:	ea f7       	brpl	.-6      	; 0x1bc <writeChar+0x10e>
     1c2:	31 2f       	mov	r19, r17
     1c4:	32 0f       	add	r19, r18
     1c6:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     1c8:	f7 01       	movw	r30, r14
     1ca:	30 81       	ld	r19, Z
     1cc:	ab 01       	movw	r20, r22
     1ce:	4e 5f       	subi	r20, 0xFE	; 254
     1d0:	5f 4f       	sbci	r21, 0xFF	; 255
     1d2:	8c 01       	movw	r16, r24
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <writeChar+0x12a>
     1d6:	00 0f       	add	r16, r16
     1d8:	4a 95       	dec	r20
     1da:	ea f7       	brpl	.-6      	; 0x1d6 <writeChar+0x128>
     1dc:	40 2f       	mov	r20, r16
     1de:	42 2b       	or	r20, r18
     1e0:	34 0f       	add	r19, r20
     1e2:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     1e4:	38 81       	ld	r19, Y
     1e6:	ab 01       	movw	r20, r22
     1e8:	4f 5f       	subi	r20, 0xFF	; 255
     1ea:	5f 4f       	sbci	r21, 0xFF	; 255
     1ec:	fc 01       	movw	r30, r24
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <writeChar+0x146>
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	4a 95       	dec	r20
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <writeChar+0x142>
     1f8:	af 01       	movw	r20, r30
     1fa:	40 2b       	or	r20, r16
     1fc:	42 2b       	or	r20, r18
     1fe:	6d 5f       	subi	r22, 0xFD	; 253
     200:	7f 4f       	sbci	r23, 0xFF	; 255
     202:	01 c0       	rjmp	.+2      	; 0x206 <writeChar+0x158>
     204:	88 0f       	add	r24, r24
     206:	6a 95       	dec	r22
     208:	ea f7       	brpl	.-6      	; 0x204 <writeChar+0x156>
     20a:	84 2b       	or	r24, r20
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     20c:	83 0f       	add	r24, r19
     20e:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     210:	8c 91       	ld	r24, X
     212:	28 0f       	add	r18, r24
     214:	2c 93       	st	X, r18
		break;
		
		default:
		break;
	}
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	08 95       	ret
	LEGS  &= (0x0F0 >> offset);
	FEET  &= (0x0F0 >> offset);
	
	switch (c){
		case '0':
		HEAD  += (1 << (0 + offset));
     224:	fa 01       	movw	r30, r20
     226:	10 81       	ld	r17, Z
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	9c 01       	movw	r18, r24
     22e:	06 2e       	mov	r0, r22
     230:	01 c0       	rjmp	.+2      	; 0x234 <writeChar+0x186>
     232:	22 0f       	add	r18, r18
     234:	0a 94       	dec	r0
     236:	ea f7       	brpl	.-6      	; 0x232 <writeChar+0x184>
     238:	31 2f       	mov	r19, r17
     23a:	32 0f       	add	r19, r18
     23c:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     23e:	f7 01       	movw	r30, r14
     240:	30 81       	ld	r19, Z
     242:	6e 5f       	subi	r22, 0xFE	; 254
     244:	7f 4f       	sbci	r23, 0xFF	; 255
     246:	01 c0       	rjmp	.+2      	; 0x24a <writeChar+0x19c>
     248:	88 0f       	add	r24, r24
     24a:	6a 95       	dec	r22
     24c:	ea f7       	brpl	.-6      	; 0x248 <writeChar+0x19a>
     24e:	82 2b       	or	r24, r18
     250:	93 2f       	mov	r25, r19
     252:	98 0f       	add	r25, r24
     254:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset)) | (1 << (2 + offset));
     256:	98 81       	ld	r25, Y
     258:	89 0f       	add	r24, r25
     25a:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     25c:	8c 91       	ld	r24, X
     25e:	28 0f       	add	r18, r24
     260:	2c 93       	st	X, r18
		break;
     262:	95 cf       	rjmp	.-214    	; 0x18e <writeChar+0xe0>
		
		case '1':
		CHEST += (1 << (0 + offset));
     264:	d7 01       	movw	r26, r14
     266:	2c 91       	ld	r18, X
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <writeChar+0x1c2>
     26e:	88 0f       	add	r24, r24
     270:	6a 95       	dec	r22
     272:	ea f7       	brpl	.-6      	; 0x26e <writeChar+0x1c0>
     274:	92 2f       	mov	r25, r18
     276:	98 0f       	add	r25, r24
     278:	9c 93       	st	X, r25
		LEGS  += (1 << (0 + offset));
     27a:	98 81       	ld	r25, Y
     27c:	89 0f       	add	r24, r25
     27e:	88 83       	st	Y, r24
		break;
     280:	86 cf       	rjmp	.-244    	; 0x18e <writeChar+0xe0>
		
		case '2':
		HEAD  += (1 << (0 + offset));
     282:	fa 01       	movw	r30, r20
     284:	10 81       	ld	r17, Z
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	9c 01       	movw	r18, r24
     28c:	06 2e       	mov	r0, r22
     28e:	01 c0       	rjmp	.+2      	; 0x292 <writeChar+0x1e4>
     290:	22 0f       	add	r18, r18
     292:	0a 94       	dec	r0
     294:	ea f7       	brpl	.-6      	; 0x290 <writeChar+0x1e2>
     296:	31 2f       	mov	r19, r17
     298:	32 0f       	add	r19, r18
     29a:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     29c:	f7 01       	movw	r30, r14
     29e:	30 81       	ld	r19, Z
     2a0:	32 0f       	add	r19, r18
     2a2:	30 83       	st	Z, r19
		LEGS  += (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     2a4:	38 81       	ld	r19, Y
     2a6:	ab 01       	movw	r20, r22
     2a8:	4f 5f       	subi	r20, 0xFF	; 255
     2aa:	5f 4f       	sbci	r21, 0xFF	; 255
     2ac:	fc 01       	movw	r30, r24
     2ae:	04 2e       	mov	r0, r20
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <writeChar+0x206>
     2b2:	ee 0f       	add	r30, r30
     2b4:	0a 94       	dec	r0
     2b6:	ea f7       	brpl	.-6      	; 0x2b2 <writeChar+0x204>
     2b8:	4f 5f       	subi	r20, 0xFF	; 255
     2ba:	5f 4f       	sbci	r21, 0xFF	; 255
     2bc:	8c 01       	movw	r16, r24
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <writeChar+0x216>
     2c0:	00 0f       	add	r16, r16
     2c2:	11 1f       	adc	r17, r17
     2c4:	4a 95       	dec	r20
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <writeChar+0x212>
     2c8:	a8 01       	movw	r20, r16
     2ca:	4e 2b       	or	r20, r30
     2cc:	6d 5f       	subi	r22, 0xFD	; 253
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <writeChar+0x226>
     2d2:	88 0f       	add	r24, r24
     2d4:	6a 95       	dec	r22
     2d6:	ea f7       	brpl	.-6      	; 0x2d2 <writeChar+0x224>
     2d8:	84 2b       	or	r24, r20
     2da:	98 cf       	rjmp	.-208    	; 0x20c <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
     2dc:	fa 01       	movw	r30, r20
     2de:	10 81       	ld	r17, Z
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	9c 01       	movw	r18, r24
     2e6:	06 2e       	mov	r0, r22
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <writeChar+0x23e>
     2ea:	22 0f       	add	r18, r18
     2ec:	0a 94       	dec	r0
     2ee:	ea f7       	brpl	.-6      	; 0x2ea <writeChar+0x23c>
     2f0:	31 2f       	mov	r19, r17
     2f2:	32 0f       	add	r19, r18
     2f4:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     2f6:	f7 01       	movw	r30, r14
     2f8:	30 81       	ld	r19, Z
     2fa:	32 0f       	add	r19, r18
     2fc:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     2fe:	38 81       	ld	r19, Y
     300:	ab 01       	movw	r20, r22
     302:	4f 5f       	subi	r20, 0xFF	; 255
     304:	5f 4f       	sbci	r21, 0xFF	; 255
     306:	8c 01       	movw	r16, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <writeChar+0x260>
     30a:	00 0f       	add	r16, r16
     30c:	11 1f       	adc	r17, r17
     30e:	4a 95       	dec	r20
     310:	e2 f7       	brpl	.-8      	; 0x30a <writeChar+0x25c>
     312:	a8 01       	movw	r20, r16
     314:	6d 5f       	subi	r22, 0xFD	; 253
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	01 c0       	rjmp	.+2      	; 0x31c <writeChar+0x26e>
     31a:	88 0f       	add	r24, r24
     31c:	6a 95       	dec	r22
     31e:	ea f7       	brpl	.-6      	; 0x31a <writeChar+0x26c>
     320:	84 2b       	or	r24, r20
     322:	82 2b       	or	r24, r18
     324:	73 cf       	rjmp	.-282    	; 0x20c <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '4':
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     326:	d7 01       	movw	r26, r14
     328:	4c 91       	ld	r20, X
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	9c 01       	movw	r18, r24
     330:	06 2e       	mov	r0, r22
     332:	01 c0       	rjmp	.+2      	; 0x336 <writeChar+0x288>
     334:	22 0f       	add	r18, r18
     336:	0a 94       	dec	r0
     338:	ea f7       	brpl	.-6      	; 0x334 <writeChar+0x286>
     33a:	fb 01       	movw	r30, r22
     33c:	32 96       	adiw	r30, 0x02	; 2
     33e:	8c 01       	movw	r16, r24
     340:	02 c0       	rjmp	.+4      	; 0x346 <writeChar+0x298>
     342:	00 0f       	add	r16, r16
     344:	11 1f       	adc	r17, r17
     346:	ea 95       	dec	r30
     348:	e2 f7       	brpl	.-8      	; 0x342 <writeChar+0x294>
     34a:	32 2f       	mov	r19, r18
     34c:	30 2b       	or	r19, r16
     34e:	34 0f       	add	r19, r20
     350:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     352:	38 81       	ld	r19, Y
     354:	ab 01       	movw	r20, r22
     356:	4f 5f       	subi	r20, 0xFF	; 255
     358:	5f 4f       	sbci	r21, 0xFF	; 255
     35a:	dc 01       	movw	r26, r24
     35c:	02 c0       	rjmp	.+4      	; 0x362 <writeChar+0x2b4>
     35e:	aa 0f       	add	r26, r26
     360:	bb 1f       	adc	r27, r27
     362:	4a 95       	dec	r20
     364:	e2 f7       	brpl	.-8      	; 0x35e <writeChar+0x2b0>
     366:	ad 01       	movw	r20, r26
     368:	08 cf       	rjmp	.-496    	; 0x17a <writeChar+0xcc>
		break;
		
		case '5':
		HEAD  += (1 << (0 + offset));
     36a:	fa 01       	movw	r30, r20
     36c:	10 81       	ld	r17, Z
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9c 01       	movw	r18, r24
     374:	06 2e       	mov	r0, r22
     376:	01 c0       	rjmp	.+2      	; 0x37a <writeChar+0x2cc>
     378:	22 0f       	add	r18, r18
     37a:	0a 94       	dec	r0
     37c:	ea f7       	brpl	.-6      	; 0x378 <writeChar+0x2ca>
     37e:	31 2f       	mov	r19, r17
     380:	32 0f       	add	r19, r18
     382:	30 83       	st	Z, r19
		CHEST += (1 << (2 + offset));
     384:	f7 01       	movw	r30, r14
     386:	30 81       	ld	r19, Z
     388:	ab 01       	movw	r20, r22
     38a:	4e 5f       	subi	r20, 0xFE	; 254
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	8c 01       	movw	r16, r24
     390:	02 c0       	rjmp	.+4      	; 0x396 <writeChar+0x2e8>
     392:	00 0f       	add	r16, r16
     394:	11 1f       	adc	r17, r17
     396:	4a 95       	dec	r20
     398:	e2 f7       	brpl	.-8      	; 0x392 <writeChar+0x2e4>
     39a:	a8 01       	movw	r20, r16
     39c:	43 0f       	add	r20, r19
     39e:	40 83       	st	Z, r20
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     3a0:	38 81       	ld	r19, Y
     3a2:	ab 01       	movw	r20, r22
     3a4:	4f 5f       	subi	r20, 0xFF	; 255
     3a6:	5f 4f       	sbci	r21, 0xFF	; 255
     3a8:	fc 01       	movw	r30, r24
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <writeChar+0x302>
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	4a 95       	dec	r20
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <writeChar+0x2fe>
     3b4:	af 01       	movw	r20, r30
     3b6:	ae cf       	rjmp	.-164    	; 0x314 <writeChar+0x266>
		FEET  += (1 << (0 + offset));
		break;
		
		case '6':
		HEAD  += (1 << (0 + offset));
     3b8:	fa 01       	movw	r30, r20
     3ba:	20 81       	ld	r18, Z
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	8c 01       	movw	r16, r24
     3c2:	06 2e       	mov	r0, r22
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <writeChar+0x31a>
     3c6:	00 0f       	add	r16, r16
     3c8:	0a 94       	dec	r0
     3ca:	ea f7       	brpl	.-6      	; 0x3c6 <writeChar+0x318>
     3cc:	20 0f       	add	r18, r16
     3ce:	20 83       	st	Z, r18
		CHEST += (1 << (2 + offset));
     3d0:	f7 01       	movw	r30, r14
     3d2:	40 81       	ld	r20, Z
     3d4:	9b 01       	movw	r18, r22
     3d6:	2e 5f       	subi	r18, 0xFE	; 254
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	fc 01       	movw	r30, r24
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <writeChar+0x334>
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	2a 95       	dec	r18
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <writeChar+0x330>
     3e6:	9f 01       	movw	r18, r30
     3e8:	34 2f       	mov	r19, r20
     3ea:	32 0f       	add	r19, r18
     3ec:	f7 01       	movw	r30, r14
     3ee:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     3f0:	38 81       	ld	r19, Y
     3f2:	ab 01       	movw	r20, r22
     3f4:	4f 5f       	subi	r20, 0xFF	; 255
     3f6:	5f 4f       	sbci	r21, 0xFF	; 255
     3f8:	fc 01       	movw	r30, r24
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	4a 95       	dec	r20
     402:	e2 f7       	brpl	.-8      	; 0x3fc <writeChar+0x34e>
     404:	2e 2b       	or	r18, r30
     406:	20 2b       	or	r18, r16
     408:	6d 5f       	subi	r22, 0xFD	; 253
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	88 0f       	add	r24, r24
     410:	6a 95       	dec	r22
     412:	ea f7       	brpl	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     414:	82 2b       	or	r24, r18
     416:	83 0f       	add	r24, r19
     418:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     41a:	8c 91       	ld	r24, X
     41c:	e0 2f       	mov	r30, r16
     41e:	e8 0f       	add	r30, r24
     420:	ec 93       	st	X, r30
		break;
     422:	b5 ce       	rjmp	.-662    	; 0x18e <writeChar+0xe0>
		
		case '7':
		HEAD  += (1 << (0 + offset));
     424:	da 01       	movw	r26, r20
     426:	2c 91       	ld	r18, X
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	88 0f       	add	r24, r24
     430:	6a 95       	dec	r22
     432:	ea f7       	brpl	.-6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     434:	92 2f       	mov	r25, r18
     436:	98 0f       	add	r25, r24
     438:	9c 93       	st	X, r25
		CHEST += (1 << (0 + offset));
     43a:	f7 01       	movw	r30, r14
     43c:	90 81       	ld	r25, Z
     43e:	98 0f       	add	r25, r24
     440:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset));
     442:	98 81       	ld	r25, Y
     444:	89 0f       	add	r24, r25
     446:	88 83       	st	Y, r24
		break;
     448:	a2 ce       	rjmp	.-700    	; 0x18e <writeChar+0xe0>

0000044a <printAt>:
		default:
		break;
	}
}

void printAt(GUI *self, int num) {
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	7b 01       	movw	r14, r22
	int pp = self->focus * 4;
     458:	fc 01       	movw	r30, r24
     45a:	c4 81       	ldd	r28, Z+4	; 0x04
     45c:	d5 81       	ldd	r29, Z+5	; 0x05
     45e:	cc 0f       	add	r28, r28
     460:	dd 1f       	adc	r29, r29
     462:	cc 0f       	add	r28, r28
     464:	dd 1f       	adc	r29, r29
	writeChar( (num % 100) / 10 + '0', pp);
     466:	cb 01       	movw	r24, r22
     468:	64 e6       	ldi	r22, 0x64	; 100
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 df 0a 	call	0x15be	; 0x15be <__divmodhi4>
     470:	0a e0       	ldi	r16, 0x0A	; 10
     472:	10 e0       	ldi	r17, 0x00	; 0
     474:	b8 01       	movw	r22, r16
     476:	0e 94 df 0a 	call	0x15be	; 0x15be <__divmodhi4>
     47a:	86 2f       	mov	r24, r22
     47c:	be 01       	movw	r22, r28
     47e:	80 5d       	subi	r24, 0xD0	; 208
     480:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     484:	21 96       	adiw	r28, 0x01	; 1
     486:	c7 01       	movw	r24, r14
     488:	b8 01       	movw	r22, r16
     48a:	0e 94 df 0a 	call	0x15be	; 0x15be <__divmodhi4>
     48e:	be 01       	movw	r22, r28
     490:	80 5d       	subi	r24, 0xD0	; 208
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14

void printAt(GUI *self, int num) {
	int pp = self->focus * 4;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     49e:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

000004a2 <initLCD>:



void initLCD(){
	// LCD
	CLKPR = 0x80;
     4a2:	e1 e6       	ldi	r30, 0x61	; 97
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	80 83       	st	Z, r24
	CLKPR = 0x00;
     4aa:	10 82       	st	Z, r1

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     4ac:	90 ec       	ldi	r25, 0xC0	; 192
     4ae:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     4b2:	87 e3       	ldi	r24, 0x37	; 55
     4b4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     4b8:	87 e0       	ldi	r24, 0x07	; 7
     4ba:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     4be:	8f e0       	ldi	r24, 0x0F	; 15
     4c0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	
	
	
	// Button
	PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
     4c4:	85 b1       	in	r24, 0x05	; 5
     4c6:	80 6d       	ori	r24, 0xD0	; 208
     4c8:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE2)|(1<<PE3);
     4ca:	8e b1       	in	r24, 0x0e	; 14
     4cc:	8c 60       	ori	r24, 0x0C	; 12
     4ce:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
     4d0:	8f e2       	ldi	r24, 0x2F	; 47
     4d2:	84 b9       	out	0x04, r24	; 4
	//DDRE   = (1<<DDE6)|(1<<DDE4);
	
	//Insert nop for synchronization
	asm("nop");
     4d4:	00 00       	nop

	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
     4dc:	80 ed       	ldi	r24, 0xD0	; 208
     4de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
     4e2:	9d bb       	out	0x1d, r25	; 29
     4e4:	08 95       	ret

000004e6 <main>:
	
}


void main( void ){
	sei();
     4e6:	78 94       	sei
GUI gui = initGUI();


void USART_Init( unsigned int ubrr){
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     4e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
     4ec:	83 e3       	ldi	r24, 0x33	; 51
     4ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     4f2:	88 e9       	ldi	r24, 0x98	; 152
     4f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     4f8:	86 e0       	ldi	r24, 0x06	; 6
     4fa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	sei();
	
	USART_Init ( MYUBRR );
	char ReceivedByte; 
	
	initLCD();
     4fe:	0e 94 51 02 	call	0x4a2	; 0x4a2 <initLCD>
	
	 for (;;) // Loop forever
	 {
		 while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been received and is ready to be read from UDR
     502:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     506:	87 ff       	sbrs	r24, 7
     508:	fc cf       	rjmp	.-8      	; 0x502 <__stack+0x3>
		 ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     50a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		 
		 
		 
		 while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     50e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     512:	85 ff       	sbrs	r24, 5
     514:	fc cf       	rjmp	.-8      	; 0x50e <__stack+0xf>
		 UDR0 = ReceivedByte; // Echo back the received byte back to the computer
     516:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	 }
     51a:	f3 cf       	rjmp	.-26     	; 0x502 <__stack+0x3>

0000051c <__vector_13>:
	




ISR(USART0_RX_vect){
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
	//printAt(&gui, 5);
}
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_14>:


ISR(USART0_UDRE_vect){
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	4f 93       	push	r20
     540:	5f 93       	push	r21
     542:	6f 93       	push	r22
     544:	7f 93       	push	r23
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	af 93       	push	r26
     54c:	bf 93       	push	r27
     54e:	ef 93       	push	r30
     550:	ff 93       	push	r31
	printAt(&gui, 1);
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	86 e0       	ldi	r24, 0x06	; 6
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 25 02 	call	0x44a	; 0x44a <printAt>
}
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <__vector_15>:


ISR(USART0_TX_vect){
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
	printAt(&gui, 2);
     5a2:	62 e0       	ldi	r22, 0x02	; 2
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	86 e0       	ldi	r24, 0x06	; 6
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 25 02 	call	0x44a	; 0x44a <printAt>
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	7f 91       	pop	r23
     5bc:	6f 91       	pop	r22
     5be:	5f 91       	pop	r21
     5c0:	4f 91       	pop	r20
     5c2:	3f 91       	pop	r19
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <dispatch>:

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    return t;
}
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <dispatch+0x6>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     5e6:	06 96       	adiw	r24, 0x06	; 6
     5e8:	0e 94 0d 0b 	call	0x161a	; 0x161a <setjmp>
     5ec:	89 2b       	or	r24, r25
     5ee:	29 f0       	breq	.+10     	; 0x5fa <dispatch+0x2a>
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     602:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	06 96       	adiw	r24, 0x06	; 6
     60c:	0e 94 2d 0b 	call	0x165a	; 0x165a <longjmp>

00000610 <schedule>:
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <msgQ>
     61c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <msgQ+0x1>
     620:	30 97       	sbiw	r30, 0x00	; 0
     622:	f1 f0       	breq	.+60     	; 0x660 <schedule+0x50>
     624:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     628:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     62c:	00 97       	sbiw	r24, 0x00	; 0
     62e:	c1 f0       	breq	.+48     	; 0x660 <schedule+0x50>
     630:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     634:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     638:	aa 81       	ldd	r26, Y+2	; 0x02
     63a:	bb 81       	ldd	r27, Y+3	; 0x03
     63c:	10 97       	sbiw	r26, 0x00	; 0
     63e:	a9 f0       	breq	.+42     	; 0x66a <schedule+0x5a>
     640:	46 81       	ldd	r20, Z+6	; 0x06
     642:	57 81       	ldd	r21, Z+7	; 0x07
     644:	60 85       	ldd	r22, Z+8	; 0x08
     646:	71 85       	ldd	r23, Z+9	; 0x09
     648:	16 96       	adiw	r26, 0x06	; 6
     64a:	0d 91       	ld	r16, X+
     64c:	1d 91       	ld	r17, X+
     64e:	2d 91       	ld	r18, X+
     650:	3c 91       	ld	r19, X
     652:	19 97       	sbiw	r26, 0x09	; 9
     654:	40 1b       	sub	r20, r16
     656:	51 0b       	sbc	r21, r17
     658:	62 0b       	sbc	r22, r18
     65a:	73 0b       	sbc	r23, r19
     65c:	77 fd       	sbrc	r23, 7
     65e:	05 c0       	rjmp	.+10     	; 0x66a <schedule+0x5a>
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret
     66a:	fc 01       	movw	r30, r24
     66c:	20 81       	ld	r18, Z
     66e:	31 81       	ldd	r19, Z+1	; 0x01
     670:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     674:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     678:	d1 83       	std	Z+1, r29	; 0x01
     67a:	c0 83       	st	Z, r28
     67c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     680:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <dispatch>

00000690 <__vector_1>:
     690:	1f 92       	push	r1
     692:	0f 92       	push	r0
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	0f 92       	push	r0
     698:	11 24       	eor	r1, r1
     69a:	2f 93       	push	r18
     69c:	3f 93       	push	r19
     69e:	4f 93       	push	r20
     6a0:	5f 93       	push	r21
     6a2:	6f 93       	push	r22
     6a4:	7f 93       	push	r23
     6a6:	8f 93       	push	r24
     6a8:	9f 93       	push	r25
     6aa:	af 93       	push	r26
     6ac:	bf 93       	push	r27
     6ae:	ef 93       	push	r30
     6b0:	ff 93       	push	r31
     6b2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     6b6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     6ba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     6be:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     6c2:	c9 01       	movw	r24, r18
     6c4:	03 2e       	mov	r0, r19
     6c6:	00 0c       	add	r0, r0
     6c8:	aa 0b       	sbc	r26, r26
     6ca:	bb 0b       	sbc	r27, r27
     6cc:	dc 01       	movw	r26, r24
     6ce:	99 27       	eor	r25, r25
     6d0:	88 27       	eor	r24, r24
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	84 2b       	or	r24, r20
     6d8:	95 2b       	or	r25, r21
     6da:	a6 2b       	or	r26, r22
     6dc:	b7 2b       	or	r27, r23
     6de:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     6e2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     6e6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     6ea:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     6ee:	b0 9b       	sbis	0x16, 0	; 22
     6f0:	1b c0       	rjmp	.+54     	; 0x728 <__vector_1+0x98>
     6f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     6f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     6fa:	c9 01       	movw	r24, r18
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	09 2e       	mov	r0, r25
     700:	00 0c       	add	r0, r0
     702:	aa 0b       	sbc	r26, r26
     704:	bb 0b       	sbc	r27, r27
     706:	dc 01       	movw	r26, r24
     708:	99 27       	eor	r25, r25
     70a:	88 27       	eor	r24, r24
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	84 2b       	or	r24, r20
     712:	95 2b       	or	r25, r21
     714:	a6 2b       	or	r26, r22
     716:	b7 2b       	or	r27, r23
     718:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     71c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     720:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     724:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     728:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable>
     72c:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x1>
     730:	30 97       	sbiw	r30, 0x00	; 0
     732:	39 f0       	breq	.+14     	; 0x742 <__vector_1+0xb2>
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable>
     73c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x1>
     740:	09 95       	icall
     742:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	7f 91       	pop	r23
     754:	6f 91       	pop	r22
     756:	5f 91       	pop	r21
     758:	4f 91       	pop	r20
     75a:	3f 91       	pop	r19
     75c:	2f 91       	pop	r18
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <__vector_2>:
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     78e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     792:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     796:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     79a:	c9 01       	movw	r24, r18
     79c:	03 2e       	mov	r0, r19
     79e:	00 0c       	add	r0, r0
     7a0:	aa 0b       	sbc	r26, r26
     7a2:	bb 0b       	sbc	r27, r27
     7a4:	dc 01       	movw	r26, r24
     7a6:	99 27       	eor	r25, r25
     7a8:	88 27       	eor	r24, r24
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	84 2b       	or	r24, r20
     7b0:	95 2b       	or	r25, r21
     7b2:	a6 2b       	or	r26, r22
     7b4:	b7 2b       	or	r27, r23
     7b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     7ba:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     7be:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     7c2:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     7c6:	b0 9b       	sbis	0x16, 0	; 22
     7c8:	1b c0       	rjmp	.+54     	; 0x800 <__vector_2+0x98>
     7ca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     7ce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7d2:	c9 01       	movw	r24, r18
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	09 2e       	mov	r0, r25
     7d8:	00 0c       	add	r0, r0
     7da:	aa 0b       	sbc	r26, r26
     7dc:	bb 0b       	sbc	r27, r27
     7de:	dc 01       	movw	r26, r24
     7e0:	99 27       	eor	r25, r25
     7e2:	88 27       	eor	r24, r24
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	84 2b       	or	r24, r20
     7ea:	95 2b       	or	r25, r21
     7ec:	a6 2b       	or	r26, r22
     7ee:	b7 2b       	or	r27, r23
     7f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     7f4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     7f8:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     7fc:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     800:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x2>
     804:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x3>
     808:	30 97       	sbiw	r30, 0x00	; 0
     80a:	39 f0       	breq	.+14     	; 0x81a <__vector_2+0xb2>
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x2>
     814:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x3>
     818:	09 95       	icall
     81a:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_3>:
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
     862:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     866:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     86a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     86e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     872:	c9 01       	movw	r24, r18
     874:	03 2e       	mov	r0, r19
     876:	00 0c       	add	r0, r0
     878:	aa 0b       	sbc	r26, r26
     87a:	bb 0b       	sbc	r27, r27
     87c:	dc 01       	movw	r26, r24
     87e:	99 27       	eor	r25, r25
     880:	88 27       	eor	r24, r24
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	84 2b       	or	r24, r20
     888:	95 2b       	or	r25, r21
     88a:	a6 2b       	or	r26, r22
     88c:	b7 2b       	or	r27, r23
     88e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     892:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     896:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     89a:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     89e:	b0 9b       	sbis	0x16, 0	; 22
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <__vector_3+0x98>
     8a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8aa:	c9 01       	movw	r24, r18
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	09 2e       	mov	r0, r25
     8b0:	00 0c       	add	r0, r0
     8b2:	aa 0b       	sbc	r26, r26
     8b4:	bb 0b       	sbc	r27, r27
     8b6:	dc 01       	movw	r26, r24
     8b8:	99 27       	eor	r25, r25
     8ba:	88 27       	eor	r24, r24
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	84 2b       	or	r24, r20
     8c2:	95 2b       	or	r25, r21
     8c4:	a6 2b       	or	r26, r22
     8c6:	b7 2b       	or	r27, r23
     8c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     8cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     8d0:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     8d4:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     8d8:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0x4>
     8dc:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0x5>
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	39 f0       	breq	.+14     	; 0x8f2 <__vector_3+0xb2>
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0x4>
     8ec:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0x5>
     8f0:	09 95       	icall
     8f2:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     8f6:	ff 91       	pop	r31
     8f8:	ef 91       	pop	r30
     8fa:	bf 91       	pop	r27
     8fc:	af 91       	pop	r26
     8fe:	9f 91       	pop	r25
     900:	8f 91       	pop	r24
     902:	7f 91       	pop	r23
     904:	6f 91       	pop	r22
     906:	5f 91       	pop	r21
     908:	4f 91       	pop	r20
     90a:	3f 91       	pop	r19
     90c:	2f 91       	pop	r18
     90e:	0f 90       	pop	r0
     910:	0f be       	out	0x3f, r0	; 63
     912:	0f 90       	pop	r0
     914:	1f 90       	pop	r1
     916:	18 95       	reti

00000918 <__vector_4>:
     918:	1f 92       	push	r1
     91a:	0f 92       	push	r0
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	0f 92       	push	r0
     920:	11 24       	eor	r1, r1
     922:	2f 93       	push	r18
     924:	3f 93       	push	r19
     926:	4f 93       	push	r20
     928:	5f 93       	push	r21
     92a:	6f 93       	push	r22
     92c:	7f 93       	push	r23
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	af 93       	push	r26
     934:	bf 93       	push	r27
     936:	ef 93       	push	r30
     938:	ff 93       	push	r31
     93a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     93e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     942:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     946:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     94a:	c9 01       	movw	r24, r18
     94c:	03 2e       	mov	r0, r19
     94e:	00 0c       	add	r0, r0
     950:	aa 0b       	sbc	r26, r26
     952:	bb 0b       	sbc	r27, r27
     954:	dc 01       	movw	r26, r24
     956:	99 27       	eor	r25, r25
     958:	88 27       	eor	r24, r24
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	84 2b       	or	r24, r20
     960:	95 2b       	or	r25, r21
     962:	a6 2b       	or	r26, r22
     964:	b7 2b       	or	r27, r23
     966:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     96a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     96e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     972:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     976:	b0 9b       	sbis	0x16, 0	; 22
     978:	1b c0       	rjmp	.+54     	; 0x9b0 <__vector_4+0x98>
     97a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     97e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     982:	c9 01       	movw	r24, r18
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	09 2e       	mov	r0, r25
     988:	00 0c       	add	r0, r0
     98a:	aa 0b       	sbc	r26, r26
     98c:	bb 0b       	sbc	r27, r27
     98e:	dc 01       	movw	r26, r24
     990:	99 27       	eor	r25, r25
     992:	88 27       	eor	r24, r24
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	84 2b       	or	r24, r20
     99a:	95 2b       	or	r25, r21
     99c:	a6 2b       	or	r26, r22
     99e:	b7 2b       	or	r27, r23
     9a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     9a4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     9a8:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     9ac:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     9b0:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0x6>
     9b4:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0x7>
     9b8:	30 97       	sbiw	r30, 0x00	; 0
     9ba:	39 f0       	breq	.+14     	; 0x9ca <__vector_4+0xb2>
     9bc:	63 e0       	ldi	r22, 0x03	; 3
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0x6>
     9c4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0x7>
     9c8:	09 95       	icall
     9ca:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <__vector_5>:
     9f0:	1f 92       	push	r1
     9f2:	0f 92       	push	r0
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	0f 92       	push	r0
     9f8:	11 24       	eor	r1, r1
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
     a12:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     a16:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     a1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a22:	c9 01       	movw	r24, r18
     a24:	03 2e       	mov	r0, r19
     a26:	00 0c       	add	r0, r0
     a28:	aa 0b       	sbc	r26, r26
     a2a:	bb 0b       	sbc	r27, r27
     a2c:	dc 01       	movw	r26, r24
     a2e:	99 27       	eor	r25, r25
     a30:	88 27       	eor	r24, r24
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	84 2b       	or	r24, r20
     a38:	95 2b       	or	r25, r21
     a3a:	a6 2b       	or	r26, r22
     a3c:	b7 2b       	or	r27, r23
     a3e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     a42:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     a46:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     a4a:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     a4e:	b0 9b       	sbis	0x16, 0	; 22
     a50:	1b c0       	rjmp	.+54     	; 0xa88 <__vector_5+0x98>
     a52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a5a:	c9 01       	movw	r24, r18
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	09 2e       	mov	r0, r25
     a60:	00 0c       	add	r0, r0
     a62:	aa 0b       	sbc	r26, r26
     a64:	bb 0b       	sbc	r27, r27
     a66:	dc 01       	movw	r26, r24
     a68:	99 27       	eor	r25, r25
     a6a:	88 27       	eor	r24, r24
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	84 2b       	or	r24, r20
     a72:	95 2b       	or	r25, r21
     a74:	a6 2b       	or	r26, r22
     a76:	b7 2b       	or	r27, r23
     a78:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     a7c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     a80:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     a84:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     a88:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0x8>
     a8c:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0x9>
     a90:	30 97       	sbiw	r30, 0x00	; 0
     a92:	39 f0       	breq	.+14     	; 0xaa2 <__vector_5+0xb2>
     a94:	64 e0       	ldi	r22, 0x04	; 4
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0x8>
     a9c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0x9>
     aa0:	09 95       	icall
     aa2:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <__vector_10>:
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	ef 93       	push	r30
     ae8:	ff 93       	push	r31
     aea:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     aee:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     af2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     af6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     afa:	c9 01       	movw	r24, r18
     afc:	03 2e       	mov	r0, r19
     afe:	00 0c       	add	r0, r0
     b00:	aa 0b       	sbc	r26, r26
     b02:	bb 0b       	sbc	r27, r27
     b04:	dc 01       	movw	r26, r24
     b06:	99 27       	eor	r25, r25
     b08:	88 27       	eor	r24, r24
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	84 2b       	or	r24, r20
     b10:	95 2b       	or	r25, r21
     b12:	a6 2b       	or	r26, r22
     b14:	b7 2b       	or	r27, r23
     b16:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     b1a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     b1e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     b22:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     b26:	b0 9b       	sbis	0x16, 0	; 22
     b28:	1b c0       	rjmp	.+54     	; 0xb60 <__vector_10+0x98>
     b2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b32:	c9 01       	movw	r24, r18
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	09 2e       	mov	r0, r25
     b38:	00 0c       	add	r0, r0
     b3a:	aa 0b       	sbc	r26, r26
     b3c:	bb 0b       	sbc	r27, r27
     b3e:	dc 01       	movw	r26, r24
     b40:	99 27       	eor	r25, r25
     b42:	88 27       	eor	r24, r24
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	84 2b       	or	r24, r20
     b4a:	95 2b       	or	r25, r21
     b4c:	a6 2b       	or	r26, r22
     b4e:	b7 2b       	or	r27, r23
     b50:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     b54:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     b58:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     b5c:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     b60:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0xa>
     b64:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0xb>
     b68:	30 97       	sbiw	r30, 0x00	; 0
     b6a:	39 f0       	breq	.+14     	; 0xb7a <__vector_10+0xb2>
     b6c:	65 e0       	ldi	r22, 0x05	; 5
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0xa>
     b74:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0xb>
     b78:	09 95       	icall
     b7a:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_11>:
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
     bc2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     bc6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     bca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bd2:	c9 01       	movw	r24, r18
     bd4:	03 2e       	mov	r0, r19
     bd6:	00 0c       	add	r0, r0
     bd8:	aa 0b       	sbc	r26, r26
     bda:	bb 0b       	sbc	r27, r27
     bdc:	dc 01       	movw	r26, r24
     bde:	99 27       	eor	r25, r25
     be0:	88 27       	eor	r24, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	84 2b       	or	r24, r20
     be8:	95 2b       	or	r25, r21
     bea:	a6 2b       	or	r26, r22
     bec:	b7 2b       	or	r27, r23
     bee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     bf2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     bf6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     bfa:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     bfe:	b0 9b       	sbis	0x16, 0	; 22
     c00:	1b c0       	rjmp	.+54     	; 0xc38 <__vector_11+0x98>
     c02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c0a:	c9 01       	movw	r24, r18
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	09 2e       	mov	r0, r25
     c10:	00 0c       	add	r0, r0
     c12:	aa 0b       	sbc	r26, r26
     c14:	bb 0b       	sbc	r27, r27
     c16:	dc 01       	movw	r26, r24
     c18:	99 27       	eor	r25, r25
     c1a:	88 27       	eor	r24, r24
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	84 2b       	or	r24, r20
     c22:	95 2b       	or	r25, r21
     c24:	a6 2b       	or	r26, r22
     c26:	b7 2b       	or	r27, r23
     c28:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     c2c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     c30:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     c34:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     c38:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0xc>
     c3c:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0xd>
     c40:	30 97       	sbiw	r30, 0x00	; 0
     c42:	39 f0       	breq	.+14     	; 0xc52 <__vector_11+0xb2>
     c44:	66 e0       	ldi	r22, 0x06	; 6
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0xc>
     c4c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0xd>
     c50:	09 95       	icall
     c52:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_12>:
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
     c9a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     c9e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     ca2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ca6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     caa:	c9 01       	movw	r24, r18
     cac:	03 2e       	mov	r0, r19
     cae:	00 0c       	add	r0, r0
     cb0:	aa 0b       	sbc	r26, r26
     cb2:	bb 0b       	sbc	r27, r27
     cb4:	dc 01       	movw	r26, r24
     cb6:	99 27       	eor	r25, r25
     cb8:	88 27       	eor	r24, r24
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	84 2b       	or	r24, r20
     cc0:	95 2b       	or	r25, r21
     cc2:	a6 2b       	or	r26, r22
     cc4:	b7 2b       	or	r27, r23
     cc6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     cca:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     cce:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     cd2:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     cd6:	b0 9b       	sbis	0x16, 0	; 22
     cd8:	1b c0       	rjmp	.+54     	; 0xd10 <__vector_12+0x98>
     cda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     cde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ce2:	c9 01       	movw	r24, r18
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	09 2e       	mov	r0, r25
     ce8:	00 0c       	add	r0, r0
     cea:	aa 0b       	sbc	r26, r26
     cec:	bb 0b       	sbc	r27, r27
     cee:	dc 01       	movw	r26, r24
     cf0:	99 27       	eor	r25, r25
     cf2:	88 27       	eor	r24, r24
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	84 2b       	or	r24, r20
     cfa:	95 2b       	or	r25, r21
     cfc:	a6 2b       	or	r26, r22
     cfe:	b7 2b       	or	r27, r23
     d00:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     d04:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     d08:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     d0c:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     d10:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0xe>
     d14:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0xf>
     d18:	30 97       	sbiw	r30, 0x00	; 0
     d1a:	39 f0       	breq	.+14     	; 0xd2a <__vector_12+0xb2>
     d1c:	67 e0       	ldi	r22, 0x07	; 7
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0xe>
     d24:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0xf>
     d28:	09 95       	icall
     d2a:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <__vector_16>:
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	2f 93       	push	r18
     d5c:	3f 93       	push	r19
     d5e:	4f 93       	push	r20
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
     d72:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     d76:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     d7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d82:	c9 01       	movw	r24, r18
     d84:	03 2e       	mov	r0, r19
     d86:	00 0c       	add	r0, r0
     d88:	aa 0b       	sbc	r26, r26
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	dc 01       	movw	r26, r24
     d8e:	99 27       	eor	r25, r25
     d90:	88 27       	eor	r24, r24
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	84 2b       	or	r24, r20
     d98:	95 2b       	or	r25, r21
     d9a:	a6 2b       	or	r26, r22
     d9c:	b7 2b       	or	r27, r23
     d9e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     da2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     da6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     daa:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     dae:	b0 9b       	sbis	0x16, 0	; 22
     db0:	1b c0       	rjmp	.+54     	; 0xde8 <__vector_16+0x98>
     db2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     db6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     dba:	c9 01       	movw	r24, r18
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	09 2e       	mov	r0, r25
     dc0:	00 0c       	add	r0, r0
     dc2:	aa 0b       	sbc	r26, r26
     dc4:	bb 0b       	sbc	r27, r27
     dc6:	dc 01       	movw	r26, r24
     dc8:	99 27       	eor	r25, r25
     dca:	88 27       	eor	r24, r24
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	84 2b       	or	r24, r20
     dd2:	95 2b       	or	r25, r21
     dd4:	a6 2b       	or	r26, r22
     dd6:	b7 2b       	or	r27, r23
     dd8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     ddc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     de0:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     de4:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     de8:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x16>
     dec:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x17>
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	39 f0       	breq	.+14     	; 0xe02 <__vector_16+0xb2>
     df4:	6b e0       	ldi	r22, 0x0B	; 11
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x16>
     dfc:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x17>
     e00:	09 95       	icall
     e02:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_17>:
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
     e4a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     e4e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     e52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e5a:	c9 01       	movw	r24, r18
     e5c:	03 2e       	mov	r0, r19
     e5e:	00 0c       	add	r0, r0
     e60:	aa 0b       	sbc	r26, r26
     e62:	bb 0b       	sbc	r27, r27
     e64:	dc 01       	movw	r26, r24
     e66:	99 27       	eor	r25, r25
     e68:	88 27       	eor	r24, r24
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	84 2b       	or	r24, r20
     e70:	95 2b       	or	r25, r21
     e72:	a6 2b       	or	r26, r22
     e74:	b7 2b       	or	r27, r23
     e76:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     e7a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     e7e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     e82:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     e86:	b0 9b       	sbis	0x16, 0	; 22
     e88:	1b c0       	rjmp	.+54     	; 0xec0 <__vector_17+0x98>
     e8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e92:	c9 01       	movw	r24, r18
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	09 2e       	mov	r0, r25
     e98:	00 0c       	add	r0, r0
     e9a:	aa 0b       	sbc	r26, r26
     e9c:	bb 0b       	sbc	r27, r27
     e9e:	dc 01       	movw	r26, r24
     ea0:	99 27       	eor	r25, r25
     ea2:	88 27       	eor	r24, r24
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	84 2b       	or	r24, r20
     eaa:	95 2b       	or	r25, r21
     eac:	a6 2b       	or	r26, r22
     eae:	b7 2b       	or	r27, r23
     eb0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     eb4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     eb8:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     ebc:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     ec0:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x18>
     ec4:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x19>
     ec8:	30 97       	sbiw	r30, 0x00	; 0
     eca:	39 f0       	breq	.+14     	; 0xeda <__vector_17+0xb2>
     ecc:	6c e0       	ldi	r22, 0x0C	; 12
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x18>
     ed4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x19>
     ed8:	09 95       	icall
     eda:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__vector_18>:
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
     f22:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     f26:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
     f2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f32:	c9 01       	movw	r24, r18
     f34:	03 2e       	mov	r0, r19
     f36:	00 0c       	add	r0, r0
     f38:	aa 0b       	sbc	r26, r26
     f3a:	bb 0b       	sbc	r27, r27
     f3c:	dc 01       	movw	r26, r24
     f3e:	99 27       	eor	r25, r25
     f40:	88 27       	eor	r24, r24
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	84 2b       	or	r24, r20
     f48:	95 2b       	or	r25, r21
     f4a:	a6 2b       	or	r26, r22
     f4c:	b7 2b       	or	r27, r23
     f4e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     f52:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     f56:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     f5a:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     f5e:	b0 9b       	sbis	0x16, 0	; 22
     f60:	1b c0       	rjmp	.+54     	; 0xf98 <__vector_18+0x98>
     f62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f6a:	c9 01       	movw	r24, r18
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	09 2e       	mov	r0, r25
     f70:	00 0c       	add	r0, r0
     f72:	aa 0b       	sbc	r26, r26
     f74:	bb 0b       	sbc	r27, r27
     f76:	dc 01       	movw	r26, r24
     f78:	99 27       	eor	r25, r25
     f7a:	88 27       	eor	r24, r24
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	84 2b       	or	r24, r20
     f82:	95 2b       	or	r25, r21
     f84:	a6 2b       	or	r26, r22
     f86:	b7 2b       	or	r27, r23
     f88:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
     f8c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
     f90:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
     f94:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
     f98:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x1a>
     f9c:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x1b>
     fa0:	30 97       	sbiw	r30, 0x00	; 0
     fa2:	39 f0       	breq	.+14     	; 0xfb2 <__vector_18+0xb2>
     fa4:	6d e0       	ldi	r22, 0x0D	; 13
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x1a>
     fac:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x1b>
     fb0:	09 95       	icall
     fb2:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_19>:
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
     ffa:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
     ffe:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
    1002:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1006:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    100a:	c9 01       	movw	r24, r18
    100c:	03 2e       	mov	r0, r19
    100e:	00 0c       	add	r0, r0
    1010:	aa 0b       	sbc	r26, r26
    1012:	bb 0b       	sbc	r27, r27
    1014:	dc 01       	movw	r26, r24
    1016:	99 27       	eor	r25, r25
    1018:	88 27       	eor	r24, r24
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	84 2b       	or	r24, r20
    1020:	95 2b       	or	r25, r21
    1022:	a6 2b       	or	r26, r22
    1024:	b7 2b       	or	r27, r23
    1026:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    102a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    102e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    1032:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    1036:	b0 9b       	sbis	0x16, 0	; 22
    1038:	1b c0       	rjmp	.+54     	; 0x1070 <__vector_19+0x98>
    103a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    103e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1042:	c9 01       	movw	r24, r18
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	09 2e       	mov	r0, r25
    1048:	00 0c       	add	r0, r0
    104a:	aa 0b       	sbc	r26, r26
    104c:	bb 0b       	sbc	r27, r27
    104e:	dc 01       	movw	r26, r24
    1050:	99 27       	eor	r25, r25
    1052:	88 27       	eor	r24, r24
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	84 2b       	or	r24, r20
    105a:	95 2b       	or	r25, r21
    105c:	a6 2b       	or	r26, r22
    105e:	b7 2b       	or	r27, r23
    1060:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    1064:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    1068:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    106c:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    1070:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x1c>
    1074:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x1d>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	39 f0       	breq	.+14     	; 0x108a <__vector_19+0xb2>
    107c:	6e e0       	ldi	r22, 0x0E	; 14
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x1c>
    1084:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x1d>
    1088:	09 95       	icall
    108a:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <__vector_20>:
    10b0:	1f 92       	push	r1
    10b2:	0f 92       	push	r0
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	0f 92       	push	r0
    10b8:	11 24       	eor	r1, r1
    10ba:	2f 93       	push	r18
    10bc:	3f 93       	push	r19
    10be:	4f 93       	push	r20
    10c0:	5f 93       	push	r21
    10c2:	6f 93       	push	r22
    10c4:	7f 93       	push	r23
    10c6:	8f 93       	push	r24
    10c8:	9f 93       	push	r25
    10ca:	af 93       	push	r26
    10cc:	bf 93       	push	r27
    10ce:	ef 93       	push	r30
    10d0:	ff 93       	push	r31
    10d2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
    10d6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
    10da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    10de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10e2:	c9 01       	movw	r24, r18
    10e4:	03 2e       	mov	r0, r19
    10e6:	00 0c       	add	r0, r0
    10e8:	aa 0b       	sbc	r26, r26
    10ea:	bb 0b       	sbc	r27, r27
    10ec:	dc 01       	movw	r26, r24
    10ee:	99 27       	eor	r25, r25
    10f0:	88 27       	eor	r24, r24
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	84 2b       	or	r24, r20
    10f8:	95 2b       	or	r25, r21
    10fa:	a6 2b       	or	r26, r22
    10fc:	b7 2b       	or	r27, r23
    10fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    1102:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    1106:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    110a:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    110e:	b0 9b       	sbis	0x16, 0	; 22
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <__vector_20+0x98>
    1112:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1116:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    111a:	c9 01       	movw	r24, r18
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	09 2e       	mov	r0, r25
    1120:	00 0c       	add	r0, r0
    1122:	aa 0b       	sbc	r26, r26
    1124:	bb 0b       	sbc	r27, r27
    1126:	dc 01       	movw	r26, r24
    1128:	99 27       	eor	r25, r25
    112a:	88 27       	eor	r24, r24
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	84 2b       	or	r24, r20
    1132:	95 2b       	or	r25, r21
    1134:	a6 2b       	or	r26, r22
    1136:	b7 2b       	or	r27, r23
    1138:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    113c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    1140:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    1144:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    1148:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x1e>
    114c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x1f>
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	39 f0       	breq	.+14     	; 0x1162 <__vector_20+0xb2>
    1154:	6f e0       	ldi	r22, 0x0F	; 15
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x1e>
    115c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x1f>
    1160:	09 95       	icall
    1162:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_21>:
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
    11aa:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
    11ae:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
    11b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    11b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11ba:	c9 01       	movw	r24, r18
    11bc:	03 2e       	mov	r0, r19
    11be:	00 0c       	add	r0, r0
    11c0:	aa 0b       	sbc	r26, r26
    11c2:	bb 0b       	sbc	r27, r27
    11c4:	dc 01       	movw	r26, r24
    11c6:	99 27       	eor	r25, r25
    11c8:	88 27       	eor	r24, r24
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	84 2b       	or	r24, r20
    11d0:	95 2b       	or	r25, r21
    11d2:	a6 2b       	or	r26, r22
    11d4:	b7 2b       	or	r27, r23
    11d6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    11da:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    11de:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    11e2:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    11e6:	b0 9b       	sbis	0x16, 0	; 22
    11e8:	1b c0       	rjmp	.+54     	; 0x1220 <__vector_21+0x98>
    11ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    11ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11f2:	c9 01       	movw	r24, r18
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	09 2e       	mov	r0, r25
    11f8:	00 0c       	add	r0, r0
    11fa:	aa 0b       	sbc	r26, r26
    11fc:	bb 0b       	sbc	r27, r27
    11fe:	dc 01       	movw	r26, r24
    1200:	99 27       	eor	r25, r25
    1202:	88 27       	eor	r24, r24
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	84 2b       	or	r24, r20
    120a:	95 2b       	or	r25, r21
    120c:	a6 2b       	or	r26, r22
    120e:	b7 2b       	or	r27, r23
    1210:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    1214:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    1218:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    121c:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    1220:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x20>
    1224:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x21>
    1228:	30 97       	sbiw	r30, 0x00	; 0
    122a:	39 f0       	breq	.+14     	; 0x123a <__vector_21+0xb2>
    122c:	60 e1       	ldi	r22, 0x10	; 16
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x20>
    1234:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x21>
    1238:	09 95       	icall
    123a:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	bf 91       	pop	r27
    1244:	af 91       	pop	r26
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	7f 91       	pop	r23
    124c:	6f 91       	pop	r22
    124e:	5f 91       	pop	r21
    1250:	4f 91       	pop	r20
    1252:	3f 91       	pop	r19
    1254:	2f 91       	pop	r18
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <__vector_22>:
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <overflows>
    1286:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <overflows+0x1>
    128a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    128e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1292:	c9 01       	movw	r24, r18
    1294:	03 2e       	mov	r0, r19
    1296:	00 0c       	add	r0, r0
    1298:	aa 0b       	sbc	r26, r26
    129a:	bb 0b       	sbc	r27, r27
    129c:	dc 01       	movw	r26, r24
    129e:	99 27       	eor	r25, r25
    12a0:	88 27       	eor	r24, r24
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	84 2b       	or	r24, r20
    12a8:	95 2b       	or	r25, r21
    12aa:	a6 2b       	or	r26, r22
    12ac:	b7 2b       	or	r27, r23
    12ae:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    12b2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    12b6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    12ba:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    12be:	b0 9b       	sbis	0x16, 0	; 22
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <__vector_22+0x98>
    12c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    12c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    12ca:	c9 01       	movw	r24, r18
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	09 2e       	mov	r0, r25
    12d0:	00 0c       	add	r0, r0
    12d2:	aa 0b       	sbc	r26, r26
    12d4:	bb 0b       	sbc	r27, r27
    12d6:	dc 01       	movw	r26, r24
    12d8:	99 27       	eor	r25, r25
    12da:	88 27       	eor	r24, r24
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	84 2b       	or	r24, r20
    12e2:	95 2b       	or	r25, r21
    12e4:	a6 2b       	or	r26, r22
    12e6:	b7 2b       	or	r27, r23
    12e8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timestamp>
    12ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timestamp+0x1>
    12f0:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timestamp+0x2>
    12f4:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timestamp+0x3>
    12f8:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x22>
    12fc:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x23>
    1300:	30 97       	sbiw	r30, 0x00	; 0
    1302:	39 f0       	breq	.+14     	; 0x1312 <__vector_22+0xb2>
    1304:	61 e1       	ldi	r22, 0x11	; 17
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x22>
    130c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x23>
    1310:	09 95       	icall
    1312:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	1f 90       	pop	r1
    1336:	18 95       	reti

00001338 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    1356:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <overflows>
    135a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <overflows+0x1>
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <overflows+0x1>
    1364:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <overflows>
    TIMERSET(timerQ);
    1368:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <timerQ>
    136c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <timerQ+0x1>
    1370:	30 97       	sbiw	r30, 0x00	; 0
    1372:	39 f0       	breq	.+14     	; 0x1382 <__vector_9+0x4a>
    1374:	42 81       	ldd	r20, Z+2	; 0x02
    1376:	53 81       	ldd	r21, Z+3	; 0x03
    1378:	64 81       	ldd	r22, Z+4	; 0x04
    137a:	75 81       	ldd	r23, Z+5	; 0x05
    137c:	86 17       	cp	r24, r22
    137e:	97 07       	cpc	r25, r23
    1380:	a1 f0       	breq	.+40     	; 0x13aa <__vector_9+0x72>
    1382:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1386:	8d 7f       	andi	r24, 0xFD	; 253
    1388:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti
}

TIMER_OVERFLOW_INTERRUPT {
    TIMER_OCLR();
    overflows++;
    TIMERSET(timerQ);
    13aa:	ca 01       	movw	r24, r20
    13ac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    13b0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13b4:	42 1b       	sub	r20, r18
    13b6:	53 0b       	sbc	r21, r19
    13b8:	41 30       	cpi	r20, 0x01	; 1
    13ba:	51 05       	cpc	r21, r1
    13bc:	51 f0       	breq	.+20     	; 0x13d2 <__vector_9+0x9a>
    13be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    13c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    13c6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    13ca:	82 60       	ori	r24, 0x02	; 2
    13cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    13d0:	dd cf       	rjmp	.-70     	; 0x138c <__vector_9+0x54>
    13d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    13d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	f0 cf       	rjmp	.-32     	; 0x13be <__vector_9+0x86>

000013de <__vector_7>:
}

TIMER_COMPARE_INTERRUPT {
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	8f 92       	push	r8
    13ea:	9f 92       	push	r9
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    1418:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <overflows>
    141c:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <overflows+0x1>
    1420:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1424:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1428:	b0 99       	sbic	0x16, 0	; 22
    142a:	98 c0       	rjmp	.+304    	; 0x155c <__vector_7+0x17e>
    142c:	47 01       	movw	r8, r14
    142e:	0f 2c       	mov	r0, r15
    1430:	00 0c       	add	r0, r0
    1432:	aa 08       	sbc	r10, r10
    1434:	bb 08       	sbc	r11, r11
    1436:	54 01       	movw	r10, r8
    1438:	99 24       	eor	r9, r9
    143a:	88 24       	eor	r8, r8
    143c:	a0 e0       	ldi	r26, 0x00	; 0
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	88 2a       	or	r8, r24
    1442:	99 2a       	or	r9, r25
    1444:	aa 2a       	or	r10, r26
    1446:	bb 2a       	or	r11, r27
    1448:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <timerQ>
    144c:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <timerQ+0x1>
    1450:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <msgQ>
    1454:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <msgQ+0x1>
    while (timerQ && (timerQ->baseline - now <= 0))
    1458:	20 97       	sbiw	r28, 0x00	; 0
    145a:	09 f4       	brne	.+2      	; 0x145e <__vector_7+0x80>
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <__vector_7+0xfe>
    145e:	4a 81       	ldd	r20, Y+2	; 0x02
    1460:	5b 81       	ldd	r21, Y+3	; 0x03
    1462:	6c 81       	ldd	r22, Y+4	; 0x04
    1464:	7d 81       	ldd	r23, Y+5	; 0x05
    1466:	8a 01       	movw	r16, r20
    1468:	9b 01       	movw	r18, r22
    146a:	08 19       	sub	r16, r8
    146c:	19 09       	sbc	r17, r9
    146e:	2a 09       	sbc	r18, r10
    1470:	3b 09       	sbc	r19, r11
    1472:	10 16       	cp	r1, r16
    1474:	11 06       	cpc	r1, r17
    1476:	12 06       	cpc	r1, r18
    1478:	13 06       	cpc	r1, r19
    147a:	0c f4       	brge	.+2      	; 0x147e <__vector_7+0xa0>
    147c:	40 c0       	rjmp	.+128    	; 0x14fe <__vector_7+0x120>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    147e:	d8 80       	ld	r13, Y
    1480:	c9 80       	ldd	r12, Y+1	; 0x01
IRQ(IRQ_LCD,             LCD_vect);

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	b9 f1       	breq	.+110    	; 0x14f4 <__vector_7+0x116>
    1486:	0e 81       	ldd	r16, Y+6	; 0x06
    1488:	1f 81       	ldd	r17, Y+7	; 0x07
    148a:	28 85       	ldd	r18, Y+8	; 0x08
    148c:	39 85       	ldd	r19, Y+9	; 0x09
    148e:	fc 01       	movw	r30, r24
    1490:	46 81       	ldd	r20, Z+6	; 0x06
    1492:	57 81       	ldd	r21, Z+7	; 0x07
    1494:	60 85       	ldd	r22, Z+8	; 0x08
    1496:	71 85       	ldd	r23, Z+9	; 0x09
    1498:	04 17       	cp	r16, r20
    149a:	15 07       	cpc	r17, r21
    149c:	26 07       	cpc	r18, r22
    149e:	37 07       	cpc	r19, r23
    14a0:	4c f1       	brlt	.+82     	; 0x14f4 <__vector_7+0x116>
    14a2:	dc 01       	movw	r26, r24
    14a4:	0a c0       	rjmp	.+20     	; 0x14ba <__vector_7+0xdc>
    14a6:	46 81       	ldd	r20, Z+6	; 0x06
    14a8:	57 81       	ldd	r21, Z+7	; 0x07
    14aa:	60 85       	ldd	r22, Z+8	; 0x08
    14ac:	71 85       	ldd	r23, Z+9	; 0x09
    14ae:	04 17       	cp	r16, r20
    14b0:	15 07       	cpc	r17, r21
    14b2:	26 07       	cpc	r18, r22
    14b4:	37 07       	cpc	r19, r23
    14b6:	dc f0       	brlt	.+54     	; 0x14ee <__vector_7+0x110>
    14b8:	df 01       	movw	r26, r30
        prev = q;
        q = q->next;
    14ba:	ed 91       	ld	r30, X+
    14bc:	fc 91       	ld	r31, X
    14be:	11 97       	sbiw	r26, 0x01	; 1
IRQ(IRQ_LCD,             LCD_vect);

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	89 f7       	brne	.-30     	; 0x14a6 <__vector_7+0xc8>
        prev = q;
        q = q->next;
    }
    p->next = q;
    14c4:	19 82       	std	Y+1, r1	; 0x01
    14c6:	18 82       	st	Y, r1
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
    14c8:	cd 93       	st	X+, r28
    14ca:	dc 93       	st	X, r29
    14cc:	38 2f       	mov	r19, r24
    14ce:	29 2f       	mov	r18, r25
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    14d0:	cd 2d       	mov	r28, r13
    14d2:	dc 2d       	mov	r29, r12
    14d4:	83 2f       	mov	r24, r19
    14d6:	92 2f       	mov	r25, r18

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    14d8:	20 97       	sbiw	r28, 0x00	; 0
    14da:	09 f6       	brne	.-126    	; 0x145e <__vector_7+0x80>
    14dc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <timerQ+0x1>
    14e0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <timerQ>
    14e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <msgQ+0x1>
    14e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msgQ>
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <__vector_7+0x136>
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    14ee:	f9 83       	std	Y+1, r31	; 0x01
    14f0:	e8 83       	st	Y, r30
    14f2:	ea cf       	rjmp	.-44     	; 0x14c8 <__vector_7+0xea>
    14f4:	99 83       	std	Y+1, r25	; 0x01
    14f6:	88 83       	st	Y, r24
    14f8:	3c 2f       	mov	r19, r28
    14fa:	2d 2f       	mov	r18, r29
    14fc:	e9 cf       	rjmp	.-46     	; 0x14d0 <__vector_7+0xf2>
    14fe:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <timerQ+0x1>
    1502:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <timerQ>
    1506:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <msgQ+0x1>
    150a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msgQ>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    150e:	e6 16       	cp	r14, r22
    1510:	f7 06       	cpc	r15, r23
    1512:	d9 f1       	breq	.+118    	; 0x158a <__vector_7+0x1ac>
    1514:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    schedule();
    151e:	0e 94 08 03 	call	0x610	; 0x610 <schedule>
}
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	9f 90       	pop	r9
    1550:	8f 90       	pop	r8
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti
}

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    155c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1560:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1564:	47 01       	movw	r8, r14
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	88 1a       	sub	r8, r24
    156a:	98 0a       	sbc	r9, r24
    156c:	09 2c       	mov	r0, r9
    156e:	00 0c       	add	r0, r0
    1570:	aa 08       	sbc	r10, r10
    1572:	bb 08       	sbc	r11, r11
    1574:	d4 01       	movw	r26, r8
    1576:	99 27       	eor	r25, r25
    1578:	88 27       	eor	r24, r24
    157a:	49 01       	movw	r8, r18
    157c:	a1 2c       	mov	r10, r1
    157e:	b1 2c       	mov	r11, r1
    1580:	88 2a       	or	r8, r24
    1582:	99 2a       	or	r9, r25
    1584:	aa 2a       	or	r10, r26
    1586:	bb 2a       	or	r11, r27
    1588:	5f cf       	rjmp	.-322    	; 0x1448 <__vector_7+0x6a>
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    158a:	ca 01       	movw	r24, r20
    158c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1590:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1594:	42 1b       	sub	r20, r18
    1596:	53 0b       	sbc	r21, r19
    1598:	41 30       	cpi	r20, 0x01	; 1
    159a:	51 05       	cpc	r21, r1
    159c:	51 f0       	breq	.+20     	; 0x15b2 <__vector_7+0x1d4>
    159e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    15a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    15a6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    15aa:	82 60       	ori	r24, 0x02	; 2
    15ac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    15b0:	b6 cf       	rjmp	.-148    	; 0x151e <__vector_7+0x140>
    15b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    15b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	f0 cf       	rjmp	.-32     	; 0x159e <__vector_7+0x1c0>

000015be <__divmodhi4>:
    15be:	97 fb       	bst	r25, 7
    15c0:	07 2e       	mov	r0, r23
    15c2:	16 f4       	brtc	.+4      	; 0x15c8 <__divmodhi4+0xa>
    15c4:	00 94       	com	r0
    15c6:	07 d0       	rcall	.+14     	; 0x15d6 <__divmodhi4_neg1>
    15c8:	77 fd       	sbrc	r23, 7
    15ca:	09 d0       	rcall	.+18     	; 0x15de <__divmodhi4_neg2>
    15cc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodhi4>
    15d0:	07 fc       	sbrc	r0, 7
    15d2:	05 d0       	rcall	.+10     	; 0x15de <__divmodhi4_neg2>
    15d4:	3e f4       	brtc	.+14     	; 0x15e4 <__divmodhi4_exit>

000015d6 <__divmodhi4_neg1>:
    15d6:	90 95       	com	r25
    15d8:	81 95       	neg	r24
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	08 95       	ret

000015de <__divmodhi4_neg2>:
    15de:	70 95       	com	r23
    15e0:	61 95       	neg	r22
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255

000015e4 <__divmodhi4_exit>:
    15e4:	08 95       	ret

000015e6 <__tablejump2__>:
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	05 90       	lpm	r0, Z+
    15ec:	f4 91       	lpm	r31, Z
    15ee:	e0 2d       	mov	r30, r0
    15f0:	09 94       	ijmp

000015f2 <__udivmodhi4>:
    15f2:	aa 1b       	sub	r26, r26
    15f4:	bb 1b       	sub	r27, r27
    15f6:	51 e1       	ldi	r21, 0x11	; 17
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <__udivmodhi4_ep>

000015fa <__udivmodhi4_loop>:
    15fa:	aa 1f       	adc	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	a6 17       	cp	r26, r22
    1600:	b7 07       	cpc	r27, r23
    1602:	10 f0       	brcs	.+4      	; 0x1608 <__udivmodhi4_ep>
    1604:	a6 1b       	sub	r26, r22
    1606:	b7 0b       	sbc	r27, r23

00001608 <__udivmodhi4_ep>:
    1608:	88 1f       	adc	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	5a 95       	dec	r21
    160e:	a9 f7       	brne	.-22     	; 0x15fa <__udivmodhi4_loop>
    1610:	80 95       	com	r24
    1612:	90 95       	com	r25
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	08 95       	ret

0000161a <setjmp>:
    161a:	dc 01       	movw	r26, r24
    161c:	2d 92       	st	X+, r2
    161e:	3d 92       	st	X+, r3
    1620:	4d 92       	st	X+, r4
    1622:	5d 92       	st	X+, r5
    1624:	6d 92       	st	X+, r6
    1626:	7d 92       	st	X+, r7
    1628:	8d 92       	st	X+, r8
    162a:	9d 92       	st	X+, r9
    162c:	ad 92       	st	X+, r10
    162e:	bd 92       	st	X+, r11
    1630:	cd 92       	st	X+, r12
    1632:	dd 92       	st	X+, r13
    1634:	ed 92       	st	X+, r14
    1636:	fd 92       	st	X+, r15
    1638:	0d 93       	st	X+, r16
    163a:	1d 93       	st	X+, r17
    163c:	cd 93       	st	X+, r28
    163e:	dd 93       	st	X+, r29
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	8d b7       	in	r24, 0x3d	; 61
    1646:	8d 93       	st	X+, r24
    1648:	8e b7       	in	r24, 0x3e	; 62
    164a:	8d 93       	st	X+, r24
    164c:	8f b7       	in	r24, 0x3f	; 63
    164e:	8d 93       	st	X+, r24
    1650:	ed 93       	st	X+, r30
    1652:	fd 93       	st	X+, r31
    1654:	88 27       	eor	r24, r24
    1656:	99 27       	eor	r25, r25
    1658:	09 94       	ijmp

0000165a <longjmp>:
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	81 1d       	adc	r24, r1
    1664:	2d 90       	ld	r2, X+
    1666:	3d 90       	ld	r3, X+
    1668:	4d 90       	ld	r4, X+
    166a:	5d 90       	ld	r5, X+
    166c:	6d 90       	ld	r6, X+
    166e:	7d 90       	ld	r7, X+
    1670:	8d 90       	ld	r8, X+
    1672:	9d 90       	ld	r9, X+
    1674:	ad 90       	ld	r10, X+
    1676:	bd 90       	ld	r11, X+
    1678:	cd 90       	ld	r12, X+
    167a:	dd 90       	ld	r13, X+
    167c:	ed 90       	ld	r14, X+
    167e:	fd 90       	ld	r15, X+
    1680:	0d 91       	ld	r16, X+
    1682:	1d 91       	ld	r17, X+
    1684:	cd 91       	ld	r28, X+
    1686:	dd 91       	ld	r29, X+
    1688:	ed 91       	ld	r30, X+
    168a:	fd 91       	ld	r31, X+
    168c:	0d 90       	ld	r0, X+
    168e:	f8 94       	cli
    1690:	fe bf       	out	0x3e, r31	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	ed bf       	out	0x3d, r30	; 61
    1696:	ed 91       	ld	r30, X+
    1698:	fd 91       	ld	r31, X+
    169a:	09 94       	ijmp

0000169c <_exit>:
    169c:	f8 94       	cli

0000169e <__stop_program>:
    169e:	ff cf       	rjmp	.-2      	; 0x169e <__stop_program>
