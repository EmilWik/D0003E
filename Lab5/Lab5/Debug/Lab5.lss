
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000023a6  0000243a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000363  0080013c  0080013c  00002476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032b0  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001369  00000000  00000000  00005a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001760  00000000  00000000  00006d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d10  00000000  00000000  000084fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fa  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031b6  00000000  00000000  00009c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000cdbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__vector_1>
       8:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__vector_2>
       c:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__vector_3>
      10:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_4>
      14:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_9>
      28:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_10>
      2c:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__vector_11>
      30:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_12>
      34:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_13>
      38:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_14>
      3c:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_15>
      40:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_16>
      44:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_17>
      48:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_18>
      4c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__vector_19>
      50:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__vector_20>
      54:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_21>
      58:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_22>
      5c:	03 02       	muls	r16, r19
      5e:	23 02       	muls	r18, r19
      60:	32 02       	muls	r19, r18
      62:	5f 02       	muls	r21, r31
      64:	84 02       	muls	r24, r20
      66:	a6 02       	muls	r26, r22
      68:	cd 02       	muls	r28, r29
      6a:	03 03       	mulsu	r16, r19
      6c:	c8 01       	movw	r24, r16
      6e:	87 01       	movw	r16, r14

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 ea       	ldi	r30, 0xA6	; 166
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 33       	cpi	r26, 0x3C	; 60
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	ac e3       	ldi	r26, 0x3C	; 60
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 39       	cpi	r26, 0x9F	; 159
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <main>
      a6:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <removeCarFromBridge>:
	int carsOnBridge;
} Bridge;



void removeCarFromBridge(Bridge *self){
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	fc 01       	movw	r30, r24
	--(self->carsOnBridge);
      bc:	c6 80       	ldd	r12, Z+6	; 0x06
      be:	d7 80       	ldd	r13, Z+7	; 0x07
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	c8 1a       	sub	r12, r24
      c4:	d1 08       	sbc	r13, r1
      c6:	d7 82       	std	Z+7, r13	; 0x07
      c8:	c6 82       	std	Z+6, r12	; 0x06
	ASYNC(self->gui, carsOnBridge, self->carsOnBridge);
      ca:	04 81       	ldd	r16, Z+4	; 0x04
      cc:	15 81       	ldd	r17, Z+5	; 0x05
      ce:	8b e6       	ldi	r24, 0x6B	; 107
      d0:	e8 2e       	mov	r14, r24
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	f8 2e       	mov	r15, r24
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	a9 01       	movw	r20, r18
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	cb 01       	movw	r24, r22
      e2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
      e6:	1f 91       	pop	r17
      e8:	0f 91       	pop	r16
      ea:	ff 90       	pop	r15
      ec:	ef 90       	pop	r14
      ee:	df 90       	pop	r13
      f0:	cf 90       	pop	r12
      f2:	08 95       	ret

000000f4 <addCarToBridge>:


void addCarToBridge(Bridge *self){
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	ec 01       	movw	r28, r24
	++(self->carsOnBridge);
     106:	ce 80       	ldd	r12, Y+6	; 0x06
     108:	df 80       	ldd	r13, Y+7	; 0x07
     10a:	8f ef       	ldi	r24, 0xFF	; 255
     10c:	c8 1a       	sub	r12, r24
     10e:	d8 0a       	sbc	r13, r24
     110:	df 82       	std	Y+7, r13	; 0x07
     112:	ce 82       	std	Y+6, r12	; 0x06
	ASYNC(self->gui, carsOnBridge, self->carsOnBridge);
     114:	0c 81       	ldd	r16, Y+4	; 0x04
     116:	1d 81       	ldd	r17, Y+5	; 0x05
     118:	8b e6       	ldi	r24, 0x6B	; 107
     11a:	e8 2e       	mov	r14, r24
     11c:	83 e0       	ldi	r24, 0x03	; 3
     11e:	f8 2e       	mov	r15, r24
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	a9 01       	movw	r20, r18
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	cb 01       	movw	r24, r22
     12c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
	
	
	#define TRAVEL_TIME 5
	
	AFTER(SEC(TRAVEL_TIME), self, removeCarFromBridge, NULL);
     130:	c1 2c       	mov	r12, r1
     132:	d1 2c       	mov	r13, r1
     134:	97 e5       	ldi	r25, 0x57	; 87
     136:	e9 2e       	mov	r14, r25
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	f9 2e       	mov	r15, r25
     13c:	8e 01       	movw	r16, r28
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	a9 01       	movw	r20, r18
     144:	6a e5       	ldi	r22, 0x5A	; 90
     146:	72 e6       	ldi	r23, 0x62	; 98
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	1f 91       	pop	r17
     156:	0f 91       	pop	r16
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	df 90       	pop	r13
     15e:	cf 90       	pop	r12
     160:	08 95       	ret

00000162 <updateGUI>:


enum Direction{ North, South};


void updateGUI(CarQueue *self){
     162:	cf 92       	push	r12
     164:	df 92       	push	r13
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	fc 01       	movw	r30, r24
	
	switch(self->dirr){
     170:	82 85       	ldd	r24, Z+10	; 0x0a
     172:	93 85       	ldd	r25, Z+11	; 0x0b
     174:	00 97       	sbiw	r24, 0x00	; 0
     176:	c9 f0       	breq	.+50     	; 0x1aa <updateGUI+0x48>
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	81 f4       	brne	.+32     	; 0x19c <updateGUI+0x3a>
		case North:
			ASYNC(self->gui, carsInNorthQueue, self->carsInQueue);
		break;
		
		case South:
			ASYNC(self->gui, carsInSouthQueue, self->carsInQueue);
     17c:	c0 84       	ldd	r12, Z+8	; 0x08
     17e:	d1 84       	ldd	r13, Z+9	; 0x09
     180:	06 81       	ldd	r16, Z+6	; 0x06
     182:	17 81       	ldd	r17, Z+7	; 0x07
     184:	83 e7       	ldi	r24, 0x73	; 115
     186:	e8 2e       	mov	r14, r24
     188:	83 e0       	ldi	r24, 0x03	; 3
     18a:	f8 2e       	mov	r15, r24
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	a9 01       	movw	r20, r18
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	cb 01       	movw	r24, r22
     198:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
		break;
		
		default: /* ¯\_(?)_/¯ */ break;
	}
}
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	df 90       	pop	r13
     1a6:	cf 90       	pop	r12
     1a8:	08 95       	ret

void updateGUI(CarQueue *self){
	
	switch(self->dirr){
		case North:
			ASYNC(self->gui, carsInNorthQueue, self->carsInQueue);
     1aa:	c0 84       	ldd	r12, Z+8	; 0x08
     1ac:	d1 84       	ldd	r13, Z+9	; 0x09
     1ae:	06 81       	ldd	r16, Z+6	; 0x06
     1b0:	17 81       	ldd	r17, Z+7	; 0x07
     1b2:	9f e6       	ldi	r25, 0x6F	; 111
     1b4:	e9 2e       	mov	r14, r25
     1b6:	93 e0       	ldi	r25, 0x03	; 3
     1b8:	f9 2e       	mov	r15, r25
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	a9 01       	movw	r20, r18
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	cb 01       	movw	r24, r22
     1c6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
			ASYNC(self->gui, carsInSouthQueue, self->carsInQueue);
		break;
		
		default: /* ¯\_(?)_/¯ */ break;
	}
}
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	df 90       	pop	r13
     1d4:	cf 90       	pop	r12
     1d6:	08 95       	ret

000001d8 <addCar>:


void addCar(CarQueue *self){
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
	++(self->carsInQueue);
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 85       	ldd	r18, Z+8	; 0x08
     1e8:	31 85       	ldd	r19, Z+9	; 0x09
     1ea:	2f 5f       	subi	r18, 0xFF	; 255
     1ec:	3f 4f       	sbci	r19, 0xFF	; 255
     1ee:	31 87       	std	Z+9, r19	; 0x09
     1f0:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateGUI, NULL);
     1f2:	c1 2c       	mov	r12, r1
     1f4:	d1 2c       	mov	r13, r1
     1f6:	21 eb       	ldi	r18, 0xB1	; 177
     1f8:	e2 2e       	mov	r14, r18
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	f2 2e       	mov	r15, r18
     1fe:	8c 01       	movw	r16, r24
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	a9 01       	movw	r20, r18
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	cb 01       	movw	r24, r22
     20c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	08 95       	ret

0000021e <sendCar>:



void sendCar(CarQueue *self){
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	ec 01       	movw	r28, r24
	if(self->carsInQueue > 0){
     230:	88 85       	ldd	r24, Y+8	; 0x08
     232:	99 85       	ldd	r25, Y+9	; 0x09
     234:	18 16       	cp	r1, r24
     236:	19 06       	cpc	r1, r25
     238:	9c f4       	brge	.+38     	; 0x260 <sendCar+0x42>
		--(self->carsInQueue);
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	99 87       	std	Y+9, r25	; 0x09
     23e:	88 87       	std	Y+8, r24	; 0x08
		ASYNC(self->bridge, addCarToBridge, NULL);
     240:	0c 81       	ldd	r16, Y+4	; 0x04
     242:	1d 81       	ldd	r17, Y+5	; 0x05
     244:	c1 2c       	mov	r12, r1
     246:	d1 2c       	mov	r13, r1
     248:	9a e7       	ldi	r25, 0x7A	; 122
     24a:	e9 2e       	mov	r14, r25
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	f9 2e       	mov	r15, r25
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	a9 01       	movw	r20, r18
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	cb 01       	movw	r24, r22
     25c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
	}
	
	ASYNC(self, updateGUI, NULL);
     260:	c1 2c       	mov	r12, r1
     262:	d1 2c       	mov	r13, r1
     264:	81 eb       	ldi	r24, 0xB1	; 177
     266:	e8 2e       	mov	r14, r24
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	f8 2e       	mov	r15, r24
     26c:	8e 01       	movw	r16, r28
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a9 01       	movw	r20, r18
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	cb 01       	movw	r24, r22
     27a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	08 95       	ret

00000290 <writeChar>:
	Object super;
} GUI;



static void writeChar(char c, int pos){
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	e8 2f       	mov	r30, r24
	int column = pos / 2;						// Determines which pair of digits to write to
     29e:	db 01       	movw	r26, r22
     2a0:	77 fd       	sbrc	r23, 7
     2a2:	74 c0       	rjmp	.+232    	; 0x38c <writeChar+0xfc>
     2a4:	b5 95       	asr	r27
     2a6:	a7 95       	ror	r26
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
     2a8:	61 70       	andi	r22, 0x01	; 1
     2aa:	70 78       	andi	r23, 0x80	; 128
     2ac:	77 fd       	sbrc	r23, 7
     2ae:	67 c0       	rjmp	.+206    	; 0x37e <writeChar+0xee>
     2b0:	66 0f       	add	r22, r22
     2b2:	77 1f       	adc	r23, r23
     2b4:	66 0f       	add	r22, r22
     2b6:	77 1f       	adc	r23, r23
	#define LEGS  _SFR_MEM8(0xF6 + column)		// LCDDR10 - Lower middle of digit
	#define FEET  _SFR_MEM8(0xFB + column)		// LCDDR15 - Bottom of digit
	

	// Clears position
	HEAD  &= (0x0F0 >> offset);
     2b8:	ad 01       	movw	r20, r26
     2ba:	44 51       	subi	r20, 0x14	; 20
     2bc:	5f 4f       	sbci	r21, 0xFF	; 255
     2be:	ea 01       	movw	r28, r20
     2c0:	88 81       	ld	r24, Y
     2c2:	20 ef       	ldi	r18, 0xF0	; 240
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	06 2e       	mov	r0, r22
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <writeChar+0x3e>
     2ca:	35 95       	asr	r19
     2cc:	27 95       	ror	r18
     2ce:	0a 94       	dec	r0
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <writeChar+0x3a>
     2d2:	82 23       	and	r24, r18
     2d4:	88 83       	st	Y, r24
	CHEST &= (0x0F0 >> offset);
     2d6:	7d 01       	movw	r14, r26
     2d8:	d1 ef       	ldi	r29, 0xF1	; 241
     2da:	ed 0e       	add	r14, r29
     2dc:	f1 1c       	adc	r15, r1
     2de:	e7 01       	movw	r28, r14
     2e0:	88 81       	ld	r24, Y
     2e2:	82 23       	and	r24, r18
     2e4:	88 83       	st	Y, r24
	LEGS  &= (0x0F0 >> offset);
     2e6:	25 96       	adiw	r28, 0x05	; 5
     2e8:	88 81       	ld	r24, Y
     2ea:	82 23       	and	r24, r18
     2ec:	88 83       	st	Y, r24
	FEET  &= (0x0F0 >> offset);
     2ee:	a5 50       	subi	r26, 0x05	; 5
     2f0:	bf 4f       	sbci	r27, 0xFF	; 255
     2f2:	8c 91       	ld	r24, X
     2f4:	28 23       	and	r18, r24
     2f6:	2c 93       	st	X, r18
	
	switch (c){
     2f8:	0e 2f       	mov	r16, r30
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	f8 01       	movw	r30, r16
     2fe:	f0 97       	sbiw	r30, 0x30	; 48
     300:	ea 30       	cpi	r30, 0x0A	; 10
     302:	f1 05       	cpc	r31, r1
     304:	a8 f5       	brcc	.+106    	; 0x370 <writeChar+0xe0>
     306:	e2 5d       	subi	r30, 0xD2	; 210
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__tablejump2__>
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
		FEET  += (1 << (0 + offset));
		break;
		
		case '9':
		HEAD  += (1 << (0 + offset));
     30e:	da 01       	movw	r26, r20
     310:	ec 91       	ld	r30, X
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9c 01       	movw	r18, r24
     318:	06 2e       	mov	r0, r22
     31a:	01 c0       	rjmp	.+2      	; 0x31e <writeChar+0x8e>
     31c:	22 0f       	add	r18, r18
     31e:	0a 94       	dec	r0
     320:	ea f7       	brpl	.-6      	; 0x31c <writeChar+0x8c>
     322:	3e 2f       	mov	r19, r30
     324:	32 0f       	add	r19, r18
     326:	3c 93       	st	X, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     328:	f7 01       	movw	r30, r14
     32a:	40 81       	ld	r20, Z
     32c:	fb 01       	movw	r30, r22
     32e:	32 96       	adiw	r30, 0x02	; 2
     330:	8c 01       	movw	r16, r24
     332:	02 c0       	rjmp	.+4      	; 0x338 <writeChar+0xa8>
     334:	00 0f       	add	r16, r16
     336:	11 1f       	adc	r17, r17
     338:	ea 95       	dec	r30
     33a:	e2 f7       	brpl	.-8      	; 0x334 <writeChar+0xa4>
     33c:	32 2f       	mov	r19, r18
     33e:	30 2b       	or	r19, r16
     340:	34 0f       	add	r19, r20
     342:	d7 01       	movw	r26, r14
     344:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     346:	38 81       	ld	r19, Y
     348:	ab 01       	movw	r20, r22
     34a:	4f 5f       	subi	r20, 0xFF	; 255
     34c:	5f 4f       	sbci	r21, 0xFF	; 255
     34e:	fc 01       	movw	r30, r24
     350:	02 c0       	rjmp	.+4      	; 0x356 <writeChar+0xc6>
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	4a 95       	dec	r20
     358:	e2 f7       	brpl	.-8      	; 0x352 <writeChar+0xc2>
     35a:	af 01       	movw	r20, r30
     35c:	6d 5f       	subi	r22, 0xFD	; 253
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	01 c0       	rjmp	.+2      	; 0x364 <writeChar+0xd4>
     362:	88 0f       	add	r24, r24
     364:	6a 95       	dec	r22
     366:	ea f7       	brpl	.-6      	; 0x362 <writeChar+0xd2>
     368:	84 2b       	or	r24, r20
     36a:	82 2b       	or	r24, r18
     36c:	83 0f       	add	r24, r19
     36e:	88 83       	st	Y, r24
		break;
		
		default:
		break;
	}
}
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	08 95       	ret



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
	int offset = 4*((pos) % 2);					// Determines which of the 2 digits to write to
     37e:	61 50       	subi	r22, 0x01	; 1
     380:	71 09       	sbc	r23, r1
     382:	6e 6f       	ori	r22, 0xFE	; 254
     384:	7f 6f       	ori	r23, 0xFF	; 255
     386:	6f 5f       	subi	r22, 0xFF	; 255
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	92 cf       	rjmp	.-220    	; 0x2b0 <writeChar+0x20>
} GUI;



static void writeChar(char c, int pos){
	int column = pos / 2;						// Determines which pair of digits to write to
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	8a cf       	rjmp	.-236    	; 0x2a4 <writeChar+0x14>
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset));
		break;
		
		case '8':
		HEAD  += (1 << (0 + offset));
     390:	fa 01       	movw	r30, r20
     392:	10 81       	ld	r17, Z
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	9c 01       	movw	r18, r24
     39a:	06 2e       	mov	r0, r22
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <writeChar+0x110>
     39e:	22 0f       	add	r18, r18
     3a0:	0a 94       	dec	r0
     3a2:	ea f7       	brpl	.-6      	; 0x39e <writeChar+0x10e>
     3a4:	31 2f       	mov	r19, r17
     3a6:	32 0f       	add	r19, r18
     3a8:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     3aa:	f7 01       	movw	r30, r14
     3ac:	30 81       	ld	r19, Z
     3ae:	ab 01       	movw	r20, r22
     3b0:	4e 5f       	subi	r20, 0xFE	; 254
     3b2:	5f 4f       	sbci	r21, 0xFF	; 255
     3b4:	8c 01       	movw	r16, r24
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <writeChar+0x12a>
     3b8:	00 0f       	add	r16, r16
     3ba:	4a 95       	dec	r20
     3bc:	ea f7       	brpl	.-6      	; 0x3b8 <writeChar+0x128>
     3be:	40 2f       	mov	r20, r16
     3c0:	42 2b       	or	r20, r18
     3c2:	34 0f       	add	r19, r20
     3c4:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     3c6:	38 81       	ld	r19, Y
     3c8:	ab 01       	movw	r20, r22
     3ca:	4f 5f       	subi	r20, 0xFF	; 255
     3cc:	5f 4f       	sbci	r21, 0xFF	; 255
     3ce:	fc 01       	movw	r30, r24
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <writeChar+0x146>
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	4a 95       	dec	r20
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <writeChar+0x142>
     3da:	af 01       	movw	r20, r30
     3dc:	40 2b       	or	r20, r16
     3de:	42 2b       	or	r20, r18
     3e0:	6d 5f       	subi	r22, 0xFD	; 253
     3e2:	7f 4f       	sbci	r23, 0xFF	; 255
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <writeChar+0x158>
     3e6:	88 0f       	add	r24, r24
     3e8:	6a 95       	dec	r22
     3ea:	ea f7       	brpl	.-6      	; 0x3e6 <writeChar+0x156>
     3ec:	84 2b       	or	r24, r20
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
		CHEST += (1 << (0 + offset));
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     3ee:	83 0f       	add	r24, r19
     3f0:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     3f2:	8c 91       	ld	r24, X
     3f4:	28 0f       	add	r18, r24
     3f6:	2c 93       	st	X, r18
		break;
		
		default:
		break;
	}
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	08 95       	ret
	LEGS  &= (0x0F0 >> offset);
	FEET  &= (0x0F0 >> offset);
	
	switch (c){
		case '0':
		HEAD  += (1 << (0 + offset));
     406:	fa 01       	movw	r30, r20
     408:	10 81       	ld	r17, Z
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	9c 01       	movw	r18, r24
     410:	06 2e       	mov	r0, r22
     412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	22 0f       	add	r18, r18
     416:	0a 94       	dec	r0
     418:	ea f7       	brpl	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41a:	31 2f       	mov	r19, r17
     41c:	32 0f       	add	r19, r18
     41e:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     420:	f7 01       	movw	r30, r14
     422:	30 81       	ld	r19, Z
     424:	6e 5f       	subi	r22, 0xFE	; 254
     426:	7f 4f       	sbci	r23, 0xFF	; 255
     428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	88 0f       	add	r24, r24
     42c:	6a 95       	dec	r22
     42e:	ea f7       	brpl	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     430:	82 2b       	or	r24, r18
     432:	93 2f       	mov	r25, r19
     434:	98 0f       	add	r25, r24
     436:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset)) | (1 << (2 + offset));
     438:	98 81       	ld	r25, Y
     43a:	89 0f       	add	r24, r25
     43c:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     43e:	8c 91       	ld	r24, X
     440:	28 0f       	add	r18, r24
     442:	2c 93       	st	X, r18
		break;
     444:	95 cf       	rjmp	.-214    	; 0x370 <writeChar+0xe0>
		
		case '1':
		CHEST += (1 << (0 + offset));
     446:	d7 01       	movw	r26, r14
     448:	2c 91       	ld	r18, X
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	01 c0       	rjmp	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     450:	88 0f       	add	r24, r24
     452:	6a 95       	dec	r22
     454:	ea f7       	brpl	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     456:	92 2f       	mov	r25, r18
     458:	98 0f       	add	r25, r24
     45a:	9c 93       	st	X, r25
		LEGS  += (1 << (0 + offset));
     45c:	98 81       	ld	r25, Y
     45e:	89 0f       	add	r24, r25
     460:	88 83       	st	Y, r24
		break;
     462:	86 cf       	rjmp	.-244    	; 0x370 <writeChar+0xe0>
		
		case '2':
		HEAD  += (1 << (0 + offset));
     464:	fa 01       	movw	r30, r20
     466:	10 81       	ld	r17, Z
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9c 01       	movw	r18, r24
     46e:	06 2e       	mov	r0, r22
     470:	01 c0       	rjmp	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	22 0f       	add	r18, r18
     474:	0a 94       	dec	r0
     476:	ea f7       	brpl	.-6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     478:	31 2f       	mov	r19, r17
     47a:	32 0f       	add	r19, r18
     47c:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     47e:	f7 01       	movw	r30, r14
     480:	30 81       	ld	r19, Z
     482:	32 0f       	add	r19, r18
     484:	30 83       	st	Z, r19
		LEGS  += (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     486:	38 81       	ld	r19, Y
     488:	ab 01       	movw	r20, r22
     48a:	4f 5f       	subi	r20, 0xFF	; 255
     48c:	5f 4f       	sbci	r21, 0xFF	; 255
     48e:	fc 01       	movw	r30, r24
     490:	04 2e       	mov	r0, r20
     492:	01 c0       	rjmp	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     494:	ee 0f       	add	r30, r30
     496:	0a 94       	dec	r0
     498:	ea f7       	brpl	.-6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     49a:	4f 5f       	subi	r20, 0xFF	; 255
     49c:	5f 4f       	sbci	r21, 0xFF	; 255
     49e:	8c 01       	movw	r16, r24
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a2:	00 0f       	add	r16, r16
     4a4:	11 1f       	adc	r17, r17
     4a6:	4a 95       	dec	r20
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4aa:	a8 01       	movw	r20, r16
     4ac:	4e 2b       	or	r20, r30
     4ae:	6d 5f       	subi	r22, 0xFD	; 253
     4b0:	7f 4f       	sbci	r23, 0xFF	; 255
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b4:	88 0f       	add	r24, r24
     4b6:	6a 95       	dec	r22
     4b8:	ea f7       	brpl	.-6      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4ba:	84 2b       	or	r24, r20
     4bc:	98 cf       	rjmp	.-208    	; 0x3ee <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '3':
		HEAD  += (1 << (0 + offset));
     4be:	fa 01       	movw	r30, r20
     4c0:	10 81       	ld	r17, Z
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9c 01       	movw	r18, r24
     4c8:	06 2e       	mov	r0, r22
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	22 0f       	add	r18, r18
     4ce:	0a 94       	dec	r0
     4d0:	ea f7       	brpl	.-6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4d2:	31 2f       	mov	r19, r17
     4d4:	32 0f       	add	r19, r18
     4d6:	30 83       	st	Z, r19
		CHEST += (1 << (0 + offset));
     4d8:	f7 01       	movw	r30, r14
     4da:	30 81       	ld	r19, Z
     4dc:	32 0f       	add	r19, r18
     4de:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     4e0:	38 81       	ld	r19, Y
     4e2:	ab 01       	movw	r20, r22
     4e4:	4f 5f       	subi	r20, 0xFF	; 255
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	8c 01       	movw	r16, r24
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ec:	00 0f       	add	r16, r16
     4ee:	11 1f       	adc	r17, r17
     4f0:	4a 95       	dec	r20
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4f4:	a8 01       	movw	r20, r16
     4f6:	6d 5f       	subi	r22, 0xFD	; 253
     4f8:	7f 4f       	sbci	r23, 0xFF	; 255
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	88 0f       	add	r24, r24
     4fe:	6a 95       	dec	r22
     500:	ea f7       	brpl	.-6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     502:	84 2b       	or	r24, r20
     504:	82 2b       	or	r24, r18
     506:	73 cf       	rjmp	.-282    	; 0x3ee <writeChar+0x15e>
		FEET  += (1 << (0 + offset));
		break;
		
		case '4':
		CHEST += (1 << (0 + offset)) | (1 << (2 + offset));
     508:	d7 01       	movw	r26, r14
     50a:	4c 91       	ld	r20, X
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9c 01       	movw	r18, r24
     512:	06 2e       	mov	r0, r22
     514:	01 c0       	rjmp	.+2      	; 0x518 <__stack+0x19>
     516:	22 0f       	add	r18, r18
     518:	0a 94       	dec	r0
     51a:	ea f7       	brpl	.-6      	; 0x516 <__stack+0x17>
     51c:	fb 01       	movw	r30, r22
     51e:	32 96       	adiw	r30, 0x02	; 2
     520:	8c 01       	movw	r16, r24
     522:	02 c0       	rjmp	.+4      	; 0x528 <__stack+0x29>
     524:	00 0f       	add	r16, r16
     526:	11 1f       	adc	r17, r17
     528:	ea 95       	dec	r30
     52a:	e2 f7       	brpl	.-8      	; 0x524 <__stack+0x25>
     52c:	32 2f       	mov	r19, r18
     52e:	30 2b       	or	r19, r16
     530:	34 0f       	add	r19, r20
     532:	3c 93       	st	X, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     534:	38 81       	ld	r19, Y
     536:	ab 01       	movw	r20, r22
     538:	4f 5f       	subi	r20, 0xFF	; 255
     53a:	5f 4f       	sbci	r21, 0xFF	; 255
     53c:	dc 01       	movw	r26, r24
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__stack+0x45>
     540:	aa 0f       	add	r26, r26
     542:	bb 1f       	adc	r27, r27
     544:	4a 95       	dec	r20
     546:	e2 f7       	brpl	.-8      	; 0x540 <__stack+0x41>
     548:	ad 01       	movw	r20, r26
     54a:	08 cf       	rjmp	.-496    	; 0x35c <writeChar+0xcc>
		break;
		
		case '5':
		HEAD  += (1 << (0 + offset));
     54c:	fa 01       	movw	r30, r20
     54e:	10 81       	ld	r17, Z
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9c 01       	movw	r18, r24
     556:	06 2e       	mov	r0, r22
     558:	01 c0       	rjmp	.+2      	; 0x55c <__stack+0x5d>
     55a:	22 0f       	add	r18, r18
     55c:	0a 94       	dec	r0
     55e:	ea f7       	brpl	.-6      	; 0x55a <__stack+0x5b>
     560:	31 2f       	mov	r19, r17
     562:	32 0f       	add	r19, r18
     564:	30 83       	st	Z, r19
		CHEST += (1 << (2 + offset));
     566:	f7 01       	movw	r30, r14
     568:	30 81       	ld	r19, Z
     56a:	ab 01       	movw	r20, r22
     56c:	4e 5f       	subi	r20, 0xFE	; 254
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	8c 01       	movw	r16, r24
     572:	02 c0       	rjmp	.+4      	; 0x578 <__stack+0x79>
     574:	00 0f       	add	r16, r16
     576:	11 1f       	adc	r17, r17
     578:	4a 95       	dec	r20
     57a:	e2 f7       	brpl	.-8      	; 0x574 <__stack+0x75>
     57c:	a8 01       	movw	r20, r16
     57e:	43 0f       	add	r20, r19
     580:	40 83       	st	Z, r20
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (3 + offset));
     582:	38 81       	ld	r19, Y
     584:	ab 01       	movw	r20, r22
     586:	4f 5f       	subi	r20, 0xFF	; 255
     588:	5f 4f       	sbci	r21, 0xFF	; 255
     58a:	fc 01       	movw	r30, r24
     58c:	02 c0       	rjmp	.+4      	; 0x592 <__stack+0x93>
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	4a 95       	dec	r20
     594:	e2 f7       	brpl	.-8      	; 0x58e <__stack+0x8f>
     596:	af 01       	movw	r20, r30
     598:	ae cf       	rjmp	.-164    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		FEET  += (1 << (0 + offset));
		break;
		
		case '6':
		HEAD  += (1 << (0 + offset));
     59a:	fa 01       	movw	r30, r20
     59c:	20 81       	ld	r18, Z
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	8c 01       	movw	r16, r24
     5a4:	06 2e       	mov	r0, r22
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <__stack+0xab>
     5a8:	00 0f       	add	r16, r16
     5aa:	0a 94       	dec	r0
     5ac:	ea f7       	brpl	.-6      	; 0x5a8 <__stack+0xa9>
     5ae:	20 0f       	add	r18, r16
     5b0:	20 83       	st	Z, r18
		CHEST += (1 << (2 + offset));
     5b2:	f7 01       	movw	r30, r14
     5b4:	40 81       	ld	r20, Z
     5b6:	9b 01       	movw	r18, r22
     5b8:	2e 5f       	subi	r18, 0xFE	; 254
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	fc 01       	movw	r30, r24
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__stack+0xc5>
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	2a 95       	dec	r18
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <__stack+0xc1>
     5c8:	9f 01       	movw	r18, r30
     5ca:	34 2f       	mov	r19, r20
     5cc:	32 0f       	add	r19, r18
     5ce:	f7 01       	movw	r30, r14
     5d0:	30 83       	st	Z, r19
		LEGS  += (1 << (0 + offset)) | (1 << (1 + offset)) | (1 << (2 + offset)) | (1 << (3 + offset));
     5d2:	38 81       	ld	r19, Y
     5d4:	ab 01       	movw	r20, r22
     5d6:	4f 5f       	subi	r20, 0xFF	; 255
     5d8:	5f 4f       	sbci	r21, 0xFF	; 255
     5da:	fc 01       	movw	r30, r24
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__stack+0xe3>
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	4a 95       	dec	r20
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <__stack+0xdf>
     5e6:	2e 2b       	or	r18, r30
     5e8:	20 2b       	or	r18, r16
     5ea:	6d 5f       	subi	r22, 0xFD	; 253
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <__stack+0xf3>
     5f0:	88 0f       	add	r24, r24
     5f2:	6a 95       	dec	r22
     5f4:	ea f7       	brpl	.-6      	; 0x5f0 <__stack+0xf1>
     5f6:	82 2b       	or	r24, r18
     5f8:	83 0f       	add	r24, r19
     5fa:	88 83       	st	Y, r24
		FEET  += (1 << (0 + offset));
     5fc:	8c 91       	ld	r24, X
     5fe:	e0 2f       	mov	r30, r16
     600:	e8 0f       	add	r30, r24
     602:	ec 93       	st	X, r30
		break;
     604:	b5 ce       	rjmp	.-662    	; 0x370 <writeChar+0xe0>
		
		case '7':
		HEAD  += (1 << (0 + offset));
     606:	da 01       	movw	r26, r20
     608:	2c 91       	ld	r18, X
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 c0       	rjmp	.+2      	; 0x612 <__stack+0x113>
     610:	88 0f       	add	r24, r24
     612:	6a 95       	dec	r22
     614:	ea f7       	brpl	.-6      	; 0x610 <__stack+0x111>
     616:	92 2f       	mov	r25, r18
     618:	98 0f       	add	r25, r24
     61a:	9c 93       	st	X, r25
		CHEST += (1 << (0 + offset));
     61c:	f7 01       	movw	r30, r14
     61e:	90 81       	ld	r25, Z
     620:	98 0f       	add	r25, r24
     622:	90 83       	st	Z, r25
		LEGS  += (1 << (0 + offset));
     624:	98 81       	ld	r25, Y
     626:	89 0f       	add	r24, r25
     628:	88 83       	st	Y, r24
		break;
     62a:	a2 ce       	rjmp	.-700    	; 0x370 <writeChar+0xe0>

0000062c <printAt>:
		default:
		break;
	}
}

void printAt(int pos, int num) {
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
     63a:	7b 01       	movw	r14, r22
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     63c:	cb 01       	movw	r24, r22
     63e:	64 e6       	ldi	r22, 0x64	; 100
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__divmodhi4>
     646:	0a e0       	ldi	r16, 0x0A	; 10
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	b8 01       	movw	r22, r16
     64c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__divmodhi4>
     650:	86 2f       	mov	r24, r22
     652:	be 01       	movw	r22, r28
     654:	80 5d       	subi	r24, 0xD0	; 208
     656:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     65a:	21 96       	adiw	r28, 0x01	; 1
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__divmodhi4>
     664:	be 01       	movw	r22, r28
     666:	80 5d       	subi	r24, 0xD0	; 208
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14

void printAt(int pos, int num) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     674:	0c 94 48 01 	jmp	0x290	; 0x290 <writeChar>

00000678 <initLCD>:



void initLCD(){
	// LCD
	CLKPR = 0x80;
     678:	e1 e6       	ldi	r30, 0x61	; 97
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 e8       	ldi	r24, 0x80	; 128
     67e:	80 83       	st	Z, r24
	CLKPR = 0x00;
     680:	10 82       	st	Z, r1

	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     682:	80 ec       	ldi	r24, 0xC0	; 192
     684:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB = (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     688:	87 e3       	ldi	r24, 0x37	; 55
     68a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     694:	8f e0       	ldi	r24, 0x0F	; 15
     696:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>


*/
	// Prints startup chars
//	LCDDR1 = (1 << 2);
	writeChar('0', 0);
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e3       	ldi	r24, 0x30	; 48
     6a0:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 1);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e3       	ldi	r24, 0x30	; 48
     6aa:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 2);
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e3       	ldi	r24, 0x30	; 48
     6b4:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 3);
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e3       	ldi	r24, 0x30	; 48
     6be:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 4);
     6c2:	64 e0       	ldi	r22, 0x04	; 4
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e3       	ldi	r24, 0x30	; 48
     6c8:	0e 94 48 01 	call	0x290	; 0x290 <writeChar>
	writeChar('0', 5);
     6cc:	65 e0       	ldi	r22, 0x05	; 5
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e3       	ldi	r24, 0x30	; 48
     6d2:	0c 94 48 01 	jmp	0x290	; 0x290 <writeChar>

000006d6 <carsOnBridge>:
}



void carsOnBridge(GUI *self, int amount){
	printAt(2, amount);
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0c 94 16 03 	jmp	0x62c	; 0x62c <printAt>

000006de <carsInNorthQueue>:
}


void carsInNorthQueue(GUI *self, int amount){
	printAt(0, amount);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0c 94 16 03 	jmp	0x62c	; 0x62c <printAt>

000006e6 <carsInSouthQueue>:
}

void carsInSouthQueue(GUI *self, int amount){
	printAt(4, amount);
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0c 94 16 03 	jmp	0x62c	; 0x62c <printAt>

000006ee <readInput>:

*/



void readInput(InputHandler *self){
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	5c 01       	movw	r10, r24
	
	char ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     702:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	#define SOUTHBOUND_CAR_ARRIVE	ReceivedByte & (1 << 2)		// 4
	#define SOUTHBOUND_BRIDGE_ENTRY	ReceivedByte & (1 << 3)		// 8


	
	if (NORTHBOUND_CAR_ARRIVE)	{ ASYNC(self->northQueue,  addCar, NULL); }
     706:	c0 fd       	sbrc	r28, 0
     708:	45 c0       	rjmp	.+138    	; 0x794 <readInput+0xa6>
	if (NORTHBOUND_BRIDGE_ENTRY){ ASYNC(self->northQueue, sendCar, NULL); }		
     70a:	c1 fd       	sbrc	r28, 1
     70c:	31 c0       	rjmp	.+98     	; 0x770 <readInput+0x82>
	if (SOUTHBOUND_CAR_ARRIVE)	{ ASYNC(self->southQueue,  addCar, NULL); }
     70e:	c2 fd       	sbrc	r28, 2
     710:	1d c0       	rjmp	.+58     	; 0x74c <readInput+0x5e>
	if (SOUTHBOUND_BRIDGE_ENTRY){ ASYNC(self->southQueue, sendCar, NULL); }
     712:	c3 ff       	sbrs	r28, 3
     714:	11 c0       	rjmp	.+34     	; 0x738 <readInput+0x4a>
     716:	f5 01       	movw	r30, r10
     718:	00 85       	ldd	r16, Z+8	; 0x08
     71a:	11 85       	ldd	r17, Z+9	; 0x09
     71c:	c1 2c       	mov	r12, r1
     71e:	d1 2c       	mov	r13, r1
     720:	8f e0       	ldi	r24, 0x0F	; 15
     722:	e8 2e       	mov	r14, r24
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	f8 2e       	mov	r15, r24
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	a9 01       	movw	r20, r18
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	cb 01       	movw	r24, r22
     734:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
	
}
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	08 95       	ret


	
	if (NORTHBOUND_CAR_ARRIVE)	{ ASYNC(self->northQueue,  addCar, NULL); }
	if (NORTHBOUND_BRIDGE_ENTRY){ ASYNC(self->northQueue, sendCar, NULL); }		
	if (SOUTHBOUND_CAR_ARRIVE)	{ ASYNC(self->southQueue,  addCar, NULL); }
     74c:	f5 01       	movw	r30, r10
     74e:	00 85       	ldd	r16, Z+8	; 0x08
     750:	11 85       	ldd	r17, Z+9	; 0x09
     752:	c1 2c       	mov	r12, r1
     754:	d1 2c       	mov	r13, r1
     756:	9c ee       	ldi	r25, 0xEC	; 236
     758:	e9 2e       	mov	r14, r25
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	f9 2e       	mov	r15, r25
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	cb 01       	movw	r24, r22
     76a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
     76e:	d1 cf       	rjmp	.-94     	; 0x712 <readInput+0x24>
	#define SOUTHBOUND_BRIDGE_ENTRY	ReceivedByte & (1 << 3)		// 8


	
	if (NORTHBOUND_CAR_ARRIVE)	{ ASYNC(self->northQueue,  addCar, NULL); }
	if (NORTHBOUND_BRIDGE_ENTRY){ ASYNC(self->northQueue, sendCar, NULL); }		
     770:	f5 01       	movw	r30, r10
     772:	06 81       	ldd	r16, Z+6	; 0x06
     774:	17 81       	ldd	r17, Z+7	; 0x07
     776:	c1 2c       	mov	r12, r1
     778:	d1 2c       	mov	r13, r1
     77a:	2f e0       	ldi	r18, 0x0F	; 15
     77c:	e2 2e       	mov	r14, r18
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	f2 2e       	mov	r15, r18
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	cb 01       	movw	r24, r22
     78e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
     792:	bd cf       	rjmp	.-134    	; 0x70e <readInput+0x20>
	#define SOUTHBOUND_CAR_ARRIVE	ReceivedByte & (1 << 2)		// 4
	#define SOUTHBOUND_BRIDGE_ENTRY	ReceivedByte & (1 << 3)		// 8


	
	if (NORTHBOUND_CAR_ARRIVE)	{ ASYNC(self->northQueue,  addCar, NULL); }
     794:	fc 01       	movw	r30, r24
     796:	06 81       	ldd	r16, Z+6	; 0x06
     798:	17 81       	ldd	r17, Z+7	; 0x07
     79a:	c1 2c       	mov	r12, r1
     79c:	d1 2c       	mov	r13, r1
     79e:	3c ee       	ldi	r19, 0xEC	; 236
     7a0:	e3 2e       	mov	r14, r19
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f3 2e       	mov	r15, r19
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	cb 01       	movw	r24, r22
     7b2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
     7b6:	a9 cf       	rjmp	.-174    	; 0x70a <readInput+0x1c>

000007b8 <main>:
	


void USART_Init( unsigned int ubrr){
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     7b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
     7bc:	83 e3       	ldi	r24, 0x33	; 51
     7be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     7c2:	88 e9       	ldi	r24, 0x98	; 152
     7c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     7c8:	86 e0       	ldi	r24, 0x06	; 6
     7ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>


int main( void ){
	
	USART_Init(MYUBRR);
	initLCD();
     7ce:	0e 94 3c 03 	call	0x678	; 0x678 <initLCD>

	INSTALL(&inputHandler, readInput, IRQ_USART0_RX);
     7d2:	48 e0       	ldi	r20, 0x08	; 8
     7d4:	67 e7       	ldi	r22, 0x77	; 119
     7d6:	73 e0       	ldi	r23, 0x03	; 3
     7d8:	88 e0       	ldi	r24, 0x08	; 8
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 c2 10 	call	0x2184	; 0x2184 <install>
	
	sei();
     7e0:	78 94       	sei
	
	return TINYTIMBER(&trafficLight, trafficLightFunc, NULL);
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	68 ef       	ldi	r22, 0xF8	; 248
     7e8:	70 e1       	ldi	r23, 0x10	; 16
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <tinytimber>

000007f2 <write>:
Bit 3: Southbound red light status

*/


void write(SimWriter *self){
     7f2:	fc 01       	movw	r30, r24
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     7f4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     7f8:	95 ff       	sbrs	r25, 5
     7fa:	fc cf       	rjmp	.-8      	; 0x7f4 <write+0x2>
	UDR0 = (self->nG << 0) | (self->nR << 1) |( self->sG << 2) | (self->sR << 3); // Echo back the received byte back to the computer
     7fc:	26 81       	ldd	r18, Z+6	; 0x06
     7fe:	37 81       	ldd	r19, Z+7	; 0x07
     800:	c9 01       	movw	r24, r18
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	20 85       	ldd	r18, Z+8	; 0x08
     808:	31 85       	ldd	r19, Z+9	; 0x09
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	28 2b       	or	r18, r24
     814:	84 81       	ldd	r24, Z+4	; 0x04
     816:	28 2b       	or	r18, r24
     818:	82 85       	ldd	r24, Z+10	; 0x0a
     81a:	93 85       	ldd	r25, Z+11	; 0x0b
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	82 2b       	or	r24, r18
     82a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     82e:	08 95       	ret

00000830 <northboundGreenLight>:
}



void northboundGreenLight(SimWriter *self){
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
	self->nG = 1;
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	fc 01       	movw	r30, r24
     842:	35 83       	std	Z+5, r19	; 0x05
     844:	24 83       	std	Z+4, r18	; 0x04
	self->nR = 0;
     846:	17 82       	std	Z+7, r1	; 0x07
     848:	16 82       	std	Z+6, r1	; 0x06
	ASYNC(self, write, NULL);
     84a:	c1 2c       	mov	r12, r1
     84c:	d1 2c       	mov	r13, r1
     84e:	29 ef       	ldi	r18, 0xF9	; 249
     850:	e2 2e       	mov	r14, r18
     852:	23 e0       	ldi	r18, 0x03	; 3
     854:	f2 2e       	mov	r15, r18
     856:	8c 01       	movw	r16, r24
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	a9 01       	movw	r20, r18
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	cb 01       	movw	r24, r22
     864:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	08 95       	ret

00000876 <northboundRedLight>:

void northboundRedLight(SimWriter *self){
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
	self->nG = 0;
     882:	fc 01       	movw	r30, r24
     884:	15 82       	std	Z+5, r1	; 0x05
     886:	14 82       	std	Z+4, r1	; 0x04
	self->nR = 1;
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	37 83       	std	Z+7, r19	; 0x07
     88e:	26 83       	std	Z+6, r18	; 0x06
	ASYNC(self, write, NULL);
     890:	c1 2c       	mov	r12, r1
     892:	d1 2c       	mov	r13, r1
     894:	29 ef       	ldi	r18, 0xF9	; 249
     896:	e2 2e       	mov	r14, r18
     898:	23 e0       	ldi	r18, 0x03	; 3
     89a:	f2 2e       	mov	r15, r18
     89c:	8c 01       	movw	r16, r24
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	a9 01       	movw	r20, r18
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	cb 01       	movw	r24, r22
     8aa:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	cf 90       	pop	r12
     8ba:	08 95       	ret

000008bc <southboundGreenLight>:

void southboundGreenLight(SimWriter *self){
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
	self->sG = 1;
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	fc 01       	movw	r30, r24
     8ce:	31 87       	std	Z+9, r19	; 0x09
     8d0:	20 87       	std	Z+8, r18	; 0x08
	self->sR = 0;
     8d2:	13 86       	std	Z+11, r1	; 0x0b
     8d4:	12 86       	std	Z+10, r1	; 0x0a
	ASYNC(self, write, NULL);
     8d6:	c1 2c       	mov	r12, r1
     8d8:	d1 2c       	mov	r13, r1
     8da:	29 ef       	ldi	r18, 0xF9	; 249
     8dc:	e2 2e       	mov	r14, r18
     8de:	23 e0       	ldi	r18, 0x03	; 3
     8e0:	f2 2e       	mov	r15, r18
     8e2:	8c 01       	movw	r16, r24
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	a9 01       	movw	r20, r18
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	cb 01       	movw	r24, r22
     8f0:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <southboundRedLight>:

void southboundRedLight(SimWriter *self){
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
	self->sG = 0;
     90e:	fc 01       	movw	r30, r24
     910:	11 86       	std	Z+9, r1	; 0x09
     912:	10 86       	std	Z+8, r1	; 0x08
	self->sR = 1;
     914:	21 e0       	ldi	r18, 0x01	; 1
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	33 87       	std	Z+11, r19	; 0x0b
     91a:	22 87       	std	Z+10, r18	; 0x0a
	ASYNC(self, write, NULL);
     91c:	c1 2c       	mov	r12, r1
     91e:	d1 2c       	mov	r13, r1
     920:	29 ef       	ldi	r18, 0xF9	; 249
     922:	e2 2e       	mov	r14, r18
     924:	23 e0       	ldi	r18, 0x03	; 3
     926:	f2 2e       	mov	r15, r18
     928:	8c 01       	movw	r16, r24
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	a9 01       	movw	r20, r18
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	cb 01       	movw	r24, r22
     936:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
}
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	08 95       	ret

00000948 <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <initialize+0x6>
     94e:	00 d0       	rcall	.+0      	; 0x950 <initialize+0x8>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	8f e3       	ldi	r24, 0x3F	; 63
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	2f e1       	ldi	r18, 0x1F	; 31
     95a:	33 e0       	ldi	r19, 0x03	; 3
     95c:	fc 01       	movw	r30, r24
     95e:	70 97       	sbiw	r30, 0x10	; 16
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	80 83       	st	Z, r24
     964:	40 96       	adiw	r24, 0x10	; 16
     966:	82 17       	cp	r24, r18
     968:	93 07       	cpc	r25, r19
     96a:	c1 f7       	brne	.-16     	; 0x95c <initialize+0x14>
     96c:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <messages+0xe1>
     970:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <messages+0xe0>
     974:	ea e7       	ldi	r30, 0x7A	; 122
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	87 e9       	ldi	r24, 0x97	; 151
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	91 83       	std	Z+1, r25	; 0x01
     97e:	80 83       	st	Z, r24
     980:	84 eb       	ldi	r24, 0xB4	; 180
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	96 8f       	std	Z+30, r25	; 0x1e
     986:	85 8f       	std	Z+29, r24	; 0x1d
     988:	a1 ed       	ldi	r26, 0xD1	; 209
     98a:	b1 e0       	ldi	r27, 0x01	; 1
     98c:	b3 af       	std	Z+59, r27	; 0x3b
     98e:	a2 af       	std	Z+58, r26	; 0x3a
     990:	1d 92       	st	X+, r1
     992:	1c 92       	st	X, r1
     994:	fa 83       	std	Y+2, r31	; 0x02
     996:	e9 83       	std	Y+1, r30	; 0x01
     998:	eb e7       	ldi	r30, 0x7B	; 123
     99a:	f3 e0       	ldi	r31, 0x03	; 3
     99c:	fc 83       	std	Y+4, r31	; 0x04
     99e:	eb 83       	std	Y+3, r30	; 0x03
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	06 96       	adiw	r24, 0x06	; 6
     9a6:	0e 94 90 11 	call	0x2320	; 0x2320 <setjmp>
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	e9 81       	ldd	r30, Y+1	; 0x01
     9b0:	fa 81       	ldd	r31, Y+2	; 0x02
     9b2:	97 8b       	std	Z+23, r25	; 0x17
     9b4:	86 8b       	std	Z+22, r24	; 0x16
     9b6:	91 8f       	std	Z+25, r25	; 0x19
     9b8:	80 8f       	std	Z+24, r24	; 0x18
     9ba:	87 e4       	ldi	r24, 0x47	; 71
     9bc:	90 e1       	ldi	r25, 0x10	; 16
     9be:	94 8f       	std	Z+28, r25	; 0x1c
     9c0:	83 8f       	std	Z+27, r24	; 0x1b
     9c2:	15 82       	std	Z+5, r1	; 0x05
     9c4:	14 82       	std	Z+4, r1	; 0x04
     9c6:	7d 96       	adiw	r30, 0x1d	; 29
     9c8:	fa 83       	std	Y+2, r31	; 0x02
     9ca:	e9 83       	std	Y+1, r30	; 0x01
     9cc:	eb 81       	ldd	r30, Y+3	; 0x03
     9ce:	fc 81       	ldd	r31, Y+4	; 0x04
     9d0:	e0 5a       	subi	r30, 0xA0	; 160
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	fc 83       	std	Y+4, r31	; 0x04
     9d6:	eb 83       	std	Y+3, r30	; 0x03
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	9a 81       	ldd	r25, Y+2	; 0x02
     9dc:	8e 5e       	subi	r24, 0xEE	; 238
     9de:	91 40       	sbci	r25, 0x01	; 1
     9e0:	f9 f6       	brne	.-66     	; 0x9a0 <initialize+0x58>
     9e2:	e2 e1       	ldi	r30, 0x12	; 18
     9e4:	f2 e0       	ldi	r31, 0x02	; 2
     9e6:	11 82       	std	Z+1, r1	; 0x01
     9e8:	10 82       	st	Z, r1
     9ea:	15 82       	std	Z+5, r1	; 0x05
     9ec:	14 82       	std	Z+4, r1	; 0x04
     9ee:	13 82       	std	Z+3, r1	; 0x03
     9f0:	12 82       	std	Z+2, r1	; 0x02
     9f2:	e1 e6       	ldi	r30, 0x61	; 97
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 e8       	ldi	r24, 0x80	; 128
     9f8:	80 83       	st	Z, r24
     9fa:	10 82       	st	Z, r1
     9fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a00:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <dispatch>:
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	00 d0       	rcall	.+0      	; 0xa24 <dispatch+0x6>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current>
     a30:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current+0x1>
     a34:	06 96       	adiw	r24, 0x06	; 6
     a36:	0e 94 90 11 	call	0x2320	; 0x2320 <setjmp>
     a3a:	89 2b       	or	r24, r25
     a3c:	29 f0       	breq	.+10     	; 0xa48 <dispatch+0x2a>
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <current+0x1>
     a50:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current>
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	06 96       	adiw	r24, 0x06	; 6
     a5a:	0e 94 b0 11 	call	0x2360	; 0x2360 <longjmp>

00000a5e <schedule>:
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <msgQ>
     a6a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <msgQ+0x1>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	f1 f0       	breq	.+60     	; 0xaae <schedule+0x50>
     a72:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
     a76:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	c1 f0       	breq	.+48     	; 0xaae <schedule+0x50>
     a7e:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <activeStack>
     a82:	d0 91 37 01 	lds	r29, 0x0137	; 0x800137 <activeStack+0x1>
     a86:	aa 81       	ldd	r26, Y+2	; 0x02
     a88:	bb 81       	ldd	r27, Y+3	; 0x03
     a8a:	10 97       	sbiw	r26, 0x00	; 0
     a8c:	a9 f0       	breq	.+42     	; 0xab8 <schedule+0x5a>
     a8e:	46 81       	ldd	r20, Z+6	; 0x06
     a90:	57 81       	ldd	r21, Z+7	; 0x07
     a92:	60 85       	ldd	r22, Z+8	; 0x08
     a94:	71 85       	ldd	r23, Z+9	; 0x09
     a96:	16 96       	adiw	r26, 0x06	; 6
     a98:	0d 91       	ld	r16, X+
     a9a:	1d 91       	ld	r17, X+
     a9c:	2d 91       	ld	r18, X+
     a9e:	3c 91       	ld	r19, X
     aa0:	19 97       	sbiw	r26, 0x09	; 9
     aa2:	40 1b       	sub	r20, r16
     aa4:	51 0b       	sbc	r21, r17
     aa6:	62 0b       	sbc	r22, r18
     aa8:	73 0b       	sbc	r23, r19
     aaa:	77 fd       	sbrc	r23, 7
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <schedule+0x5a>
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	08 95       	ret
     ab8:	fc 01       	movw	r30, r24
     aba:	20 81       	ld	r18, Z
     abc:	31 81       	ldd	r19, Z+1	; 0x01
     abe:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <threadPool+0x1>
     ac2:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <threadPool>
     ac6:	d1 83       	std	Z+1, r29	; 0x01
     ac8:	c0 83       	st	Z, r28
     aca:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <activeStack+0x1>
     ace:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <activeStack>
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <dispatch>

00000ade <dequeue.part.0>:
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     ae4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     ae8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	83 bf       	out	0x33, r24	; 51
     af0:	88 95       	sleep
     af2:	fd cf       	rjmp	.-6      	; 0xaee <dequeue.part.0+0x10>

00000af4 <__vector_1>:
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
     b16:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     b1a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     b1e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b22:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b26:	c9 01       	movw	r24, r18
     b28:	03 2e       	mov	r0, r19
     b2a:	00 0c       	add	r0, r0
     b2c:	aa 0b       	sbc	r26, r26
     b2e:	bb 0b       	sbc	r27, r27
     b30:	dc 01       	movw	r26, r24
     b32:	99 27       	eor	r25, r25
     b34:	88 27       	eor	r24, r24
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	84 2b       	or	r24, r20
     b3c:	95 2b       	or	r25, r21
     b3e:	a6 2b       	or	r26, r22
     b40:	b7 2b       	or	r27, r23
     b42:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     b46:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     b4a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     b4e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     b52:	b0 9b       	sbis	0x16, 0	; 22
     b54:	1b c0       	rjmp	.+54     	; 0xb8c <__vector_1+0x98>
     b56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b5e:	c9 01       	movw	r24, r18
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	09 2e       	mov	r0, r25
     b64:	00 0c       	add	r0, r0
     b66:	aa 0b       	sbc	r26, r26
     b68:	bb 0b       	sbc	r27, r27
     b6a:	dc 01       	movw	r26, r24
     b6c:	99 27       	eor	r25, r25
     b6e:	88 27       	eor	r24, r24
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	84 2b       	or	r24, r20
     b76:	95 2b       	or	r25, r21
     b78:	a6 2b       	or	r26, r22
     b7a:	b7 2b       	or	r27, r23
     b7c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     b80:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     b84:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     b88:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     b8c:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable>
     b90:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1>
     b94:	30 97       	sbiw	r30, 0x00	; 0
     b96:	39 f0       	breq	.+14     	; 0xba6 <__vector_1+0xb2>
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable>
     ba0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1>
     ba4:	09 95       	icall
     ba6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
     baa:	ff 91       	pop	r31
     bac:	ef 91       	pop	r30
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__vector_2>:
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	5f 93       	push	r21
     bde:	6f 93       	push	r22
     be0:	7f 93       	push	r23
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
     bee:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     bf2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     bf6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bfa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bfe:	c9 01       	movw	r24, r18
     c00:	03 2e       	mov	r0, r19
     c02:	00 0c       	add	r0, r0
     c04:	aa 0b       	sbc	r26, r26
     c06:	bb 0b       	sbc	r27, r27
     c08:	dc 01       	movw	r26, r24
     c0a:	99 27       	eor	r25, r25
     c0c:	88 27       	eor	r24, r24
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	84 2b       	or	r24, r20
     c14:	95 2b       	or	r25, r21
     c16:	a6 2b       	or	r26, r22
     c18:	b7 2b       	or	r27, r23
     c1a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     c1e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     c22:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     c26:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     c2a:	b0 9b       	sbis	0x16, 0	; 22
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <__vector_2+0x98>
     c2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c36:	c9 01       	movw	r24, r18
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	09 2e       	mov	r0, r25
     c3c:	00 0c       	add	r0, r0
     c3e:	aa 0b       	sbc	r26, r26
     c40:	bb 0b       	sbc	r27, r27
     c42:	dc 01       	movw	r26, r24
     c44:	99 27       	eor	r25, r25
     c46:	88 27       	eor	r24, r24
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	84 2b       	or	r24, r20
     c4e:	95 2b       	or	r25, r21
     c50:	a6 2b       	or	r26, r22
     c52:	b7 2b       	or	r27, r23
     c54:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     c58:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     c5c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     c60:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     c64:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x2>
     c68:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x3>
     c6c:	30 97       	sbiw	r30, 0x00	; 0
     c6e:	39 f0       	breq	.+14     	; 0xc7e <__vector_2+0xb2>
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x2>
     c78:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x3>
     c7c:	09 95       	icall
     c7e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <__vector_3>:
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
     cc6:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     cca:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     cce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cd2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cd6:	c9 01       	movw	r24, r18
     cd8:	03 2e       	mov	r0, r19
     cda:	00 0c       	add	r0, r0
     cdc:	aa 0b       	sbc	r26, r26
     cde:	bb 0b       	sbc	r27, r27
     ce0:	dc 01       	movw	r26, r24
     ce2:	99 27       	eor	r25, r25
     ce4:	88 27       	eor	r24, r24
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	84 2b       	or	r24, r20
     cec:	95 2b       	or	r25, r21
     cee:	a6 2b       	or	r26, r22
     cf0:	b7 2b       	or	r27, r23
     cf2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     cf6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     cfa:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     cfe:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     d02:	b0 9b       	sbis	0x16, 0	; 22
     d04:	1b c0       	rjmp	.+54     	; 0xd3c <__vector_3+0x98>
     d06:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d0a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d0e:	c9 01       	movw	r24, r18
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	09 2e       	mov	r0, r25
     d14:	00 0c       	add	r0, r0
     d16:	aa 0b       	sbc	r26, r26
     d18:	bb 0b       	sbc	r27, r27
     d1a:	dc 01       	movw	r26, r24
     d1c:	99 27       	eor	r25, r25
     d1e:	88 27       	eor	r24, r24
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	84 2b       	or	r24, r20
     d26:	95 2b       	or	r25, r21
     d28:	a6 2b       	or	r26, r22
     d2a:	b7 2b       	or	r27, r23
     d2c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     d30:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     d34:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     d38:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     d3c:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x4>
     d40:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x5>
     d44:	30 97       	sbiw	r30, 0x00	; 0
     d46:	39 f0       	breq	.+14     	; 0xd56 <__vector_3+0xb2>
     d48:	62 e0       	ldi	r22, 0x02	; 2
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x4>
     d50:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x5>
     d54:	09 95       	icall
     d56:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	bf 91       	pop	r27
     d60:	af 91       	pop	r26
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	7f 91       	pop	r23
     d68:	6f 91       	pop	r22
     d6a:	5f 91       	pop	r21
     d6c:	4f 91       	pop	r20
     d6e:	3f 91       	pop	r19
     d70:	2f 91       	pop	r18
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti

00000d7c <__vector_4>:
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
     d9e:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     da2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     da6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     daa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dae:	c9 01       	movw	r24, r18
     db0:	03 2e       	mov	r0, r19
     db2:	00 0c       	add	r0, r0
     db4:	aa 0b       	sbc	r26, r26
     db6:	bb 0b       	sbc	r27, r27
     db8:	dc 01       	movw	r26, r24
     dba:	99 27       	eor	r25, r25
     dbc:	88 27       	eor	r24, r24
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	84 2b       	or	r24, r20
     dc4:	95 2b       	or	r25, r21
     dc6:	a6 2b       	or	r26, r22
     dc8:	b7 2b       	or	r27, r23
     dca:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     dce:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     dd2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     dd6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     dda:	b0 9b       	sbis	0x16, 0	; 22
     ddc:	1b c0       	rjmp	.+54     	; 0xe14 <__vector_4+0x98>
     dde:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     de2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     de6:	c9 01       	movw	r24, r18
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	09 2e       	mov	r0, r25
     dec:	00 0c       	add	r0, r0
     dee:	aa 0b       	sbc	r26, r26
     df0:	bb 0b       	sbc	r27, r27
     df2:	dc 01       	movw	r26, r24
     df4:	99 27       	eor	r25, r25
     df6:	88 27       	eor	r24, r24
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	84 2b       	or	r24, r20
     dfe:	95 2b       	or	r25, r21
     e00:	a6 2b       	or	r26, r22
     e02:	b7 2b       	or	r27, r23
     e04:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     e08:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     e0c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     e10:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     e14:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x6>
     e18:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x7>
     e1c:	30 97       	sbiw	r30, 0x00	; 0
     e1e:	39 f0       	breq	.+14     	; 0xe2e <__vector_4+0xb2>
     e20:	63 e0       	ldi	r22, 0x03	; 3
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x6>
     e28:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x7>
     e2c:	09 95       	icall
     e2e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <__vector_5>:
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
     e76:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     e7a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     e7e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e82:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e86:	c9 01       	movw	r24, r18
     e88:	03 2e       	mov	r0, r19
     e8a:	00 0c       	add	r0, r0
     e8c:	aa 0b       	sbc	r26, r26
     e8e:	bb 0b       	sbc	r27, r27
     e90:	dc 01       	movw	r26, r24
     e92:	99 27       	eor	r25, r25
     e94:	88 27       	eor	r24, r24
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	84 2b       	or	r24, r20
     e9c:	95 2b       	or	r25, r21
     e9e:	a6 2b       	or	r26, r22
     ea0:	b7 2b       	or	r27, r23
     ea2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     ea6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     eaa:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     eae:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     eb2:	b0 9b       	sbis	0x16, 0	; 22
     eb4:	1b c0       	rjmp	.+54     	; 0xeec <__vector_5+0x98>
     eb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     eba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ebe:	c9 01       	movw	r24, r18
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	09 2e       	mov	r0, r25
     ec4:	00 0c       	add	r0, r0
     ec6:	aa 0b       	sbc	r26, r26
     ec8:	bb 0b       	sbc	r27, r27
     eca:	dc 01       	movw	r26, r24
     ecc:	99 27       	eor	r25, r25
     ece:	88 27       	eor	r24, r24
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	84 2b       	or	r24, r20
     ed6:	95 2b       	or	r25, r21
     ed8:	a6 2b       	or	r26, r22
     eda:	b7 2b       	or	r27, r23
     edc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     ee0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     ee4:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     ee8:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     eec:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x8>
     ef0:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x9>
     ef4:	30 97       	sbiw	r30, 0x00	; 0
     ef6:	39 f0       	breq	.+14     	; 0xf06 <__vector_5+0xb2>
     ef8:	64 e0       	ldi	r22, 0x04	; 4
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x8>
     f00:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x9>
     f04:	09 95       	icall
     f06:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
     f0a:	ff 91       	pop	r31
     f0c:	ef 91       	pop	r30
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	4f 91       	pop	r20
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_10>:
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
     f4e:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
     f52:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
     f56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f5e:	c9 01       	movw	r24, r18
     f60:	03 2e       	mov	r0, r19
     f62:	00 0c       	add	r0, r0
     f64:	aa 0b       	sbc	r26, r26
     f66:	bb 0b       	sbc	r27, r27
     f68:	dc 01       	movw	r26, r24
     f6a:	99 27       	eor	r25, r25
     f6c:	88 27       	eor	r24, r24
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	84 2b       	or	r24, r20
     f74:	95 2b       	or	r25, r21
     f76:	a6 2b       	or	r26, r22
     f78:	b7 2b       	or	r27, r23
     f7a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     f7e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     f82:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     f86:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     f8a:	b0 9b       	sbis	0x16, 0	; 22
     f8c:	1b c0       	rjmp	.+54     	; 0xfc4 <__vector_10+0x98>
     f8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f96:	c9 01       	movw	r24, r18
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	09 2e       	mov	r0, r25
     f9c:	00 0c       	add	r0, r0
     f9e:	aa 0b       	sbc	r26, r26
     fa0:	bb 0b       	sbc	r27, r27
     fa2:	dc 01       	movw	r26, r24
     fa4:	99 27       	eor	r25, r25
     fa6:	88 27       	eor	r24, r24
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	84 2b       	or	r24, r20
     fae:	95 2b       	or	r25, r21
     fb0:	a6 2b       	or	r26, r22
     fb2:	b7 2b       	or	r27, r23
     fb4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     fb8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     fbc:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     fc0:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     fc4:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0xa>
     fc8:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0xb>
     fcc:	30 97       	sbiw	r30, 0x00	; 0
     fce:	39 f0       	breq	.+14     	; 0xfde <__vector_10+0xb2>
     fd0:	65 e0       	ldi	r22, 0x05	; 5
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0xa>
     fd8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0xb>
     fdc:	09 95       	icall
     fde:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <__vector_11>:
    1004:	1f 92       	push	r1
    1006:	0f 92       	push	r0
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	0f 92       	push	r0
    100c:	11 24       	eor	r1, r1
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
    1026:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    102a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    102e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1032:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1036:	c9 01       	movw	r24, r18
    1038:	03 2e       	mov	r0, r19
    103a:	00 0c       	add	r0, r0
    103c:	aa 0b       	sbc	r26, r26
    103e:	bb 0b       	sbc	r27, r27
    1040:	dc 01       	movw	r26, r24
    1042:	99 27       	eor	r25, r25
    1044:	88 27       	eor	r24, r24
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	84 2b       	or	r24, r20
    104c:	95 2b       	or	r25, r21
    104e:	a6 2b       	or	r26, r22
    1050:	b7 2b       	or	r27, r23
    1052:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1056:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    105a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    105e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1062:	b0 9b       	sbis	0x16, 0	; 22
    1064:	1b c0       	rjmp	.+54     	; 0x109c <__vector_11+0x98>
    1066:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    106a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    106e:	c9 01       	movw	r24, r18
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	09 2e       	mov	r0, r25
    1074:	00 0c       	add	r0, r0
    1076:	aa 0b       	sbc	r26, r26
    1078:	bb 0b       	sbc	r27, r27
    107a:	dc 01       	movw	r26, r24
    107c:	99 27       	eor	r25, r25
    107e:	88 27       	eor	r24, r24
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	84 2b       	or	r24, r20
    1086:	95 2b       	or	r25, r21
    1088:	a6 2b       	or	r26, r22
    108a:	b7 2b       	or	r27, r23
    108c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1090:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1094:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1098:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    109c:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0xc>
    10a0:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0xd>
    10a4:	30 97       	sbiw	r30, 0x00	; 0
    10a6:	39 f0       	breq	.+14     	; 0x10b6 <__vector_11+0xb2>
    10a8:	66 e0       	ldi	r22, 0x06	; 6
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0xc>
    10b0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0xd>
    10b4:	09 95       	icall
    10b6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    10ba:	ff 91       	pop	r31
    10bc:	ef 91       	pop	r30
    10be:	bf 91       	pop	r27
    10c0:	af 91       	pop	r26
    10c2:	9f 91       	pop	r25
    10c4:	8f 91       	pop	r24
    10c6:	7f 91       	pop	r23
    10c8:	6f 91       	pop	r22
    10ca:	5f 91       	pop	r21
    10cc:	4f 91       	pop	r20
    10ce:	3f 91       	pop	r19
    10d0:	2f 91       	pop	r18
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_12>:
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1102:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1106:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    110a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    110e:	c9 01       	movw	r24, r18
    1110:	03 2e       	mov	r0, r19
    1112:	00 0c       	add	r0, r0
    1114:	aa 0b       	sbc	r26, r26
    1116:	bb 0b       	sbc	r27, r27
    1118:	dc 01       	movw	r26, r24
    111a:	99 27       	eor	r25, r25
    111c:	88 27       	eor	r24, r24
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	84 2b       	or	r24, r20
    1124:	95 2b       	or	r25, r21
    1126:	a6 2b       	or	r26, r22
    1128:	b7 2b       	or	r27, r23
    112a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    112e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1132:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1136:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    113a:	b0 9b       	sbis	0x16, 0	; 22
    113c:	1b c0       	rjmp	.+54     	; 0x1174 <__vector_12+0x98>
    113e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1142:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1146:	c9 01       	movw	r24, r18
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	09 2e       	mov	r0, r25
    114c:	00 0c       	add	r0, r0
    114e:	aa 0b       	sbc	r26, r26
    1150:	bb 0b       	sbc	r27, r27
    1152:	dc 01       	movw	r26, r24
    1154:	99 27       	eor	r25, r25
    1156:	88 27       	eor	r24, r24
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	84 2b       	or	r24, r20
    115e:	95 2b       	or	r25, r21
    1160:	a6 2b       	or	r26, r22
    1162:	b7 2b       	or	r27, r23
    1164:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1168:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    116c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1170:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1174:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0xe>
    1178:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0xf>
    117c:	30 97       	sbiw	r30, 0x00	; 0
    117e:	39 f0       	breq	.+14     	; 0x118e <__vector_12+0xb2>
    1180:	67 e0       	ldi	r22, 0x07	; 7
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0xe>
    1188:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0xf>
    118c:	09 95       	icall
    118e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    1192:	ff 91       	pop	r31
    1194:	ef 91       	pop	r30
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	9f 91       	pop	r25
    119c:	8f 91       	pop	r24
    119e:	7f 91       	pop	r23
    11a0:	6f 91       	pop	r22
    11a2:	5f 91       	pop	r21
    11a4:	4f 91       	pop	r20
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_13>:
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	2f 93       	push	r18
    11c0:	3f 93       	push	r19
    11c2:	4f 93       	push	r20
    11c4:	5f 93       	push	r21
    11c6:	6f 93       	push	r22
    11c8:	7f 93       	push	r23
    11ca:	8f 93       	push	r24
    11cc:	9f 93       	push	r25
    11ce:	af 93       	push	r26
    11d0:	bf 93       	push	r27
    11d2:	ef 93       	push	r30
    11d4:	ff 93       	push	r31
    11d6:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    11da:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    11de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11e6:	c9 01       	movw	r24, r18
    11e8:	03 2e       	mov	r0, r19
    11ea:	00 0c       	add	r0, r0
    11ec:	aa 0b       	sbc	r26, r26
    11ee:	bb 0b       	sbc	r27, r27
    11f0:	dc 01       	movw	r26, r24
    11f2:	99 27       	eor	r25, r25
    11f4:	88 27       	eor	r24, r24
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	84 2b       	or	r24, r20
    11fc:	95 2b       	or	r25, r21
    11fe:	a6 2b       	or	r26, r22
    1200:	b7 2b       	or	r27, r23
    1202:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1206:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    120a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    120e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1212:	b0 9b       	sbis	0x16, 0	; 22
    1214:	1b c0       	rjmp	.+54     	; 0x124c <__vector_13+0x98>
    1216:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    121a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    121e:	c9 01       	movw	r24, r18
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	09 2e       	mov	r0, r25
    1224:	00 0c       	add	r0, r0
    1226:	aa 0b       	sbc	r26, r26
    1228:	bb 0b       	sbc	r27, r27
    122a:	dc 01       	movw	r26, r24
    122c:	99 27       	eor	r25, r25
    122e:	88 27       	eor	r24, r24
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	84 2b       	or	r24, r20
    1236:	95 2b       	or	r25, r21
    1238:	a6 2b       	or	r26, r22
    123a:	b7 2b       	or	r27, r23
    123c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1240:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1244:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1248:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    124c:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x10>
    1250:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x11>
    1254:	30 97       	sbiw	r30, 0x00	; 0
    1256:	39 f0       	breq	.+14     	; 0x1266 <__vector_13+0xb2>
    1258:	68 e0       	ldi	r22, 0x08	; 8
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x10>
    1260:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x11>
    1264:	09 95       	icall
    1266:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_14>:
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
    12ae:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    12b2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    12b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12be:	c9 01       	movw	r24, r18
    12c0:	03 2e       	mov	r0, r19
    12c2:	00 0c       	add	r0, r0
    12c4:	aa 0b       	sbc	r26, r26
    12c6:	bb 0b       	sbc	r27, r27
    12c8:	dc 01       	movw	r26, r24
    12ca:	99 27       	eor	r25, r25
    12cc:	88 27       	eor	r24, r24
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	84 2b       	or	r24, r20
    12d4:	95 2b       	or	r25, r21
    12d6:	a6 2b       	or	r26, r22
    12d8:	b7 2b       	or	r27, r23
    12da:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    12de:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    12e2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    12e6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    12ea:	b0 9b       	sbis	0x16, 0	; 22
    12ec:	1b c0       	rjmp	.+54     	; 0x1324 <__vector_14+0x98>
    12ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12f6:	c9 01       	movw	r24, r18
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	09 2e       	mov	r0, r25
    12fc:	00 0c       	add	r0, r0
    12fe:	aa 0b       	sbc	r26, r26
    1300:	bb 0b       	sbc	r27, r27
    1302:	dc 01       	movw	r26, r24
    1304:	99 27       	eor	r25, r25
    1306:	88 27       	eor	r24, r24
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	84 2b       	or	r24, r20
    130e:	95 2b       	or	r25, r21
    1310:	a6 2b       	or	r26, r22
    1312:	b7 2b       	or	r27, r23
    1314:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1318:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    131c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1320:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1324:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x12>
    1328:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x13>
    132c:	30 97       	sbiw	r30, 0x00	; 0
    132e:	39 f0       	breq	.+14     	; 0x133e <__vector_14+0xb2>
    1330:	69 e0       	ldi	r22, 0x09	; 9
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x12>
    1338:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x13>
    133c:	09 95       	icall
    133e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_15>:
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	4f 93       	push	r20
    1374:	5f 93       	push	r21
    1376:	6f 93       	push	r22
    1378:	7f 93       	push	r23
    137a:	8f 93       	push	r24
    137c:	9f 93       	push	r25
    137e:	af 93       	push	r26
    1380:	bf 93       	push	r27
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
    1386:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    138a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    138e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1392:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1396:	c9 01       	movw	r24, r18
    1398:	03 2e       	mov	r0, r19
    139a:	00 0c       	add	r0, r0
    139c:	aa 0b       	sbc	r26, r26
    139e:	bb 0b       	sbc	r27, r27
    13a0:	dc 01       	movw	r26, r24
    13a2:	99 27       	eor	r25, r25
    13a4:	88 27       	eor	r24, r24
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	84 2b       	or	r24, r20
    13ac:	95 2b       	or	r25, r21
    13ae:	a6 2b       	or	r26, r22
    13b0:	b7 2b       	or	r27, r23
    13b2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    13b6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    13ba:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    13be:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    13c2:	b0 9b       	sbis	0x16, 0	; 22
    13c4:	1b c0       	rjmp	.+54     	; 0x13fc <__vector_15+0x98>
    13c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13ce:	c9 01       	movw	r24, r18
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	09 2e       	mov	r0, r25
    13d4:	00 0c       	add	r0, r0
    13d6:	aa 0b       	sbc	r26, r26
    13d8:	bb 0b       	sbc	r27, r27
    13da:	dc 01       	movw	r26, r24
    13dc:	99 27       	eor	r25, r25
    13de:	88 27       	eor	r24, r24
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	84 2b       	or	r24, r20
    13e6:	95 2b       	or	r25, r21
    13e8:	a6 2b       	or	r26, r22
    13ea:	b7 2b       	or	r27, r23
    13ec:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    13f0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    13f4:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    13f8:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    13fc:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x14>
    1400:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x15>
    1404:	30 97       	sbiw	r30, 0x00	; 0
    1406:	39 f0       	breq	.+14     	; 0x1416 <__vector_15+0xb2>
    1408:	6a e0       	ldi	r22, 0x0A	; 10
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x14>
    1410:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x15>
    1414:	09 95       	icall
    1416:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	bf 91       	pop	r27
    1420:	af 91       	pop	r26
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	7f 91       	pop	r23
    1428:	6f 91       	pop	r22
    142a:	5f 91       	pop	r21
    142c:	4f 91       	pop	r20
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <__vector_16>:
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	2f 93       	push	r18
    1448:	3f 93       	push	r19
    144a:	4f 93       	push	r20
    144c:	5f 93       	push	r21
    144e:	6f 93       	push	r22
    1450:	7f 93       	push	r23
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	af 93       	push	r26
    1458:	bf 93       	push	r27
    145a:	ef 93       	push	r30
    145c:	ff 93       	push	r31
    145e:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1462:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1466:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    146a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    146e:	c9 01       	movw	r24, r18
    1470:	03 2e       	mov	r0, r19
    1472:	00 0c       	add	r0, r0
    1474:	aa 0b       	sbc	r26, r26
    1476:	bb 0b       	sbc	r27, r27
    1478:	dc 01       	movw	r26, r24
    147a:	99 27       	eor	r25, r25
    147c:	88 27       	eor	r24, r24
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	84 2b       	or	r24, r20
    1484:	95 2b       	or	r25, r21
    1486:	a6 2b       	or	r26, r22
    1488:	b7 2b       	or	r27, r23
    148a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    148e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1492:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1496:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    149a:	b0 9b       	sbis	0x16, 0	; 22
    149c:	1b c0       	rjmp	.+54     	; 0x14d4 <__vector_16+0x98>
    149e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14a6:	c9 01       	movw	r24, r18
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	09 2e       	mov	r0, r25
    14ac:	00 0c       	add	r0, r0
    14ae:	aa 0b       	sbc	r26, r26
    14b0:	bb 0b       	sbc	r27, r27
    14b2:	dc 01       	movw	r26, r24
    14b4:	99 27       	eor	r25, r25
    14b6:	88 27       	eor	r24, r24
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	84 2b       	or	r24, r20
    14be:	95 2b       	or	r25, r21
    14c0:	a6 2b       	or	r26, r22
    14c2:	b7 2b       	or	r27, r23
    14c4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    14c8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    14cc:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    14d0:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    14d4:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x16>
    14d8:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x17>
    14dc:	30 97       	sbiw	r30, 0x00	; 0
    14de:	39 f0       	breq	.+14     	; 0x14ee <__vector_16+0xb2>
    14e0:	6b e0       	ldi	r22, 0x0B	; 11
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x16>
    14e8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x17>
    14ec:	09 95       	icall
    14ee:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	bf 91       	pop	r27
    14f8:	af 91       	pop	r26
    14fa:	9f 91       	pop	r25
    14fc:	8f 91       	pop	r24
    14fe:	7f 91       	pop	r23
    1500:	6f 91       	pop	r22
    1502:	5f 91       	pop	r21
    1504:	4f 91       	pop	r20
    1506:	3f 91       	pop	r19
    1508:	2f 91       	pop	r18
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <__vector_17>:
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	2f 93       	push	r18
    1520:	3f 93       	push	r19
    1522:	4f 93       	push	r20
    1524:	5f 93       	push	r21
    1526:	6f 93       	push	r22
    1528:	7f 93       	push	r23
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31
    1536:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    153a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    153e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1542:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1546:	c9 01       	movw	r24, r18
    1548:	03 2e       	mov	r0, r19
    154a:	00 0c       	add	r0, r0
    154c:	aa 0b       	sbc	r26, r26
    154e:	bb 0b       	sbc	r27, r27
    1550:	dc 01       	movw	r26, r24
    1552:	99 27       	eor	r25, r25
    1554:	88 27       	eor	r24, r24
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	84 2b       	or	r24, r20
    155c:	95 2b       	or	r25, r21
    155e:	a6 2b       	or	r26, r22
    1560:	b7 2b       	or	r27, r23
    1562:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1566:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    156a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    156e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1572:	b0 9b       	sbis	0x16, 0	; 22
    1574:	1b c0       	rjmp	.+54     	; 0x15ac <__vector_17+0x98>
    1576:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    157a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    157e:	c9 01       	movw	r24, r18
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	09 2e       	mov	r0, r25
    1584:	00 0c       	add	r0, r0
    1586:	aa 0b       	sbc	r26, r26
    1588:	bb 0b       	sbc	r27, r27
    158a:	dc 01       	movw	r26, r24
    158c:	99 27       	eor	r25, r25
    158e:	88 27       	eor	r24, r24
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	84 2b       	or	r24, r20
    1596:	95 2b       	or	r25, r21
    1598:	a6 2b       	or	r26, r22
    159a:	b7 2b       	or	r27, r23
    159c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    15a0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    15a4:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    15a8:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    15ac:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x18>
    15b0:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x19>
    15b4:	30 97       	sbiw	r30, 0x00	; 0
    15b6:	39 f0       	breq	.+14     	; 0x15c6 <__vector_17+0xb2>
    15b8:	6c e0       	ldi	r22, 0x0C	; 12
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x18>
    15c0:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x19>
    15c4:	09 95       	icall
    15c6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    15ca:	ff 91       	pop	r31
    15cc:	ef 91       	pop	r30
    15ce:	bf 91       	pop	r27
    15d0:	af 91       	pop	r26
    15d2:	9f 91       	pop	r25
    15d4:	8f 91       	pop	r24
    15d6:	7f 91       	pop	r23
    15d8:	6f 91       	pop	r22
    15da:	5f 91       	pop	r21
    15dc:	4f 91       	pop	r20
    15de:	3f 91       	pop	r19
    15e0:	2f 91       	pop	r18
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_18>:
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1612:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1616:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    161a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    161e:	c9 01       	movw	r24, r18
    1620:	03 2e       	mov	r0, r19
    1622:	00 0c       	add	r0, r0
    1624:	aa 0b       	sbc	r26, r26
    1626:	bb 0b       	sbc	r27, r27
    1628:	dc 01       	movw	r26, r24
    162a:	99 27       	eor	r25, r25
    162c:	88 27       	eor	r24, r24
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	84 2b       	or	r24, r20
    1634:	95 2b       	or	r25, r21
    1636:	a6 2b       	or	r26, r22
    1638:	b7 2b       	or	r27, r23
    163a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    163e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1642:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1646:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    164a:	b0 9b       	sbis	0x16, 0	; 22
    164c:	1b c0       	rjmp	.+54     	; 0x1684 <__vector_18+0x98>
    164e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1652:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1656:	c9 01       	movw	r24, r18
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	09 2e       	mov	r0, r25
    165c:	00 0c       	add	r0, r0
    165e:	aa 0b       	sbc	r26, r26
    1660:	bb 0b       	sbc	r27, r27
    1662:	dc 01       	movw	r26, r24
    1664:	99 27       	eor	r25, r25
    1666:	88 27       	eor	r24, r24
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	84 2b       	or	r24, r20
    166e:	95 2b       	or	r25, r21
    1670:	a6 2b       	or	r26, r22
    1672:	b7 2b       	or	r27, r23
    1674:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1678:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    167c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1680:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1684:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x1a>
    1688:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x1b>
    168c:	30 97       	sbiw	r30, 0x00	; 0
    168e:	39 f0       	breq	.+14     	; 0x169e <__vector_18+0xb2>
    1690:	6d e0       	ldi	r22, 0x0D	; 13
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x1a>
    1698:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x1b>
    169c:	09 95       	icall
    169e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    16a2:	ff 91       	pop	r31
    16a4:	ef 91       	pop	r30
    16a6:	bf 91       	pop	r27
    16a8:	af 91       	pop	r26
    16aa:	9f 91       	pop	r25
    16ac:	8f 91       	pop	r24
    16ae:	7f 91       	pop	r23
    16b0:	6f 91       	pop	r22
    16b2:	5f 91       	pop	r21
    16b4:	4f 91       	pop	r20
    16b6:	3f 91       	pop	r19
    16b8:	2f 91       	pop	r18
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <__vector_19>:
    16c4:	1f 92       	push	r1
    16c6:	0f 92       	push	r0
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	0f 92       	push	r0
    16cc:	11 24       	eor	r1, r1
    16ce:	2f 93       	push	r18
    16d0:	3f 93       	push	r19
    16d2:	4f 93       	push	r20
    16d4:	5f 93       	push	r21
    16d6:	6f 93       	push	r22
    16d8:	7f 93       	push	r23
    16da:	8f 93       	push	r24
    16dc:	9f 93       	push	r25
    16de:	af 93       	push	r26
    16e0:	bf 93       	push	r27
    16e2:	ef 93       	push	r30
    16e4:	ff 93       	push	r31
    16e6:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    16ea:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    16ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16f6:	c9 01       	movw	r24, r18
    16f8:	03 2e       	mov	r0, r19
    16fa:	00 0c       	add	r0, r0
    16fc:	aa 0b       	sbc	r26, r26
    16fe:	bb 0b       	sbc	r27, r27
    1700:	dc 01       	movw	r26, r24
    1702:	99 27       	eor	r25, r25
    1704:	88 27       	eor	r24, r24
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	84 2b       	or	r24, r20
    170c:	95 2b       	or	r25, r21
    170e:	a6 2b       	or	r26, r22
    1710:	b7 2b       	or	r27, r23
    1712:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1716:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    171a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    171e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1722:	b0 9b       	sbis	0x16, 0	; 22
    1724:	1b c0       	rjmp	.+54     	; 0x175c <__vector_19+0x98>
    1726:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    172a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    172e:	c9 01       	movw	r24, r18
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	09 2e       	mov	r0, r25
    1734:	00 0c       	add	r0, r0
    1736:	aa 0b       	sbc	r26, r26
    1738:	bb 0b       	sbc	r27, r27
    173a:	dc 01       	movw	r26, r24
    173c:	99 27       	eor	r25, r25
    173e:	88 27       	eor	r24, r24
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	84 2b       	or	r24, r20
    1746:	95 2b       	or	r25, r21
    1748:	a6 2b       	or	r26, r22
    174a:	b7 2b       	or	r27, r23
    174c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1750:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1754:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1758:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    175c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x1c>
    1760:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x1d>
    1764:	30 97       	sbiw	r30, 0x00	; 0
    1766:	39 f0       	breq	.+14     	; 0x1776 <__vector_19+0xb2>
    1768:	6e e0       	ldi	r22, 0x0E	; 14
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x1c>
    1770:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x1d>
    1774:	09 95       	icall
    1776:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <__vector_20>:
    179c:	1f 92       	push	r1
    179e:	0f 92       	push	r0
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	0f 92       	push	r0
    17a4:	11 24       	eor	r1, r1
    17a6:	2f 93       	push	r18
    17a8:	3f 93       	push	r19
    17aa:	4f 93       	push	r20
    17ac:	5f 93       	push	r21
    17ae:	6f 93       	push	r22
    17b0:	7f 93       	push	r23
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	af 93       	push	r26
    17b8:	bf 93       	push	r27
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
    17be:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    17c2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    17c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17ce:	c9 01       	movw	r24, r18
    17d0:	03 2e       	mov	r0, r19
    17d2:	00 0c       	add	r0, r0
    17d4:	aa 0b       	sbc	r26, r26
    17d6:	bb 0b       	sbc	r27, r27
    17d8:	dc 01       	movw	r26, r24
    17da:	99 27       	eor	r25, r25
    17dc:	88 27       	eor	r24, r24
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	84 2b       	or	r24, r20
    17e4:	95 2b       	or	r25, r21
    17e6:	a6 2b       	or	r26, r22
    17e8:	b7 2b       	or	r27, r23
    17ea:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    17ee:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    17f2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    17f6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    17fa:	b0 9b       	sbis	0x16, 0	; 22
    17fc:	1b c0       	rjmp	.+54     	; 0x1834 <__vector_20+0x98>
    17fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1802:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1806:	c9 01       	movw	r24, r18
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	09 2e       	mov	r0, r25
    180c:	00 0c       	add	r0, r0
    180e:	aa 0b       	sbc	r26, r26
    1810:	bb 0b       	sbc	r27, r27
    1812:	dc 01       	movw	r26, r24
    1814:	99 27       	eor	r25, r25
    1816:	88 27       	eor	r24, r24
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	84 2b       	or	r24, r20
    181e:	95 2b       	or	r25, r21
    1820:	a6 2b       	or	r26, r22
    1822:	b7 2b       	or	r27, r23
    1824:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1828:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    182c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1830:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1834:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x1e>
    1838:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x1f>
    183c:	30 97       	sbiw	r30, 0x00	; 0
    183e:	39 f0       	breq	.+14     	; 0x184e <__vector_20+0xb2>
    1840:	6f e0       	ldi	r22, 0x0F	; 15
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x1e>
    1848:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x1f>
    184c:	09 95       	icall
    184e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_21>:
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    189a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    189e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18a6:	c9 01       	movw	r24, r18
    18a8:	03 2e       	mov	r0, r19
    18aa:	00 0c       	add	r0, r0
    18ac:	aa 0b       	sbc	r26, r26
    18ae:	bb 0b       	sbc	r27, r27
    18b0:	dc 01       	movw	r26, r24
    18b2:	99 27       	eor	r25, r25
    18b4:	88 27       	eor	r24, r24
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	84 2b       	or	r24, r20
    18bc:	95 2b       	or	r25, r21
    18be:	a6 2b       	or	r26, r22
    18c0:	b7 2b       	or	r27, r23
    18c2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    18c6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    18ca:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    18ce:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    18d2:	b0 9b       	sbis	0x16, 0	; 22
    18d4:	1b c0       	rjmp	.+54     	; 0x190c <__vector_21+0x98>
    18d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18de:	c9 01       	movw	r24, r18
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	09 2e       	mov	r0, r25
    18e4:	00 0c       	add	r0, r0
    18e6:	aa 0b       	sbc	r26, r26
    18e8:	bb 0b       	sbc	r27, r27
    18ea:	dc 01       	movw	r26, r24
    18ec:	99 27       	eor	r25, r25
    18ee:	88 27       	eor	r24, r24
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	84 2b       	or	r24, r20
    18f6:	95 2b       	or	r25, r21
    18f8:	a6 2b       	or	r26, r22
    18fa:	b7 2b       	or	r27, r23
    18fc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1900:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1904:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1908:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    190c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x20>
    1910:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x21>
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	39 f0       	breq	.+14     	; 0x1926 <__vector_21+0xb2>
    1918:	60 e1       	ldi	r22, 0x10	; 16
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x20>
    1920:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x21>
    1924:	09 95       	icall
    1926:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    192a:	ff 91       	pop	r31
    192c:	ef 91       	pop	r30
    192e:	bf 91       	pop	r27
    1930:	af 91       	pop	r26
    1932:	9f 91       	pop	r25
    1934:	8f 91       	pop	r24
    1936:	7f 91       	pop	r23
    1938:	6f 91       	pop	r22
    193a:	5f 91       	pop	r21
    193c:	4f 91       	pop	r20
    193e:	3f 91       	pop	r19
    1940:	2f 91       	pop	r18
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <__vector_22>:
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	2f 93       	push	r18
    1958:	3f 93       	push	r19
    195a:	4f 93       	push	r20
    195c:	5f 93       	push	r21
    195e:	6f 93       	push	r22
    1960:	7f 93       	push	r23
    1962:	8f 93       	push	r24
    1964:	9f 93       	push	r25
    1966:	af 93       	push	r26
    1968:	bf 93       	push	r27
    196a:	ef 93       	push	r30
    196c:	ff 93       	push	r31
    196e:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <overflows>
    1972:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <overflows+0x1>
    1976:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    197a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    197e:	c9 01       	movw	r24, r18
    1980:	03 2e       	mov	r0, r19
    1982:	00 0c       	add	r0, r0
    1984:	aa 0b       	sbc	r26, r26
    1986:	bb 0b       	sbc	r27, r27
    1988:	dc 01       	movw	r26, r24
    198a:	99 27       	eor	r25, r25
    198c:	88 27       	eor	r24, r24
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	84 2b       	or	r24, r20
    1994:	95 2b       	or	r25, r21
    1996:	a6 2b       	or	r26, r22
    1998:	b7 2b       	or	r27, r23
    199a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    199e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    19a2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    19a6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    19aa:	b0 9b       	sbis	0x16, 0	; 22
    19ac:	1b c0       	rjmp	.+54     	; 0x19e4 <__vector_22+0x98>
    19ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19b6:	c9 01       	movw	r24, r18
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	09 2e       	mov	r0, r25
    19bc:	00 0c       	add	r0, r0
    19be:	aa 0b       	sbc	r26, r26
    19c0:	bb 0b       	sbc	r27, r27
    19c2:	dc 01       	movw	r26, r24
    19c4:	99 27       	eor	r25, r25
    19c6:	88 27       	eor	r24, r24
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	84 2b       	or	r24, r20
    19ce:	95 2b       	or	r25, r21
    19d0:	a6 2b       	or	r26, r22
    19d2:	b7 2b       	or	r27, r23
    19d4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    19d8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    19dc:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    19e0:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    19e4:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x22>
    19e8:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x23>
    19ec:	30 97       	sbiw	r30, 0x00	; 0
    19ee:	39 f0       	breq	.+14     	; 0x19fe <__vector_22+0xb2>
    19f0:	61 e1       	ldi	r22, 0x11	; 17
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x22>
    19f8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x23>
    19fc:	09 95       	icall
    19fe:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    1a02:	ff 91       	pop	r31
    1a04:	ef 91       	pop	r30
    1a06:	bf 91       	pop	r27
    1a08:	af 91       	pop	r26
    1a0a:	9f 91       	pop	r25
    1a0c:	8f 91       	pop	r24
    1a0e:	7f 91       	pop	r23
    1a10:	6f 91       	pop	r22
    1a12:	5f 91       	pop	r21
    1a14:	4f 91       	pop	r20
    1a16:	3f 91       	pop	r19
    1a18:	2f 91       	pop	r18
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	0f 90       	pop	r0
    1a20:	1f 90       	pop	r1
    1a22:	18 95       	reti

00001a24 <__vector_9>:
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
    1a42:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <overflows>
    1a46:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <overflows+0x1>
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <overflows+0x1>
    1a50:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <overflows>
    1a54:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1a58:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1a5c:	30 97       	sbiw	r30, 0x00	; 0
    1a5e:	39 f0       	breq	.+14     	; 0x1a6e <__vector_9+0x4a>
    1a60:	42 81       	ldd	r20, Z+2	; 0x02
    1a62:	53 81       	ldd	r21, Z+3	; 0x03
    1a64:	64 81       	ldd	r22, Z+4	; 0x04
    1a66:	75 81       	ldd	r23, Z+5	; 0x05
    1a68:	86 17       	cp	r24, r22
    1a6a:	97 07       	cpc	r25, r23
    1a6c:	a1 f0       	breq	.+40     	; 0x1a96 <__vector_9+0x72>
    1a6e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a72:	8d 7f       	andi	r24, 0xFD	; 253
    1a74:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti
    1a96:	ca 01       	movw	r24, r20
    1a98:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a9c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1aa0:	42 1b       	sub	r20, r18
    1aa2:	53 0b       	sbc	r21, r19
    1aa4:	41 30       	cpi	r20, 0x01	; 1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	51 f0       	breq	.+20     	; 0x1abe <__vector_9+0x9a>
    1aaa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1aae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1ab2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1ab6:	82 60       	ori	r24, 0x02	; 2
    1ab8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1abc:	dd cf       	rjmp	.-70     	; 0x1a78 <__vector_9+0x54>
    1abe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ac2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	f0 cf       	rjmp	.-32     	; 0x1aaa <__vector_9+0x86>

00001aca <__vector_7>:
    1aca:	1f 92       	push	r1
    1acc:	0f 92       	push	r0
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	0f 92       	push	r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	8f 92       	push	r8
    1ad6:	9f 92       	push	r9
    1ad8:	af 92       	push	r10
    1ada:	bf 92       	push	r11
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	2f 93       	push	r18
    1aea:	3f 93       	push	r19
    1aec:	4f 93       	push	r20
    1aee:	5f 93       	push	r21
    1af0:	6f 93       	push	r22
    1af2:	7f 93       	push	r23
    1af4:	8f 93       	push	r24
    1af6:	9f 93       	push	r25
    1af8:	af 93       	push	r26
    1afa:	bf 93       	push	r27
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
    1b04:	e0 90 4c 01 	lds	r14, 0x014C	; 0x80014c <overflows>
    1b08:	f0 90 4d 01 	lds	r15, 0x014D	; 0x80014d <overflows+0x1>
    1b0c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b10:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b14:	b0 99       	sbic	0x16, 0	; 22
    1b16:	98 c0       	rjmp	.+304    	; 0x1c48 <__vector_7+0x17e>
    1b18:	47 01       	movw	r8, r14
    1b1a:	0f 2c       	mov	r0, r15
    1b1c:	00 0c       	add	r0, r0
    1b1e:	aa 08       	sbc	r10, r10
    1b20:	bb 08       	sbc	r11, r11
    1b22:	54 01       	movw	r10, r8
    1b24:	99 24       	eor	r9, r9
    1b26:	88 24       	eor	r8, r8
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	88 2a       	or	r8, r24
    1b2e:	99 2a       	or	r9, r25
    1b30:	aa 2a       	or	r10, r26
    1b32:	bb 2a       	or	r11, r27
    1b34:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <timerQ>
    1b38:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <timerQ+0x1>
    1b3c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <msgQ>
    1b40:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <msgQ+0x1>
    1b44:	20 97       	sbiw	r28, 0x00	; 0
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <__vector_7+0x80>
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <__vector_7+0xfe>
    1b4a:	4a 81       	ldd	r20, Y+2	; 0x02
    1b4c:	5b 81       	ldd	r21, Y+3	; 0x03
    1b4e:	6c 81       	ldd	r22, Y+4	; 0x04
    1b50:	7d 81       	ldd	r23, Y+5	; 0x05
    1b52:	8a 01       	movw	r16, r20
    1b54:	9b 01       	movw	r18, r22
    1b56:	08 19       	sub	r16, r8
    1b58:	19 09       	sbc	r17, r9
    1b5a:	2a 09       	sbc	r18, r10
    1b5c:	3b 09       	sbc	r19, r11
    1b5e:	10 16       	cp	r1, r16
    1b60:	11 06       	cpc	r1, r17
    1b62:	12 06       	cpc	r1, r18
    1b64:	13 06       	cpc	r1, r19
    1b66:	0c f4       	brge	.+2      	; 0x1b6a <__vector_7+0xa0>
    1b68:	40 c0       	rjmp	.+128    	; 0x1bea <__vector_7+0x120>
    1b6a:	d8 80       	ld	r13, Y
    1b6c:	c9 80       	ldd	r12, Y+1	; 0x01
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	b9 f1       	breq	.+110    	; 0x1be0 <__vector_7+0x116>
    1b72:	0e 81       	ldd	r16, Y+6	; 0x06
    1b74:	1f 81       	ldd	r17, Y+7	; 0x07
    1b76:	28 85       	ldd	r18, Y+8	; 0x08
    1b78:	39 85       	ldd	r19, Y+9	; 0x09
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	46 81       	ldd	r20, Z+6	; 0x06
    1b7e:	57 81       	ldd	r21, Z+7	; 0x07
    1b80:	60 85       	ldd	r22, Z+8	; 0x08
    1b82:	71 85       	ldd	r23, Z+9	; 0x09
    1b84:	04 17       	cp	r16, r20
    1b86:	15 07       	cpc	r17, r21
    1b88:	26 07       	cpc	r18, r22
    1b8a:	37 07       	cpc	r19, r23
    1b8c:	4c f1       	brlt	.+82     	; 0x1be0 <__vector_7+0x116>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	0a c0       	rjmp	.+20     	; 0x1ba6 <__vector_7+0xdc>
    1b92:	46 81       	ldd	r20, Z+6	; 0x06
    1b94:	57 81       	ldd	r21, Z+7	; 0x07
    1b96:	60 85       	ldd	r22, Z+8	; 0x08
    1b98:	71 85       	ldd	r23, Z+9	; 0x09
    1b9a:	04 17       	cp	r16, r20
    1b9c:	15 07       	cpc	r17, r21
    1b9e:	26 07       	cpc	r18, r22
    1ba0:	37 07       	cpc	r19, r23
    1ba2:	dc f0       	brlt	.+54     	; 0x1bda <__vector_7+0x110>
    1ba4:	df 01       	movw	r26, r30
    1ba6:	ed 91       	ld	r30, X+
    1ba8:	fc 91       	ld	r31, X
    1baa:	11 97       	sbiw	r26, 0x01	; 1
    1bac:	30 97       	sbiw	r30, 0x00	; 0
    1bae:	89 f7       	brne	.-30     	; 0x1b92 <__vector_7+0xc8>
    1bb0:	19 82       	std	Y+1, r1	; 0x01
    1bb2:	18 82       	st	Y, r1
    1bb4:	cd 93       	st	X+, r28
    1bb6:	dc 93       	st	X, r29
    1bb8:	38 2f       	mov	r19, r24
    1bba:	29 2f       	mov	r18, r25
    1bbc:	cd 2d       	mov	r28, r13
    1bbe:	dc 2d       	mov	r29, r12
    1bc0:	83 2f       	mov	r24, r19
    1bc2:	92 2f       	mov	r25, r18
    1bc4:	20 97       	sbiw	r28, 0x00	; 0
    1bc6:	09 f6       	brne	.-126    	; 0x1b4a <__vector_7+0x80>
    1bc8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <timerQ+0x1>
    1bcc:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <timerQ>
    1bd0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <msgQ+0x1>
    1bd4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <msgQ>
    1bd8:	13 c0       	rjmp	.+38     	; 0x1c00 <__vector_7+0x136>
    1bda:	f9 83       	std	Y+1, r31	; 0x01
    1bdc:	e8 83       	st	Y, r30
    1bde:	ea cf       	rjmp	.-44     	; 0x1bb4 <__vector_7+0xea>
    1be0:	99 83       	std	Y+1, r25	; 0x01
    1be2:	88 83       	st	Y, r24
    1be4:	3c 2f       	mov	r19, r28
    1be6:	2d 2f       	mov	r18, r29
    1be8:	e9 cf       	rjmp	.-46     	; 0x1bbc <__vector_7+0xf2>
    1bea:	d0 93 53 01 	sts	0x0153, r29	; 0x800153 <timerQ+0x1>
    1bee:	c0 93 52 01 	sts	0x0152, r28	; 0x800152 <timerQ>
    1bf2:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <msgQ+0x1>
    1bf6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <msgQ>
    1bfa:	e6 16       	cp	r14, r22
    1bfc:	f7 06       	cpc	r15, r23
    1bfe:	d9 f1       	breq	.+118    	; 0x1c76 <__vector_7+0x1ac>
    1c00:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c04:	8d 7f       	andi	r24, 0xFD	; 253
    1c06:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c0a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    1c0e:	ff 91       	pop	r31
    1c10:	ef 91       	pop	r30
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	bf 91       	pop	r27
    1c18:	af 91       	pop	r26
    1c1a:	9f 91       	pop	r25
    1c1c:	8f 91       	pop	r24
    1c1e:	7f 91       	pop	r23
    1c20:	6f 91       	pop	r22
    1c22:	5f 91       	pop	r21
    1c24:	4f 91       	pop	r20
    1c26:	3f 91       	pop	r19
    1c28:	2f 91       	pop	r18
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	df 90       	pop	r13
    1c34:	cf 90       	pop	r12
    1c36:	bf 90       	pop	r11
    1c38:	af 90       	pop	r10
    1c3a:	9f 90       	pop	r9
    1c3c:	8f 90       	pop	r8
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti
    1c48:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c4c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c50:	47 01       	movw	r8, r14
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	88 1a       	sub	r8, r24
    1c56:	98 0a       	sbc	r9, r24
    1c58:	09 2c       	mov	r0, r9
    1c5a:	00 0c       	add	r0, r0
    1c5c:	aa 08       	sbc	r10, r10
    1c5e:	bb 08       	sbc	r11, r11
    1c60:	d4 01       	movw	r26, r8
    1c62:	99 27       	eor	r25, r25
    1c64:	88 27       	eor	r24, r24
    1c66:	49 01       	movw	r8, r18
    1c68:	a1 2c       	mov	r10, r1
    1c6a:	b1 2c       	mov	r11, r1
    1c6c:	88 2a       	or	r8, r24
    1c6e:	99 2a       	or	r9, r25
    1c70:	aa 2a       	or	r10, r26
    1c72:	bb 2a       	or	r11, r27
    1c74:	5f cf       	rjmp	.-322    	; 0x1b34 <__vector_7+0x6a>
    1c76:	ca 01       	movw	r24, r20
    1c78:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c7c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c80:	42 1b       	sub	r20, r18
    1c82:	53 0b       	sbc	r21, r19
    1c84:	41 30       	cpi	r20, 0x01	; 1
    1c86:	51 05       	cpc	r21, r1
    1c88:	51 f0       	breq	.+20     	; 0x1c9e <__vector_7+0x1d4>
    1c8a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c92:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c96:	82 60       	ori	r24, 0x02	; 2
    1c98:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c9c:	b6 cf       	rjmp	.-148    	; 0x1c0a <__vector_7+0x140>
    1c9e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ca2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	f0 cf       	rjmp	.-32     	; 0x1c8a <__vector_7+0x1c0>

00001caa <async>:
    1caa:	3f 92       	push	r3
    1cac:	4f 92       	push	r4
    1cae:	5f 92       	push	r5
    1cb0:	6f 92       	push	r6
    1cb2:	7f 92       	push	r7
    1cb4:	8f 92       	push	r8
    1cb6:	9f 92       	push	r9
    1cb8:	af 92       	push	r10
    1cba:	bf 92       	push	r11
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	ef b7       	in	r30, 0x3f	; 63
    1cce:	e0 78       	andi	r30, 0x80	; 128
    1cd0:	3e 2e       	mov	r3, r30
    1cd2:	f8 94       	cli
    1cd4:	c0 91 3a 01 	lds	r28, 0x013A	; 0x80013a <msgPool>
    1cd8:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <msgPool+0x1>
    1cdc:	20 97       	sbiw	r28, 0x00	; 0
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <async+0x38>
    1ce0:	52 c1       	rjmp	.+676    	; 0x1f86 <async+0x2dc>
    1ce2:	e8 81       	ld	r30, Y
    1ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ce6:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <msgPool+0x1>
    1cea:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <msgPool>
    1cee:	1b 87       	std	Y+11, r17	; 0x0b
    1cf0:	0a 87       	std	Y+10, r16	; 0x0a
    1cf2:	fd 86       	std	Y+13, r15	; 0x0d
    1cf4:	ec 86       	std	Y+12, r14	; 0x0c
    1cf6:	df 86       	std	Y+15, r13	; 0x0f
    1cf8:	ce 86       	std	Y+14, r12	; 0x0e
    1cfa:	33 20       	and	r3, r3
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <async+0x56>
    1cfe:	6f c0       	rjmp	.+222    	; 0x1dde <async+0x134>
    1d00:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    1d04:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    1d08:	02 80       	ldd	r0, Z+2	; 0x02
    1d0a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d0c:	e0 2d       	mov	r30, r0
    1d0e:	c2 80       	ldd	r12, Z+2	; 0x02
    1d10:	d3 80       	ldd	r13, Z+3	; 0x03
    1d12:	e4 80       	ldd	r14, Z+4	; 0x04
    1d14:	f5 80       	ldd	r15, Z+5	; 0x05
    1d16:	c6 0e       	add	r12, r22
    1d18:	d7 1e       	adc	r13, r23
    1d1a:	e8 1e       	adc	r14, r24
    1d1c:	f9 1e       	adc	r15, r25
    1d1e:	ca 82       	std	Y+2, r12	; 0x02
    1d20:	db 82       	std	Y+3, r13	; 0x03
    1d22:	ec 82       	std	Y+4, r14	; 0x04
    1d24:	fd 82       	std	Y+5, r15	; 0x05
    1d26:	12 16       	cp	r1, r18
    1d28:	13 06       	cpc	r1, r19
    1d2a:	14 06       	cpc	r1, r20
    1d2c:	15 06       	cpc	r1, r21
    1d2e:	0c f0       	brlt	.+2      	; 0x1d32 <async+0x88>
    1d30:	f8 c0       	rjmp	.+496    	; 0x1f22 <async+0x278>
    1d32:	da 01       	movw	r26, r20
    1d34:	c9 01       	movw	r24, r18
    1d36:	8c 01       	movw	r16, r24
    1d38:	9d 01       	movw	r18, r26
    1d3a:	0c 0d       	add	r16, r12
    1d3c:	1d 1d       	adc	r17, r13
    1d3e:	2e 1d       	adc	r18, r14
    1d40:	3f 1d       	adc	r19, r15
    1d42:	0e 83       	std	Y+6, r16	; 0x06
    1d44:	1f 83       	std	Y+7, r17	; 0x07
    1d46:	28 87       	std	Y+8, r18	; 0x08
    1d48:	39 87       	std	Y+9, r19	; 0x09
    1d4a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <overflows>
    1d4e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <overflows+0x1>
    1d52:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d56:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d5a:	b0 99       	sbic	0x16, 0	; 22
    1d5c:	49 c0       	rjmp	.+146    	; 0x1df0 <async+0x146>
    1d5e:	2c 01       	movw	r4, r24
    1d60:	09 2e       	mov	r0, r25
    1d62:	00 0c       	add	r0, r0
    1d64:	66 08       	sbc	r6, r6
    1d66:	77 08       	sbc	r7, r7
    1d68:	52 01       	movw	r10, r4
    1d6a:	99 24       	eor	r9, r9
    1d6c:	88 24       	eor	r8, r8
    1d6e:	2b 01       	movw	r4, r22
    1d70:	61 2c       	mov	r6, r1
    1d72:	71 2c       	mov	r7, r1
    1d74:	48 28       	or	r4, r8
    1d76:	59 28       	or	r5, r9
    1d78:	6a 28       	or	r6, r10
    1d7a:	7b 28       	or	r7, r11
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	a6 01       	movw	r20, r12
    1d80:	44 19       	sub	r20, r4
    1d82:	55 09       	sbc	r21, r5
    1d84:	66 09       	sbc	r22, r6
    1d86:	77 09       	sbc	r23, r7
    1d88:	14 16       	cp	r1, r20
    1d8a:	15 06       	cpc	r1, r21
    1d8c:	16 06       	cpc	r1, r22
    1d8e:	17 06       	cpc	r1, r23
    1d90:	0c f0       	brlt	.+2      	; 0x1d94 <async+0xea>
    1d92:	68 c0       	rjmp	.+208    	; 0x1e64 <async+0x1ba>
    1d94:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <timerQ>
    1d98:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <timerQ+0x1>
    1d9c:	10 97       	sbiw	r26, 0x00	; 0
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <async+0xf8>
    1da0:	dc c0       	rjmp	.+440    	; 0x1f5a <async+0x2b0>
    1da2:	12 96       	adiw	r26, 0x02	; 2
    1da4:	0d 91       	ld	r16, X+
    1da6:	1d 91       	ld	r17, X+
    1da8:	2d 91       	ld	r18, X+
    1daa:	3c 91       	ld	r19, X
    1dac:	15 97       	sbiw	r26, 0x05	; 5
    1dae:	c0 16       	cp	r12, r16
    1db0:	d1 06       	cpc	r13, r17
    1db2:	e2 06       	cpc	r14, r18
    1db4:	f3 06       	cpc	r15, r19
    1db6:	5c f4       	brge	.+22     	; 0x1dce <async+0x124>
    1db8:	d0 c0       	rjmp	.+416    	; 0x1f5a <async+0x2b0>
    1dba:	42 81       	ldd	r20, Z+2	; 0x02
    1dbc:	53 81       	ldd	r21, Z+3	; 0x03
    1dbe:	64 81       	ldd	r22, Z+4	; 0x04
    1dc0:	75 81       	ldd	r23, Z+5	; 0x05
    1dc2:	c4 16       	cp	r12, r20
    1dc4:	d5 06       	cpc	r13, r21
    1dc6:	e6 06       	cpc	r14, r22
    1dc8:	f7 06       	cpc	r15, r23
    1dca:	4c f1       	brlt	.+82     	; 0x1e1e <async+0x174>
    1dcc:	df 01       	movw	r26, r30
    1dce:	ed 91       	ld	r30, X+
    1dd0:	fc 91       	ld	r31, X
    1dd2:	11 97       	sbiw	r26, 0x01	; 1
    1dd4:	30 97       	sbiw	r30, 0x00	; 0
    1dd6:	89 f7       	brne	.-30     	; 0x1dba <async+0x110>
    1dd8:	19 82       	std	Y+1, r1	; 0x01
    1dda:	18 82       	st	Y, r1
    1ddc:	22 c0       	rjmp	.+68     	; 0x1e22 <async+0x178>
    1dde:	c0 90 4e 01 	lds	r12, 0x014E	; 0x80014e <timestamp>
    1de2:	d0 90 4f 01 	lds	r13, 0x014F	; 0x80014f <timestamp+0x1>
    1de6:	e0 90 50 01 	lds	r14, 0x0150	; 0x800150 <timestamp+0x2>
    1dea:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <timestamp+0x3>
    1dee:	93 cf       	rjmp	.-218    	; 0x1d16 <async+0x6c>
    1df0:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1df4:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1df8:	2c 01       	movw	r4, r24
    1dfa:	4f ef       	ldi	r20, 0xFF	; 255
    1dfc:	44 1a       	sub	r4, r20
    1dfe:	54 0a       	sbc	r5, r20
    1e00:	05 2c       	mov	r0, r5
    1e02:	00 0c       	add	r0, r0
    1e04:	66 08       	sbc	r6, r6
    1e06:	77 08       	sbc	r7, r7
    1e08:	b2 01       	movw	r22, r4
    1e0a:	55 27       	eor	r21, r21
    1e0c:	44 27       	eor	r20, r20
    1e0e:	2f 01       	movw	r4, r30
    1e10:	61 2c       	mov	r6, r1
    1e12:	71 2c       	mov	r7, r1
    1e14:	44 2a       	or	r4, r20
    1e16:	55 2a       	or	r5, r21
    1e18:	66 2a       	or	r6, r22
    1e1a:	77 2a       	or	r7, r23
    1e1c:	af cf       	rjmp	.-162    	; 0x1d7c <async+0xd2>
    1e1e:	f9 83       	std	Y+1, r31	; 0x01
    1e20:	e8 83       	st	Y, r30
    1e22:	cd 93       	st	X+, r28
    1e24:	dc 93       	st	X, r29
    1e26:	82 17       	cp	r24, r18
    1e28:	93 07       	cpc	r25, r19
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <async+0x184>
    1e2c:	7f c0       	rjmp	.+254    	; 0x1f2c <async+0x282>
    1e2e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1e32:	8d 7f       	andi	r24, 0xFD	; 253
    1e34:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1e38:	33 20       	and	r3, r3
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <async+0x194>
    1e3c:	78 94       	sei
    1e3e:	ce 01       	movw	r24, r28
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    1e56:	8f 90       	pop	r8
    1e58:	7f 90       	pop	r7
    1e5a:	6f 90       	pop	r6
    1e5c:	5f 90       	pop	r5
    1e5e:	4f 90       	pop	r4
    1e60:	3f 90       	pop	r3
    1e62:	08 95       	ret
    1e64:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <msgQ>
    1e68:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <msgQ+0x1>
    1e6c:	10 97       	sbiw	r26, 0x00	; 0
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <async+0x1c8>
    1e70:	83 c0       	rjmp	.+262    	; 0x1f78 <async+0x2ce>
    1e72:	16 96       	adiw	r26, 0x06	; 6
    1e74:	cd 90       	ld	r12, X+
    1e76:	dd 90       	ld	r13, X+
    1e78:	ed 90       	ld	r14, X+
    1e7a:	fc 90       	ld	r15, X
    1e7c:	19 97       	sbiw	r26, 0x09	; 9
    1e7e:	0c 15       	cp	r16, r12
    1e80:	1d 05       	cpc	r17, r13
    1e82:	2e 05       	cpc	r18, r14
    1e84:	3f 05       	cpc	r19, r15
    1e86:	64 f4       	brge	.+24     	; 0x1ea0 <async+0x1f6>
    1e88:	77 c0       	rjmp	.+238    	; 0x1f78 <async+0x2ce>
    1e8a:	c6 80       	ldd	r12, Z+6	; 0x06
    1e8c:	d7 80       	ldd	r13, Z+7	; 0x07
    1e8e:	e0 84       	ldd	r14, Z+8	; 0x08
    1e90:	f1 84       	ldd	r15, Z+9	; 0x09
    1e92:	0c 15       	cp	r16, r12
    1e94:	1d 05       	cpc	r17, r13
    1e96:	2e 05       	cpc	r18, r14
    1e98:	3f 05       	cpc	r19, r15
    1e9a:	0c f4       	brge	.+2      	; 0x1e9e <async+0x1f4>
    1e9c:	5b c0       	rjmp	.+182    	; 0x1f54 <async+0x2aa>
    1e9e:	df 01       	movw	r26, r30
    1ea0:	ed 91       	ld	r30, X+
    1ea2:	fc 91       	ld	r31, X
    1ea4:	11 97       	sbiw	r26, 0x01	; 1
    1ea6:	30 97       	sbiw	r30, 0x00	; 0
    1ea8:	81 f7       	brne	.-32     	; 0x1e8a <async+0x1e0>
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	18 82       	st	Y, r1
    1eae:	cd 93       	st	X+, r28
    1eb0:	dc 93       	st	X, r29
    1eb2:	33 20       	and	r3, r3
    1eb4:	21 f2       	breq	.-120    	; 0x1e3e <async+0x194>
    1eb6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
    1eba:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <async+0x21a>
    1ec2:	bc cf       	rjmp	.-136    	; 0x1e3c <async+0x192>
    1ec4:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <activeStack>
    1ec8:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <activeStack+0x1>
    1ecc:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <msgQ>
    1ed0:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <msgQ+0x1>
    1ed4:	02 81       	ldd	r16, Z+2	; 0x02
    1ed6:	13 81       	ldd	r17, Z+3	; 0x03
    1ed8:	d9 01       	movw	r26, r18
    1eda:	16 96       	adiw	r26, 0x06	; 6
    1edc:	4d 91       	ld	r20, X+
    1ede:	5d 91       	ld	r21, X+
    1ee0:	6d 91       	ld	r22, X+
    1ee2:	7c 91       	ld	r23, X
    1ee4:	19 97       	sbiw	r26, 0x09	; 9
    1ee6:	d8 01       	movw	r26, r16
    1ee8:	16 96       	adiw	r26, 0x06	; 6
    1eea:	0d 91       	ld	r16, X+
    1eec:	1d 91       	ld	r17, X+
    1eee:	2d 91       	ld	r18, X+
    1ef0:	3c 91       	ld	r19, X
    1ef2:	19 97       	sbiw	r26, 0x09	; 9
    1ef4:	40 1b       	sub	r20, r16
    1ef6:	51 0b       	sbc	r21, r17
    1ef8:	62 0b       	sbc	r22, r18
    1efa:	73 0b       	sbc	r23, r19
    1efc:	77 ff       	sbrs	r23, 7
    1efe:	9e cf       	rjmp	.-196    	; 0x1e3c <async+0x192>
    1f00:	dc 01       	movw	r26, r24
    1f02:	2d 91       	ld	r18, X+
    1f04:	3c 91       	ld	r19, X
    1f06:	11 97       	sbiw	r26, 0x01	; 1
    1f08:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <threadPool+0x1>
    1f0c:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <threadPool>
    1f10:	ed 93       	st	X+, r30
    1f12:	fc 93       	st	X, r31
    1f14:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <activeStack+0x1>
    1f18:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <activeStack>
    1f1c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <dispatch>
    1f20:	8d cf       	rjmp	.-230    	; 0x1e3c <async+0x192>
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	9f ef       	ldi	r25, 0xFF	; 255
    1f26:	af ef       	ldi	r26, 0xFF	; 255
    1f28:	bf e7       	ldi	r27, 0x7F	; 127
    1f2a:	05 cf       	rjmp	.-502    	; 0x1d36 <async+0x8c>
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f36:	04 1b       	sub	r16, r20
    1f38:	15 0b       	sbc	r17, r21
    1f3a:	01 30       	cpi	r16, 0x01	; 1
    1f3c:	11 05       	cpc	r17, r1
    1f3e:	b1 f0       	breq	.+44     	; 0x1f6c <async+0x2c2>
    1f40:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f44:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1f48:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1f4c:	82 60       	ori	r24, 0x02	; 2
    1f4e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1f52:	72 cf       	rjmp	.-284    	; 0x1e38 <async+0x18e>
    1f54:	f9 83       	std	Y+1, r31	; 0x01
    1f56:	e8 83       	st	Y, r30
    1f58:	aa cf       	rjmp	.-172    	; 0x1eae <async+0x204>
    1f5a:	b9 83       	std	Y+1, r27	; 0x01
    1f5c:	a8 83       	st	Y, r26
    1f5e:	d0 93 53 01 	sts	0x0153, r29	; 0x800153 <timerQ+0x1>
    1f62:	c0 93 52 01 	sts	0x0152, r28	; 0x800152 <timerQ>
    1f66:	97 01       	movw	r18, r14
    1f68:	86 01       	movw	r16, r12
    1f6a:	5d cf       	rjmp	.-326    	; 0x1e26 <async+0x17c>
    1f6c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f70:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f74:	01 96       	adiw	r24, 0x01	; 1
    1f76:	e4 cf       	rjmp	.-56     	; 0x1f40 <async+0x296>
    1f78:	b9 83       	std	Y+1, r27	; 0x01
    1f7a:	a8 83       	st	Y, r26
    1f7c:	d0 93 55 01 	sts	0x0155, r29	; 0x800155 <msgQ+0x1>
    1f80:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <msgQ>
    1f84:	96 cf       	rjmp	.-212    	; 0x1eb2 <async+0x208>
    1f86:	0e 94 6f 05 	call	0xade	; 0xade <dequeue.part.0>

00001f8a <sync>:
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	ec 01       	movw	r28, r24
    1f9c:	7b 01       	movw	r14, r22
    1f9e:	6a 01       	movw	r12, r20
    1fa0:	1f b7       	in	r17, 0x3f	; 63
    1fa2:	10 78       	andi	r17, 0x80	; 128
    1fa4:	f8 94       	cli
    1fa6:	a8 81       	ld	r26, Y
    1fa8:	b9 81       	ldd	r27, Y+1	; 0x01
    1faa:	10 97       	sbiw	r26, 0x00	; 0
    1fac:	19 f4       	brne	.+6      	; 0x1fb4 <sync+0x2a>
    1fae:	62 c0       	rjmp	.+196    	; 0x2074 <sync+0xea>
    1fb0:	a0 81       	ld	r26, Z
    1fb2:	b1 81       	ldd	r27, Z+1	; 0x01
    1fb4:	14 96       	adiw	r26, 0x04	; 4
    1fb6:	ed 91       	ld	r30, X+
    1fb8:	fc 91       	ld	r31, X
    1fba:	15 97       	sbiw	r26, 0x05	; 5
    1fbc:	30 97       	sbiw	r30, 0x00	; 0
    1fbe:	c1 f7       	brne	.-16     	; 0x1fb0 <sync+0x26>
    1fc0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <current>
    1fc4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <current+0x1>
    1fc8:	2a 17       	cp	r18, r26
    1fca:	3b 07       	cpc	r19, r27
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <sync+0x46>
    1fce:	4c c0       	rjmp	.+152    	; 0x2068 <sync+0xde>
    1fd0:	11 23       	and	r17, r17
    1fd2:	a1 f1       	breq	.+104    	; 0x203c <sync+0xb2>
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <sync+0x58>
    1fdc:	fc 01       	movw	r30, r24
    1fde:	15 82       	std	Z+5, r1	; 0x05
    1fe0:	14 82       	std	Z+4, r1	; 0x04
    1fe2:	3b 83       	std	Y+3, r19	; 0x03
    1fe4:	2a 83       	std	Y+2, r18	; 0x02
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	d5 83       	std	Z+5, r29	; 0x05
    1fea:	c4 83       	std	Z+4, r28	; 0x04
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 0f 05 	call	0xa1e	; 0xa1e <dispatch>
    1ff2:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    1ff6:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	89 2b       	or	r24, r25
    2000:	09 f4       	brne	.+2      	; 0x2004 <sync+0x7a>
    2002:	41 c0       	rjmp	.+130    	; 0x2086 <sync+0xfc>
    2004:	f9 83       	std	Y+1, r31	; 0x01
    2006:	e8 83       	st	Y, r30
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	09 f0       	breq	.+2      	; 0x2012 <sync+0x88>
    2010:	78 94       	sei
    2012:	b6 01       	movw	r22, r12
    2014:	ce 01       	movw	r24, r28
    2016:	f7 01       	movw	r30, r14
    2018:	09 95       	icall
    201a:	f8 2e       	mov	r15, r24
    201c:	09 2f       	mov	r16, r25
    201e:	8f b7       	in	r24, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	19 82       	std	Y+1, r1	; 0x01
    2024:	18 82       	st	Y, r1
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	9b 81       	ldd	r25, Y+3	; 0x03
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	91 05       	cpc	r25, r1
    202e:	a0 f4       	brcc	.+40     	; 0x2058 <sync+0xce>
    2030:	11 23       	and	r17, r17
    2032:	79 f0       	breq	.+30     	; 0x2052 <sync+0xc8>
    2034:	78 94       	sei
    2036:	8f 2d       	mov	r24, r15
    2038:	90 2f       	mov	r25, r16
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <sync+0xb6>
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	9f ef       	ldi	r25, 0xFF	; 255
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	08 95       	ret
    2052:	8f 2d       	mov	r24, r15
    2054:	90 2f       	mov	r25, r16
    2056:	f4 cf       	rjmp	.-24     	; 0x2040 <sync+0xb6>
    2058:	1b 82       	std	Y+3, r1	; 0x03
    205a:	1a 82       	std	Y+2, r1	; 0x02
    205c:	fc 01       	movw	r30, r24
    205e:	15 82       	std	Z+5, r1	; 0x05
    2060:	14 82       	std	Z+4, r1	; 0x04
    2062:	0e 94 0f 05 	call	0xa1e	; 0xa1e <dispatch>
    2066:	e4 cf       	rjmp	.-56     	; 0x2030 <sync+0xa6>
    2068:	11 23       	and	r17, r17
    206a:	41 f3       	breq	.-48     	; 0x203c <sync+0xb2>
    206c:	78 94       	sei
    206e:	8f ef       	ldi	r24, 0xFF	; 255
    2070:	9f ef       	ldi	r25, 0xFF	; 255
    2072:	e6 cf       	rjmp	.-52     	; 0x2040 <sync+0xb6>
    2074:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current>
    2078:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current+0x1>
    207c:	99 83       	std	Y+1, r25	; 0x01
    207e:	88 83       	st	Y, r24
    2080:	11 23       	and	r17, r17
    2082:	39 f2       	breq	.-114    	; 0x2012 <sync+0x88>
    2084:	c1 cf       	rjmp	.-126    	; 0x2008 <sync+0x7e>
    2086:	78 94       	sei
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	d9 cf       	rjmp	.-78     	; 0x2040 <sync+0xb6>

0000208e <run>:
    208e:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <msgQ>
    2092:	d0 91 55 01 	lds	r29, 0x0155	; 0x800155 <msgQ+0x1>
    2096:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    209a:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    209e:	20 97       	sbiw	r28, 0x00	; 0
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <run+0x16>
    20a2:	6e c0       	rjmp	.+220    	; 0x2180 <run+0xf2>
    20a4:	88 81       	ld	r24, Y
    20a6:	99 81       	ldd	r25, Y+1	; 0x01
    20a8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <msgQ+0x1>
    20ac:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <msgQ>
    20b0:	d3 83       	std	Z+3, r29	; 0x03
    20b2:	c2 83       	std	Z+2, r28	; 0x02
    20b4:	78 94       	sei
    20b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    20b8:	5f 85       	ldd	r21, Y+15	; 0x0f
    20ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    20bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    20be:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <sync>
    20c6:	8f b7       	in	r24, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msgPool>
    20ce:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msgPool+0x1>
    20d2:	99 83       	std	Y+1, r25	; 0x01
    20d4:	88 83       	st	Y, r24
    20d6:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <msgPool+0x1>
    20da:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <msgPool>
    20de:	e0 90 36 01 	lds	r14, 0x0136	; 0x800136 <activeStack>
    20e2:	f0 90 37 01 	lds	r15, 0x0137	; 0x800137 <activeStack+0x1>
    20e6:	f7 01       	movw	r30, r14
    20e8:	a0 81       	ld	r26, Z
    20ea:	b1 81       	ldd	r27, Z+1	; 0x01
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	8d 91       	ld	r24, X+
    20f0:	9c 91       	ld	r25, X
    20f2:	13 97       	sbiw	r26, 0x03	; 3
    20f4:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <msgQ>
    20f8:	d0 91 55 01 	lds	r29, 0x0155	; 0x800155 <msgQ+0x1>
    20fc:	20 97       	sbiw	r28, 0x00	; 0
    20fe:	a9 f0       	breq	.+42     	; 0x212a <run+0x9c>
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	49 f2       	breq	.-110    	; 0x2096 <run+0x8>
    2104:	4e 81       	ldd	r20, Y+6	; 0x06
    2106:	5f 81       	ldd	r21, Y+7	; 0x07
    2108:	68 85       	ldd	r22, Y+8	; 0x08
    210a:	79 85       	ldd	r23, Y+9	; 0x09
    210c:	fc 01       	movw	r30, r24
    210e:	06 81       	ldd	r16, Z+6	; 0x06
    2110:	17 81       	ldd	r17, Z+7	; 0x07
    2112:	20 85       	ldd	r18, Z+8	; 0x08
    2114:	31 85       	ldd	r19, Z+9	; 0x09
    2116:	40 1b       	sub	r20, r16
    2118:	51 0b       	sbc	r21, r17
    211a:	62 0b       	sbc	r22, r18
    211c:	73 0b       	sbc	r23, r19
    211e:	14 16       	cp	r1, r20
    2120:	15 06       	cpc	r1, r21
    2122:	16 06       	cpc	r1, r22
    2124:	17 06       	cpc	r1, r23
    2126:	0c f0       	brlt	.+2      	; 0x212a <run+0x9c>
    2128:	b6 cf       	rjmp	.-148    	; 0x2096 <run+0x8>
    212a:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <activeStack+0x1>
    212e:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <activeStack>
    2132:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <threadPool>
    2136:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <threadPool+0x1>
    213a:	f7 01       	movw	r30, r14
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	f0 92 39 01 	sts	0x0139, r15	; 0x800139 <threadPool+0x1>
    2144:	e0 92 38 01 	sts	0x0138, r14	; 0x800138 <threadPool>
    2148:	14 96       	adiw	r26, 0x04	; 4
    214a:	ed 91       	ld	r30, X+
    214c:	fc 91       	ld	r31, X
    214e:	15 97       	sbiw	r26, 0x05	; 5
    2150:	30 97       	sbiw	r30, 0x00	; 0
    2152:	41 f0       	breq	.+16     	; 0x2164 <run+0xd6>
    2154:	a0 81       	ld	r26, Z
    2156:	b1 81       	ldd	r27, Z+1	; 0x01
    2158:	14 96       	adiw	r26, 0x04	; 4
    215a:	ed 91       	ld	r30, X+
    215c:	fc 91       	ld	r31, X
    215e:	15 97       	sbiw	r26, 0x05	; 5
    2160:	30 97       	sbiw	r30, 0x00	; 0
    2162:	c1 f7       	brne	.-16     	; 0x2154 <run+0xc6>
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 0f 05 	call	0xa1e	; 0xa1e <dispatch>
    216a:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <msgQ>
    216e:	d0 91 55 01 	lds	r29, 0x0155	; 0x800155 <msgQ+0x1>
    2172:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <current>
    2176:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <current+0x1>
    217a:	20 97       	sbiw	r28, 0x00	; 0
    217c:	09 f0       	breq	.+2      	; 0x2180 <run+0xf2>
    217e:	92 cf       	rjmp	.-220    	; 0x20a4 <run+0x16>
    2180:	0e 94 6f 05 	call	0xade	; 0xade <dequeue.part.0>

00002184 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2184:	42 31       	cpi	r20, 0x12	; 18
    2186:	b8 f4       	brcc	.+46     	; 0x21b6 <install+0x32>
        char status;
        DISABLE(status);
    2188:	2f b7       	in	r18, 0x3f	; 63
    218a:	f8 94       	cli
        otable[i] = obj;
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	44 0f       	add	r20, r20
    2190:	55 1f       	adc	r21, r21
    2192:	fa 01       	movw	r30, r20
    2194:	ea 5a       	subi	r30, 0xAA	; 170
    2196:	fe 4f       	sbci	r31, 0xFE	; 254
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
        mtable[i] = m;
    219c:	fa 01       	movw	r30, r20
    219e:	e2 51       	subi	r30, 0x12	; 18
    21a0:	fe 4f       	sbci	r31, 0xFE	; 254
    21a2:	71 83       	std	Z+1, r23	; 0x01
    21a4:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	fc 01       	movw	r30, r24
    21ac:	53 83       	std	Z+3, r21	; 0x03
    21ae:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    21b0:	27 ff       	sbrs	r18, 7
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <install+0x32>
    21b4:	78 94       	sei
    21b6:	08 95       	ret

000021b8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21b8:	8c 01       	movw	r16, r24
    21ba:	7b 01       	movw	r14, r22
    21bc:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21be:	8f b7       	in	r24, 0x3f	; 63
    21c0:	f8 94       	cli
    initialize();
    21c2:	0e 94 a4 04 	call	0x948	; 0x948 <initialize>
    ENABLE(1);
    21c6:	78 94       	sei
    if (m != NULL)
    21c8:	e1 14       	cp	r14, r1
    21ca:	f1 04       	cpc	r15, r1
    21cc:	41 f0       	breq	.+16     	; 0x21de <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	a9 01       	movw	r20, r18
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	cb 01       	movw	r24, r22
    21da:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
    DISABLE(status);
    21de:	8f b7       	in	r24, 0x3f	; 63
    21e0:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    21e2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <schedule>
    ENABLE(1);
    21e6:	78 94       	sei
    while (1) {
        SLEEP();
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	83 bf       	out	0x33, r24	; 51
    21ec:	88 95       	sleep
    21ee:	fd cf       	rjmp	.-6      	; 0x21ea <tinytimber+0x32>

000021f0 <trafficLightFunc>:
	self->focus = !self->focus;
}
*/


void trafficLightFunc(TrafficLight* self){
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	ec 01       	movw	r28, r24
	
	
	switch(self->focus){
    2202:	8e 81       	ldd	r24, Y+6	; 0x06
    2204:	9f 81       	ldd	r25, Y+7	; 0x07
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	09 f4       	brne	.+2      	; 0x220c <trafficLightFunc+0x1c>
    220a:	40 c0       	rjmp	.+128    	; 0x228c <trafficLightFunc+0x9c>
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	91 05       	cpc	r25, r1
    2210:	09 f1       	breq	.+66     	; 0x2254 <trafficLightFunc+0x64>
		default:
		break;
	}
	
	
	self->focus = !self->focus;
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	89 2b       	or	r24, r25
    2218:	11 f0       	breq	.+4      	; 0x221e <trafficLightFunc+0x2e>
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	3f 83       	std	Y+7, r19	; 0x07
    2220:	2e 83       	std	Y+6, r18	; 0x06
	
	
	#define ON_TIME 3	// Time light is green
	
	AFTER(SEC(ON_TIME + 5), self, trafficLightFunc, NULL);
    2222:	c1 2c       	mov	r12, r1
    2224:	d1 2c       	mov	r13, r1
    2226:	88 ef       	ldi	r24, 0xF8	; 248
    2228:	e8 2e       	mov	r14, r24
    222a:	80 e1       	ldi	r24, 0x10	; 16
    222c:	f8 2e       	mov	r15, r24
    222e:	8e 01       	movw	r16, r28
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	a9 01       	movw	r20, r18
    2236:	60 e9       	ldi	r22, 0x90	; 144
    2238:	70 ed       	ldi	r23, 0xD0	; 208
    223a:	83 e0       	ldi	r24, 0x03	; 3
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
	}
	SYNC(self, switchFocus, NULL);
	AFTER(SEC(i+5), self, trafficLight, NULL);
	*/
	
}
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	08 95       	ret
			SYNC(self->simWriter, southboundRedLight, NULL);
			AFTER(SEC(5),self->simWriter, northboundGreenLight, NULL);
		break;
		
		case 1:
			SYNC(self->simWriter, northboundRedLight, NULL);
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	6b e3       	ldi	r22, 0x3B	; 59
    225a:	74 e0       	ldi	r23, 0x04	; 4
    225c:	8c 81       	ldd	r24, Y+4	; 0x04
    225e:	9d 81       	ldd	r25, Y+5	; 0x05
    2260:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <sync>
			AFTER(SEC(5), self->simWriter, southboundGreenLight, NULL);
    2264:	0c 81       	ldd	r16, Y+4	; 0x04
    2266:	1d 81       	ldd	r17, Y+5	; 0x05
    2268:	c1 2c       	mov	r12, r1
    226a:	d1 2c       	mov	r13, r1
    226c:	9e e5       	ldi	r25, 0x5E	; 94
    226e:	e9 2e       	mov	r14, r25
    2270:	94 e0       	ldi	r25, 0x04	; 4
    2272:	f9 2e       	mov	r15, r25
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	a9 01       	movw	r20, r18
    227a:	6a e5       	ldi	r22, 0x5A	; 90
    227c:	72 e6       	ldi	r23, 0x62	; 98
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
		break;
    228a:	c3 cf       	rjmp	.-122    	; 0x2212 <trafficLightFunc+0x22>
void trafficLightFunc(TrafficLight* self){
	
	
	switch(self->focus){
		case 0:
			SYNC(self->simWriter, southboundRedLight, NULL);
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	61 e8       	ldi	r22, 0x81	; 129
    2292:	74 e0       	ldi	r23, 0x04	; 4
    2294:	8c 81       	ldd	r24, Y+4	; 0x04
    2296:	9d 81       	ldd	r25, Y+5	; 0x05
    2298:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <sync>
			AFTER(SEC(5),self->simWriter, northboundGreenLight, NULL);
    229c:	0c 81       	ldd	r16, Y+4	; 0x04
    229e:	1d 81       	ldd	r17, Y+5	; 0x05
    22a0:	c1 2c       	mov	r12, r1
    22a2:	d1 2c       	mov	r13, r1
    22a4:	28 e1       	ldi	r18, 0x18	; 24
    22a6:	e2 2e       	mov	r14, r18
    22a8:	24 e0       	ldi	r18, 0x04	; 4
    22aa:	f2 2e       	mov	r15, r18
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	a9 01       	movw	r20, r18
    22b2:	6a e5       	ldi	r22, 0x5A	; 90
    22b4:	72 e6       	ldi	r23, 0x62	; 98
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 55 0e 	call	0x1caa	; 0x1caa <async>
    22be:	8e 81       	ldd	r24, Y+6	; 0x06
    22c0:	9f 81       	ldd	r25, Y+7	; 0x07
		break;
    22c2:	a7 cf       	rjmp	.-178    	; 0x2212 <trafficLightFunc+0x22>

000022c4 <__divmodhi4>:
    22c4:	97 fb       	bst	r25, 7
    22c6:	07 2e       	mov	r0, r23
    22c8:	16 f4       	brtc	.+4      	; 0x22ce <__divmodhi4+0xa>
    22ca:	00 94       	com	r0
    22cc:	07 d0       	rcall	.+14     	; 0x22dc <__divmodhi4_neg1>
    22ce:	77 fd       	sbrc	r23, 7
    22d0:	09 d0       	rcall	.+18     	; 0x22e4 <__divmodhi4_neg2>
    22d2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
    22d6:	07 fc       	sbrc	r0, 7
    22d8:	05 d0       	rcall	.+10     	; 0x22e4 <__divmodhi4_neg2>
    22da:	3e f4       	brtc	.+14     	; 0x22ea <__divmodhi4_exit>

000022dc <__divmodhi4_neg1>:
    22dc:	90 95       	com	r25
    22de:	81 95       	neg	r24
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	08 95       	ret

000022e4 <__divmodhi4_neg2>:
    22e4:	70 95       	com	r23
    22e6:	61 95       	neg	r22
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255

000022ea <__divmodhi4_exit>:
    22ea:	08 95       	ret

000022ec <__tablejump2__>:
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	05 90       	lpm	r0, Z+
    22f2:	f4 91       	lpm	r31, Z
    22f4:	e0 2d       	mov	r30, r0
    22f6:	09 94       	ijmp

000022f8 <__udivmodhi4>:
    22f8:	aa 1b       	sub	r26, r26
    22fa:	bb 1b       	sub	r27, r27
    22fc:	51 e1       	ldi	r21, 0x11	; 17
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <__udivmodhi4_ep>

00002300 <__udivmodhi4_loop>:
    2300:	aa 1f       	adc	r26, r26
    2302:	bb 1f       	adc	r27, r27
    2304:	a6 17       	cp	r26, r22
    2306:	b7 07       	cpc	r27, r23
    2308:	10 f0       	brcs	.+4      	; 0x230e <__udivmodhi4_ep>
    230a:	a6 1b       	sub	r26, r22
    230c:	b7 0b       	sbc	r27, r23

0000230e <__udivmodhi4_ep>:
    230e:	88 1f       	adc	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	5a 95       	dec	r21
    2314:	a9 f7       	brne	.-22     	; 0x2300 <__udivmodhi4_loop>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	08 95       	ret

00002320 <setjmp>:
    2320:	dc 01       	movw	r26, r24
    2322:	2d 92       	st	X+, r2
    2324:	3d 92       	st	X+, r3
    2326:	4d 92       	st	X+, r4
    2328:	5d 92       	st	X+, r5
    232a:	6d 92       	st	X+, r6
    232c:	7d 92       	st	X+, r7
    232e:	8d 92       	st	X+, r8
    2330:	9d 92       	st	X+, r9
    2332:	ad 92       	st	X+, r10
    2334:	bd 92       	st	X+, r11
    2336:	cd 92       	st	X+, r12
    2338:	dd 92       	st	X+, r13
    233a:	ed 92       	st	X+, r14
    233c:	fd 92       	st	X+, r15
    233e:	0d 93       	st	X+, r16
    2340:	1d 93       	st	X+, r17
    2342:	cd 93       	st	X+, r28
    2344:	dd 93       	st	X+, r29
    2346:	ff 91       	pop	r31
    2348:	ef 91       	pop	r30
    234a:	8d b7       	in	r24, 0x3d	; 61
    234c:	8d 93       	st	X+, r24
    234e:	8e b7       	in	r24, 0x3e	; 62
    2350:	8d 93       	st	X+, r24
    2352:	8f b7       	in	r24, 0x3f	; 63
    2354:	8d 93       	st	X+, r24
    2356:	ed 93       	st	X+, r30
    2358:	fd 93       	st	X+, r31
    235a:	88 27       	eor	r24, r24
    235c:	99 27       	eor	r25, r25
    235e:	09 94       	ijmp

00002360 <longjmp>:
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	91 05       	cpc	r25, r1
    2368:	81 1d       	adc	r24, r1
    236a:	2d 90       	ld	r2, X+
    236c:	3d 90       	ld	r3, X+
    236e:	4d 90       	ld	r4, X+
    2370:	5d 90       	ld	r5, X+
    2372:	6d 90       	ld	r6, X+
    2374:	7d 90       	ld	r7, X+
    2376:	8d 90       	ld	r8, X+
    2378:	9d 90       	ld	r9, X+
    237a:	ad 90       	ld	r10, X+
    237c:	bd 90       	ld	r11, X+
    237e:	cd 90       	ld	r12, X+
    2380:	dd 90       	ld	r13, X+
    2382:	ed 90       	ld	r14, X+
    2384:	fd 90       	ld	r15, X+
    2386:	0d 91       	ld	r16, X+
    2388:	1d 91       	ld	r17, X+
    238a:	cd 91       	ld	r28, X+
    238c:	dd 91       	ld	r29, X+
    238e:	ed 91       	ld	r30, X+
    2390:	fd 91       	ld	r31, X+
    2392:	0d 90       	ld	r0, X+
    2394:	f8 94       	cli
    2396:	fe bf       	out	0x3e, r31	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	ed bf       	out	0x3d, r30	; 61
    239c:	ed 91       	ld	r30, X+
    239e:	fd 91       	ld	r31, X+
    23a0:	09 94       	ijmp

000023a2 <_exit>:
    23a2:	f8 94       	cli

000023a4 <__stop_program>:
    23a4:	ff cf       	rjmp	.-2      	; 0x23a4 <__stop_program>
